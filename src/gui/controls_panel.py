"""
Controls Panel - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional, Callable
import logging
import time
import json
from datetime import datetime, timedelta
import threading
from enum import Enum

class ScanIntensity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    STEALTH = "stealth"
    NORMAL = "normal" 
    AGGRESSIVE = "aggressive"
    FULL_ATTACK = "full"
    PENTEST = "pentest"

class ScanPhase(Enum):
    """–§–∞–∑—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    RECON = "reconnaissance"
    DISCOVERY = "discovery"
    VULN_SCAN = "vulnerability_scan"
    EXPLOITATION = "exploitation"
    POST_EXPLOIT = "post_exploitation"

class ControlsPanel:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤
    """
    
    def __init__(self, engine=None):
        self.logger = logging.getLogger('RapidRecon.ControlsPanel')
        self.engine = engine
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_state = {
            'is_scanning': False,
            'is_paused': False,
            'current_phase': None,
            'start_time': None,
            'estimated_completion': None,
            'progress': 0.0,
            'current_target': None,
            'threads_active': 0
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_config = {
            'intensity': ScanIntensity.NORMAL,
            'phases_enabled': {
                'recon': True,
                'discovery': True, 
                'vuln_scan': False,
                'exploitation': False,
                'post_exploit': False
            },
            'advanced_options': {
                'stealth_mode': True,
                'randomize_scan': True,
                'obfuscate_traffic': False,
                'use_proxies': False,
                'rate_limit': 10,
                'max_threads': 5,
                'timeout': 5,
                'retry_count': 2
            },
            'custom_ports': [80, 443, 22, 21, 25, 53, 110, 143, 993, 995, 8080, 8443],
            'user_agents': [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
            ]
        }
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resource_monitor = {
            'cpu_usage': 0,
            'memory_usage': 0,
            'network_usage': 0,
            'requests_per_second': 0,
            'active_connections': 0
        }
        
        # Callbacks
        self.on_scan_start = None
        self.on_scan_pause = None
        self.on_scan_resume = None
        self.on_scan_stop = None
        self.on_config_change = None
        
        # –¢–∞–π–º–µ—Ä—ã –∏ –ø–æ—Ç–æ–∫–∏
        self.update_timer = None
        self.resource_monitor_thread = None
        self.monitoring_active = False
        
    def create_controls_panel(self, parent: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        with dpg.child_window(parent=parent, border=False) as controls_panel:
            # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
            with dpg.collapsing_header(label="‚ö° Quick Launch", default_open=True):
                self._create_quick_launch_section()
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with dpg.collapsing_header(label="üéØ Scan Control", default_open=True):
                self._create_scan_control_section()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.collapsing_header(label="üîß Scan Configuration", default_open=False):
                self._create_scan_config_section()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            with dpg.collapsing_header(label="üìä Live Monitoring", default_open=False):
                self._create_monitoring_section()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            with dpg.collapsing_header(label="‚öôÔ∏è Advanced Settings", default_open=False):
                self._create_advanced_section()
        
        return controls_panel
    
    def _create_quick_launch_section(self):
        """–°–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        with dpg.group():
            dpg.add_text("Primary Target:", color=[150, 150, 160])
            with dpg.group(horizontal=True):
                dpg.add_input_text(
                    tag="quick_target",
                    hint="example.com / 192.168.1.1",
                    width=180
                )
                dpg.add_button(
                    label="üéØ",
                    callback=self._quick_add_target,
                    width=30
                )
            
            dpg.add_text("Scan Intensity:", color=[150, 150, 160])
            dpg.add_combo(
                tag="quick_intensity",
                items=["üöÄ Stealth", "‚ö° Normal", "üí• Aggressive", "üî• Full Attack", "üíÄ Pentest"],
                default_value="‚ö° Normal",
                width=-1,
                callback=self._on_intensity_change
            )
            
            # –ë—ã—Å—Ç—Ä—ã–µ —Ü–µ–ª–∏
            dpg.add_text("Quick Targets:", color=[150, 150, 160])
            with dpg.group(horizontal=True): 
                quick_targets = [
                    ("üåê Domain", "example.com"),
                    ("üè† Local", "192.168.1.1"),
                    ("üîç Test", "scanme.nmap.org"),
                    ("üì± Mobile", "mobile.example.com")
                ]
                
                for label, target in quick_targets:
                    dpg.add_button(
                        label=label,
                        callback=lambda s, d, t=target: self._set_quick_target(t),
                        width=70
                    )
    
    def _create_scan_control_section(self):
        """–°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        with dpg.group():
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.group(horizontal=True):
                self.start_btn = dpg.add_button(
                    label="üöÄ Start Scan",
                    tag="start_btn",
                    width=100,
                    callback=self.start_scan
                )
                self.pause_btn = dpg.add_button(
                    label="‚è∏Ô∏è Pause", 
                    tag="pause_btn",
                    width=80,
                    callback=self.pause_scan,
                    show=False
                )
            
            with dpg.group(horizontal=True):
                self.resume_btn = dpg.add_button(
                    label="‚ñ∂Ô∏è Resume",
                    tag="resume_btn",
                    width=80,
                    callback=self.resume_scan,
                    show=False
                )
                self.stop_btn = dpg.add_button(
                    label="‚èπÔ∏è Stop",
                    tag="stop_btn",
                    width=80,
                    callback=self.stop_scan,
                    show=False
                )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            dpg.add_text("Scan Progress:", color=[150, 150, 160])
            with dpg.group(horizontal=True):
                dpg.add_progress_bar(
                    tag="scan_progress",
                    default_value=0.0,
                    width=150
                )
                dpg.add_text("0%", tag="progress_text")
            
            # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            dpg.add_text("Status: Ready", tag="status_text", color=[72, 199, 116])
            
            # –¢–∞–π–º–µ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("Elapsed:", color=[150, 150, 160])
                dpg.add_text("00:00:00", tag="elapsed_time")
                dpg.add_text("ETA:", color=[150, 150, 160])
                dpg.add_text("--:--:--", tag="eta_time")
    
    def _create_scan_config_section(self):
        """–°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with dpg.group():
            # –§–∞–∑—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            dpg.add_text("Scan Phases:", color=[150, 150, 160])
            dpg.add_checkbox(
                tag="phase_recon",
                label="üîç Reconnaissance",
                default_value=True,
                callback=self._on_phase_change
            )
            dpg.add_checkbox(
                tag="phase_discovery", 
                label="üåê Host Discovery",
                default_value=True,
                callback=self._on_phase_change
            )
            dpg.add_checkbox(
                tag="phase_vuln",
                label="üî¥ Vulnerability Scan", 
                default_value=False,
                callback=self._on_phase_change
            )
            dpg.add_checkbox(
                tag="phase_exploit",
                label="üí• Exploitation",
                default_value=False,
                callback=self._on_phase_change
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            dpg.add_text("Performance:", color=[150, 150, 160])
            dpg.add_slider_int(
                tag="config_threads",
                label="Max Threads",
                default_value=5,
                min_value=1,
                max_value=50,
                callback=self._on_config_change
            )
            dpg.add_slider_int(
                tag="config_rate_limit",
                label="Rate Limit (req/sec)",
                default_value=10,
                min_value=1, 
                max_value=100,
                callback=self._on_config_change
            )
            dpg.add_slider_int(
                tag="config_timeout",
                label="Timeout (seconds)",
                default_value=5,
                min_value=1,
                max_value=30,
                callback=self._on_config_change
            )
    
    def _create_monitoring_section(self):
        """–°–µ–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        with dpg.group():
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            dpg.add_text("Resource Usage:", color=[150, 150, 160])
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=120):
                    dpg.add_text("CPU:", color=[150, 150, 160])
                    dpg.add_text("0%", tag="cpu_usage", color=[86, 156, 214])
                    
                    dpg.add_text("Memory:", color=[150, 150, 160])
                    dpg.add_text("0 MB", tag="memory_usage", color=[123, 97, 255])
                
                with dpg.child_window(width=120):
                    dpg.add_text("Network:", color=[150, 150, 160])
                    dpg.add_text("0 KB/s", tag="network_usage", color=[72, 199, 116])
                    
                    dpg.add_text("Requests:", color=[150, 150, 160])
                    dpg.add_text("0/sec", tag="requests_sec", color=[255, 179, 64])
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            dpg.add_text("Current Activity:", color=[150, 150, 160])
            dpg.add_text("Idle", tag="current_activity", color=[150, 150, 160])
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∏)
            dpg.add_button(
                label="üìà Show Resource Graphs",
                callback=self._show_resource_graphs,
                width=-1
            )
    
    def _create_advanced_section(self):
        """–°–µ–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with dpg.tab_bar():
            # –í–∫–ª–∞–¥–∫–∞ stealth
            with dpg.tab(label="üïµÔ∏è Stealth"):
                self._create_stealth_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ —Å–µ—Ç–∏
            with dpg.tab(label="üåê Network"):
                self._create_network_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
            with dpg.tab(label="üîß Customization"):
                self._create_customization_tab()
    
    def _create_stealth_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ stealth –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with dpg.group():
            dpg.add_checkbox(
                tag="stealth_mode",
                label="Enable Stealth Mode",
                default_value=True,
                callback=self._on_config_change
            )
            dpg.add_checkbox(
                tag="randomize_scan",
                label="Randomize Scan Order", 
                default_value=True,
                callback=self._on_config_change
            )
            dpg.add_checkbox(
                tag="obfuscate_traffic",
                label="Obfuscate Traffic",
                default_value=False,
                callback=self._on_config_change
            )
            dpg.add_checkbox(
                tag="use_proxies",
                label="Use Proxy Chain",
                default_value=False,
                callback=self._on_config_change
            )
            
            dpg.add_text("Scan Delay (ms):", color=[150, 150, 160])
            dpg.add_slider_int(
                tag="scan_delay",
                label="Delay Between Requests",
                default_value=100,
                min_value=0,
                max_value=5000,
                callback=self._on_config_change
            )
    
    def _create_network_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with dpg.group():
            dpg.add_text("Port Configuration:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="custom_ports",
                hint="80,443,22,21,25,53...",
                multiline=True,
                height=60,
                width=-1,
                callback=self._on_ports_change
            )
            
            dpg.add_text("User Agents:", color=[150, 150, 160])
            dpg.add_combo(
                tag="user_agent",
                items=self.scan_config['user_agents'],
                default_value=self.scan_config['user_agents'][0],
                width=-1,
                callback=self._on_config_change
            )
            
            dpg.add_text("DNS Servers:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="dns_servers",
                default_value="8.8.8.8,1.1.1.1",
                width=-1,
                callback=self._on_config_change
            )
    
    def _create_customization_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"""
        with dpg.group():
            dpg.add_text("Custom Scripts:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="pre_scan_script",
                hint="Pre-scan script path...",
                width=-1
            )
            dpg.add_input_text(
                tag="post_scan_script", 
                hint="Post-scan script path...",
                width=-1
            )
            
            dpg.add_text("Output Format:", color=[150, 150, 160])
            dpg.add_combo(
                tag="output_format",
                items=["JSON", "XML", "CSV", "HTML", "PDF"],
                default_value="JSON",
                width=-1
            )
            
            dpg.add_checkbox(
                tag="auto_save",
                label="Auto-save Results",
                default_value=True
            )
            dpg.add_checkbox(
                tag="backup_results",
                label="Create Backups",
                default_value=True
            )
    
    def _quick_add_target(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏"""
        target = dpg.get_value("quick_target")
        if target:
            self._set_quick_target(target)
    
    def _set_quick_target(self, target: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –≤ quick input"""
        dpg.set_value("quick_target", target)
        self.add_to_log(f"üéØ Target set: {target}")
    
    def _on_intensity_change(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
        intensity_map = {
            "üöÄ Stealth": ScanIntensity.STEALTH,
            "‚ö° Normal": ScanIntensity.NORMAL,
            "üí• Aggressive": ScanIntensity.AGGRESSIVE, 
            "üî• Full Attack": ScanIntensity.FULL_ATTACK,
            "üíÄ Pentest": ScanIntensity.PENTEST
        }
        
        self.scan_config['intensity'] = intensity_map.get(app_data, ScanIntensity.NORMAL)
        self._apply_intensity_preset()
        self.add_to_log(f"üéõÔ∏è Scan intensity: {app_data}")
    
    def _apply_intensity_preset(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"""
        intensity = self.scan_config['intensity']
        
        presets = {
            ScanIntensity.STEALTH: {'threads': 2, 'rate_limit': 2, 'timeout': 10},
            ScanIntensity.NORMAL: {'threads': 5, 'rate_limit': 10, 'timeout': 5},
            ScanIntensity.AGGRESSIVE: {'threads': 15, 'rate_limit': 25, 'timeout': 3},
            ScanIntensity.FULL_ATTACK: {'threads': 30, 'rate_limit': 50, 'timeout': 2},
            ScanIntensity.PENTEST: {'threads': 50, 'rate_limit': 100, 'timeout': 1}
        }
        
        preset = presets.get(intensity, presets[ScanIntensity.NORMAL])
        self.scan_config['advanced_options'].update(preset)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        dpg.set_value("config_threads", preset['threads'])
        dpg.set_value("config_rate_limit", preset['rate_limit']) 
        dpg.set_value("config_timeout", preset['timeout'])
    
    def _on_phase_change(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        phase_map = {
            'phase_recon': 'recon',
            'phase_discovery': 'discovery',
            'phase_vuln': 'vuln_scan', 
            'phase_exploit': 'exploitation'
        }
        
        phase = phase_map.get(sender)
        if phase:
            self.scan_config['phases_enabled'][phase] = app_data
            self.add_to_log(f"üîß {phase} phase: {'enabled' if app_data else 'disabled'}")
    
    def _on_config_change(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_map = {
            'config_threads': 'max_threads',
            'config_rate_limit': 'rate_limit',
            'config_timeout': 'timeout',
            'stealth_mode': 'stealth_mode',
            'randomize_scan': 'randomize_scan',
            'obfuscate_traffic': 'obfuscate_traffic',
            'use_proxies': 'use_proxies'
        }
        
        config_key = config_map.get(sender)
        if config_key:
            self.scan_config['advanced_options'][config_key] = app_data
    
    def _on_ports_change(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤"""
        try:
            ports = [int(port.strip()) for port in app_data.split(',') if port.strip()]
            self.scan_config['custom_ports'] = ports
            self.add_to_log(f"üîß Custom ports updated: {len(ports)} ports")
        except ValueError as e:
            self.add_to_log(f"‚ùå Invalid port format: {e}")
    
    def _show_resource_graphs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.add_to_log("üìà Resource graphs - to be implemented")
    
    def start_scan(self, target: str = None, intensity: str = None):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not target:
                target = dpg.get_value("quick_target")
            
            if not target:
                self.add_to_log("‚ùå Please enter a target first!")
                return False
            
            if intensity:
                self.scan_config['intensity'] = intensity
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.scan_state.update({
                'is_scanning': True,
                'is_paused': False,
                'start_time': datetime.now(),
                'current_phase': ScanPhase.RECON,
                'current_target': target,
                'progress': 0.0
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self._update_control_buttons()
            dpg.set_value("status_text", "Status: Scanning")
            dpg.configure_item("status_text", color=[255, 179, 64])
            dpg.set_value("current_activity", f"Reconnaissance: {target}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
            self._start_resource_monitoring()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            self._start_scan_timer()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_scan_start:
                self.on_scan_start(target, self.scan_config)
            
            self.add_to_log(f"üöÄ Scan started for: {target}")
            self.add_to_log(f"üéØ Intensity: {self.scan_config['intensity'].value}")
            
            return True
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error starting scan: {e}")
            return False
    
    def pause_scan(self):
        """–ü–∞—É–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.scan_state.update({
                'is_scanning': True,
                'is_paused': True
            })
            
            self._update_control_buttons()
            dpg.set_value("status_text", "Status: Paused")
            dpg.configure_item("status_text", color=[255, 179, 64])
            
            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._pause_resource_monitoring()
            
            if self.on_scan_pause:
                self.on_scan_pause()
            
            self.add_to_log("‚è∏Ô∏è Scan paused")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error pausing scan: {e}")
    
    def resume_scan(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.scan_state.update({
                'is_scanning': True,
                'is_paused': False
            })
            
            self._update_control_buttons()
            dpg.set_value("status_text", "Status: Scanning")
            dpg.configure_item("status_text", color=[255, 179, 64])
            
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._resume_resource_monitoring()
            
            if self.on_scan_resume:
                self.on_scan_resume()
            
            self.add_to_log("‚ñ∂Ô∏è Scan resumed")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error resuming scan: {e}")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.scan_state.update({
                'is_scanning': False,
                'is_paused': False,
                'current_phase': None,
                'progress': 0.0
            })
            
            self._update_control_buttons()
            dpg.set_value("status_text", "Status: Ready")
            dpg.configure_item("status_text", color=[72, 199, 116])
            dpg.set_value("current_activity", "Idle")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–∞–π–º–µ—Ä
            self._stop_resource_monitoring()
            self._stop_scan_timer()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            dpg.set_value("scan_progress", 0.0)
            dpg.set_value("progress_text", "0%")
            dpg.set_value("elapsed_time", "00:00:00")
            dpg.set_value("eta_time", "--:--:--")
            
            if self.on_scan_stop:
                self.on_scan_stop()
            
            self.add_to_log("‚èπÔ∏è Scan stopped")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error stopping scan: {e}")
    
    def _update_control_buttons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        state = self.scan_state
        
        dpg.configure_item("start_btn", show=not state['is_scanning'])
        dpg.configure_item("pause_btn", show=state['is_scanning'] and not state['is_paused'])
        dpg.configure_item("resume_btn", show=state['is_scanning'] and state['is_paused'])
        dpg.configure_item("stop_btn", show=state['is_scanning'])
    
    def _start_resource_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.monitoring_active = True
        self.resource_monitor_thread = threading.Thread(
            target=self._resource_monitor_worker,
            daemon=True
        )
        self.resource_monitor_thread.start()
    
    def _pause_resource_monitoring(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.monitoring_active = False
    
    def _resume_resource_monitoring(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.monitoring_active = True
    
    def _stop_resource_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.monitoring_active = False
        if self.resource_monitor_thread and self.resource_monitor_thread.is_alive():
            self.resource_monitor_thread.join(timeout=1.0)
    
    def _resource_monitor_worker(self):
        """–í–æ—Ä–∫–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        while self.monitoring_active:
            try:
                # –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                import psutil
                import random
                
                self.resource_monitor.update({
                    'cpu_usage': psutil.cpu_percent(),
                    'memory_usage': psutil.virtual_memory().percent,
                    'network_usage': random.randint(10, 1000),  # KB/s
                    'requests_per_second': random.randint(0, 50),
                    'active_connections': random.randint(0, 20)
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                dpg.set_value("cpu_usage", f"{self.resource_monitor['cpu_usage']:.1f}%")
                dpg.set_value("memory_usage", f"{self.resource_monitor['memory_usage']:.1f}%")
                dpg.set_value("network_usage", f"{self.resource_monitor['network_usage']} KB/s")
                dpg.set_value("requests_sec", f"{self.resource_monitor['requests_per_second']}/sec")
                
                time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
            except Exception as e:
                self.logger.error(f"Resource monitor error: {e}")
                time.sleep(5)
    
    def _start_scan_timer(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.update_timer = threading.Timer(1.0, self._update_scan_timer)
        self.update_timer.start()
    
    def _stop_scan_timer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.update_timer:
            self.update_timer.cancel()
    
    def _update_scan_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scan_state['is_scanning'] and not self.scan_state['is_paused']:
            elapsed = datetime.now() - self.scan_state['start_time']
            elapsed_str = str(elapsed).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            
            # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if self.scan_state['progress'] < 1.0:
                self.scan_state['progress'] += 0.01
                progress_percent = int(self.scan_state['progress'] * 100)
                
                dpg.set_value("scan_progress", self.scan_state['progress'])
                dpg.set_value("progress_text", f"{progress_percent}%")
                dpg.set_value("elapsed_time", elapsed_str)
                
                # –†–∞—Å—á–µ—Ç ETA
                if progress_percent > 0:
                    total_time = elapsed.total_seconds() / (progress_percent / 100)
                    eta = self.scan_state['start_time'] + timedelta(seconds=total_time)
                    eta_str = eta.strftime("%H:%M:%S")
                    dpg.set_value("eta_time", eta_str)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            self._start_scan_timer()
    
    def update_scan_progress(self, progress: float, phase: ScanPhase = None, activity: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_state['progress'] = progress
        
        if phase:
            self.scan_state['current_phase'] = phase
        
        if activity:
            dpg.set_value("current_activity", activity)
        
        progress_percent = int(progress * 100)
        dpg.set_value("scan_progress", progress)
        dpg.set_value("progress_text", f"{progress_percent}%")
    
    def get_scan_state(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        state = self.scan_state.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è UI
        if state['is_scanning']:
            if state['is_paused']:
                state.update({
                    'status': 'Paused',
                    'color': [255, 179, 64]
                })
            else:
                state.update({
                    'status': 'Scanning', 
                    'color': [255, 179, 64]
                })
        else:
            state.update({
                'status': 'Ready',
                'color': [72, 199, 116]
            })
        
        return state
    
    def get_scan_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.scan_config.copy()
    
    def set_engine(self, engine):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.engine = engine
    
    def set_callbacks(self, start_callback: Callable = None, pause_callback: Callable = None,
                     resume_callback: Callable = None, stop_callback: Callable = None,
                     config_callback: Callable = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π"""
        self.on_scan_start = start_callback
        self.on_scan_pause = pause_callback
        self.on_scan_resume = resume_callback
        self.on_scan_stop = stop_callback
        self.on_config_change = config_callback
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)
    
    def save_config(self, filename: str = "scan_config.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            config_data = {
                'scan_config': self.scan_config,
                'metadata': {
                    'saved_at': datetime.now().isoformat(),
                    'version': '1.0'
                }
            }
            
            with open(filename, 'w') as f:
                json.dump(config_data, f, indent=2)
            
            self.add_to_log(f"üíæ Config saved to {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error saving config: {e}")
    
    def load_config(self, filename: str = "scan_config.json"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
            
            self.scan_config.update(data.get('scan_config', {}))
            self._update_ui_from_config()
            
            self.add_to_log(f"üì• Config loaded from {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error loading config: {e}")
    
    def _update_ui_from_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        intensity_map = {
            ScanIntensity.STEALTH: "üöÄ Stealth",
            ScanIntensity.NORMAL: "‚ö° Normal", 
            ScanIntensity.AGGRESSIVE: "üí• Aggressive",
            ScanIntensity.FULL_ATTACK: "üî• Full Attack",
            ScanIntensity.PENTEST: "üíÄ Pentest"
        }
        
        dpg.set_value("quick_intensity", intensity_map.get(
            self.scan_config['intensity'], "‚ö° Normal"
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—ã
        phases = self.scan_config['phases_enabled']
        dpg.set_value("phase_recon", phases.get('recon', True))
        dpg.set_value("phase_discovery", phases.get('discovery', True))
        dpg.set_value("phase_vuln", phases.get('vuln_scan', False))
        dpg.set_value("phase_exploit", phases.get('exploitation', False))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        options = self.scan_config['advanced_options']
        dpg.set_value("config_threads", options.get('max_threads', 5))
        dpg.set_value("config_rate_limit", options.get('rate_limit', 10))
        dpg.set_value("config_timeout", options.get('timeout', 5))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        dpg.set_value("stealth_mode", options.get('stealth_mode', True))
        dpg.set_value("randomize_scan", options.get('randomize_scan', True))
        dpg.set_value("obfuscate_traffic", options.get('obfuscate_traffic', False))
        dpg.set_value("use_proxies", options.get('use_proxies', False))
