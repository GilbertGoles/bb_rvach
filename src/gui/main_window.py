"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon –≤ —Å—Ç–∏–ª–µ Obsidian —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional
import time
import json
from datetime import datetime
import logging
import math
import random
import traceback

class ObsidianTheme:
    """–¢–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    @staticmethod
    def setup_theme():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Obsidian"""
        
        with dpg.theme() as obsidian_theme:
            # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ Obsidian
            colors = {
                'bg_primary': [18, 18, 24],
                'bg_secondary': [28, 28, 36],
                'bg_tertiary': [38, 38, 48],
                'accent_primary': [123, 97, 255],
                'accent_secondary': [86, 156, 214],
                'text_primary': [220, 220, 220],
                'text_secondary': [150, 150, 160],
                'text_muted': [100, 100, 110],
                'success': [72, 199, 116],
                'warning': [255, 179, 64],
                'error': [255, 92, 87],
                'border': [60, 60, 70]
            }
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_WindowBg, colors['bg_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Text, colors['text_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Border, colors['border'])
                dpg.add_theme_style(dpg.mvStyleVar_WindowRounding, 8)
                dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 6)
                dpg.add_theme_style(dpg.mvStyleVar_GrabRounding, 6)
            
            # –ö–Ω–æ–ø–∫–∏
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, [103, 77, 235])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 4)
            
            # –ü–æ–ª—è –≤–≤–æ–¥–∞
            with dpg.theme_component(dpg.mvInputText):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_FrameBgHovered, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_FrameBgActive, colors['bg_tertiary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 6)
            
            # –í–∫–ª–∞–¥–∫–∏
            with dpg.theme_component(dpg.mvTabBar):
                dpg.add_theme_color(dpg.mvThemeCol_Tab, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabActive, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabUnfocused, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabUnfocusedActive, colors['bg_tertiary'])
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            with dpg.theme_component(dpg.mvCollapsingHeader):
                dpg.add_theme_color(dpg.mvThemeCol_Header, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_HeaderHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_HeaderActive, colors['accent_primary'])
        
        return obsidian_theme

class DangerTheme:
    """–¢–µ–º–∞ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∫—Ä–∞—Å–Ω–∞—è)"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as danger_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 60, 60, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 80, 80, 255])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, [255, 40, 40, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return danger_theme

class GraphVisualization:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    def __init__(self):
        self.nodes = {}
        self.edges = []
        self.node_counter = 0
        self.selected_node = None
        self.node_positions = {}
    
    def draw_graph(self, width: int, height: int):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∞"""
        # –§–æ–Ω –≥—Ä–∞—Ñ–∞
        dpg.draw_rectangle(
            [0, 0], 
            [width, height], 
            fill=[25, 25, 32],
            parent="graph_canvas"
        )
        
        # –°–µ—Ç–∫–∞ (—Ç–æ–Ω–∫–∞—è)
        grid_size = 50
        for x in range(0, width, grid_size):
            dpg.draw_line(
                [x, 0], [x, height],
                color=[40, 40, 50],
                thickness=1,
                parent="graph_canvas"
            )
        for y in range(0, height, grid_size):
            dpg.draw_line(
                [0, y], [width, y],
                color=[40, 40, 50],
                thickness=1,
                parent="graph_canvas"
            )
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤—è–∑–µ–π
        for edge in self.edges:
            source = self.nodes.get(edge['source'])
            target = self.nodes.get(edge['target'])
            if source and target:
                dpg.draw_line(
                    source['position'], target['position'],
                    color=edge['color'],
                    thickness=edge['thickness'],
                    parent="graph_canvas"
                )
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–∑–ª–æ–≤
        for node_id, node in self.nodes.items():
            pos = node['position']
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ —É–∑–ª–∞
            dpg.draw_circle(
                pos, node['radius'],
                fill=node['color'],
                color=[255, 255, 255, 100] if node_id != self.selected_node else [255, 255, 0, 200],
                thickness=3 if node_id == self.selected_node else 2,
                parent="graph_canvas"
            )
            
            # –ò–∫–æ–Ω–∫–∞ —É–∑–ª–∞
            icon = node.get('icon', '‚Ä¢')
            dpg.draw_text(
                [pos[0] - 4, pos[1] - 6],
                icon,
                color=[255, 255, 255],
                size=14,
                parent="graph_canvas"
            )
            
            # –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ)
            dpg.draw_text(
                [pos[0] - len(node['label']) * 3, pos[1] + node['radius'] + 8],
                node['label'],
                color=[200, 200, 200],
                size=11,
                parent="graph_canvas"
            )
    
    def add_node(self, node_data: Dict[str, Any]) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª"""
        node_id = self.node_counter
        self.node_counter += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–∞
        node_type = node_data.get('type', 'custom')
        node_config = self._get_node_config(node_type)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ)
        position = self._calculate_node_position(node_id, node_type)
        
        self.nodes[node_id] = {
            'id': node_id,
            'label': self._truncate_label(node_data.get('data', 'Node'), 12),
            'type': node_type,
            'data': node_data,
            'position': position,
            'radius': node_config['radius'],
            'color': node_config['color'],
            'icon': node_config['icon']
        }
        
        return node_id
    
    def _get_node_config(self, node_type: str) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∑–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
        configs = {
            'initial_target': {
                'color': [72, 199, 116, 200],    # –ó–µ–ª–µ–Ω—ã–π
                'radius': 25,
                'icon': 'üéØ'
            },
            'subdomain': {
                'color': [86, 156, 214, 180],    # –°–∏–Ω–∏–π
                'radius': 20,
                'icon': 'üåê'
            },
            'active_host': {
                'color': [255, 179, 64, 200],    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                'radius': 22,
                'icon': 'üíª'
            },
            'open_ports': {
                'color': [123, 97, 255, 180],    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                'radius': 20,
                'icon': 'üîì'
            },
            'service': {
                'color': [158, 118, 255, 180],   # –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
                'radius': 18,
                'icon': '‚öôÔ∏è'
            },
            'vulnerability': {
                'color': [255, 92, 87, 220],     # –ö—Ä–∞—Å–Ω—ã–π
                'radius': 19,
                'icon': 'üî¥'
            },
            'vulnerability_scan': {
                'color': [255, 120, 100, 180],   # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
                'radius': 20,
                'icon': 'üîç'
            },
            'exploitation': {
                'color': [255, 60, 60, 220],     # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
                'radius': 23,
                'icon': 'üí•'
            },
            'exploitation_success': {
                'color': [255, 0, 0, 230],       # –û—á–µ–Ω—å –∫—Ä–∞—Å–Ω—ã–π
                'radius': 28,
                'icon': 'üíÄ'
            },
            'internal_scan': {
                'color': [64, 192, 192, 180],    # –ë–∏—Ä—é–∑–æ–≤—ã–π
                'radius': 24,
                'icon': 'üîç'
            },
            'domain_scan': {
                'color': [100, 180, 255, 180],   # –ì–æ–ª—É–±–æ–π
                'radius': 21,
                'icon': 'üåç'
            }
        }
        return configs.get(node_type, {
            'color': [128, 128, 128, 150],
            'radius': 20,
            'icon': '‚Ä¢'
        })
    
    def _calculate_node_position(self, node_id: int, node_type: str) -> List[float]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤"""
        center_x, center_y = 500, 350
        
        if not self.nodes:
            return [center_x, center_y]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_positions = {
            'initial_target': [center_x - 200, center_y - 200],
            'subdomain': [center_x - 150, center_y - 100],
            'active_host': [center_x, center_y],
            'open_ports': [center_x + 150, center_y],
            'service': [center_x + 250, center_y + 50],
            'vulnerability': [center_x + 100, center_y + 150],
            'exploitation': [center_x - 100, center_y + 150],
            'exploitation_success': [center_x - 200, center_y + 200],
            'internal_scan': [center_x - 300, center_y]
        }
        
        if node_type in type_positions:
            base_pos = type_positions[node_type]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º –¥–ª—è —É–∑–ª–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            return [
                base_pos[0] + random.uniform(-30, 30),
                base_pos[1] + random.uniform(-30, 30)
            ]
        
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –∫—Ä—É–≥–æ–≤–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
        angle = (node_id * 2 * math.pi / len(self.nodes))
        radius = 200 + (len(self.nodes) * 5)
        return [
            center_x + radius * math.cos(angle),
            center_y + radius * math.sin(angle)
        ]
    
    def add_edge(self, source_id: int, target_id: int, edge_type: str = "normal"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å"""
        if source_id in self.nodes and target_id in self.nodes:
            edge_configs = {
                "normal": {"color": [150, 150, 150, 100], "thickness": 2},
                "exploitation": {"color": [255, 60, 60, 150], "thickness": 3},
                "vulnerability": {"color": [255, 100, 100, 120], "thickness": 2},
                "lateral": {"color": [255, 165, 0, 150], "thickness": 3}
            }
            
            config = edge_configs.get(edge_type, edge_configs["normal"])
            
            self.edges.append({
                'source': source_id,
                'target': target_id,
                'type': edge_type,
                'color': config['color'],
                'thickness': config['thickness']
            })
    
    def _truncate_label(self, label: str, max_length: int = 15) -> str:
        """–û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏"""
        if len(label) <= max_length:
            return label
        return label[:max_length-3] + "..."
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ"""
        self.nodes.clear()
        self.edges.clear()
        self.node_counter = 0
        self.selected_node = None

class MainWindow:
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon –≤ —Å—Ç–∏–ª–µ Obsidian —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.graph = GraphVisualization()
        self.is_scanning = False
        self.logger = logging.getLogger('RapidRecon.GUI')
        self.settings_window_open = False
        self.selected_targets = set()
        self.last_update_time = 0
        self.update_interval = 2.0  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        self.logger.info("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.setup_gui()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º
        self.obsidian_theme = ObsidianTheme.setup_theme()
        self.danger_theme = DangerTheme.setup_theme()
        dpg.bind_theme(self.obsidian_theme)
        
        self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
        try:
            self.logger.info("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Dear PyGui...")
            dpg.create_context()
            
            # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            with dpg.window(
                tag="main_window",
                label="RapidRecon - Advanced Network Reconnaissance",
                width=1600,
                height=1000,
                no_move=True,
                no_resize=True,
                no_collapse=True,
                no_close=True
            ):
                # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∫–∞–∫ –≤ Obsidian)
                with dpg.child_window(
                    tag="sidebar",
                    width=300,
                    border=False
                ):
                    self._setup_sidebar()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
                with dpg.group(horizontal=True, width=-1, height=-1):
                    # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    with dpg.child_window(
                        tag="content_area",
                        width=-1,
                        border=False
                    ):
                        self._setup_content_area()
            
            # –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self._setup_settings_window()
            
            # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π
            self._setup_targets_window()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
            dpg.create_viewport(
                title='RapidRecon ‚Ä¢ Advanced Security Scanner',
                width=1600,
                height=1000,
                min_width=1200,
                min_height=800
            )
            
            self.logger.info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GUI: {e}")
            self.logger.error(traceback.format_exc())
            raise
    
    def _setup_sidebar(self):
        """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å Obsidian"""
        # –õ–æ–≥–æ—Ç–∏–ø
        with dpg.group():
            dpg.add_spacer(height=20)
            dpg.add_text("RapidRecon", color=[123, 97, 255])
            dpg.add_text("Advanced Security Scanner", color=[150, 150, 160])
            dpg.add_separator()
        
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        with dpg.collapsing_header(
            label="‚ö° Quick Launch",
            default_open=True
        ):
            dpg.add_text("Primary Target:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="quick_target_input",
                hint="example.com / 192.168.1.1 / 10.0.0.0/24",
                width=-1
            )
            
            dpg.add_text("Scan Intensity:", color=[150, 150, 160])
            dpg.add_combo(
                tag="scan_level",
                items=["üöÄ Stealth", "‚ö° Normal", "üí• Aggressive", "üî• Full Attack", "üíÄ Pentest"],
                default_value="‚ö° Normal",
                width=-1,
                callback=self._on_scan_level_change
            )
            
            dpg.add_button(
                label="üéØ Start Reconnaissance",
                tag="quick_scan_button",
                width=-1,
                callback=self.quick_start_scan
            )
            dpg.add_button(
                label="‚èπÔ∏è Stop All Scans", 
                tag="quick_stop_button",
                width=-1,
                callback=self.stop_scan,
                show=False
            )
            
            dpg.add_button(
                label="üìã Select from Discovered",
                width=-1,
                callback=self.show_targets_window
            )
        
        # –ú–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        with dpg.collapsing_header(
            label="üîß Capabilities",
            default_open=True
        ):
            dpg.add_text("Available Modules:", color=[150, 150, 160])
            dpg.add_text("‚Ä¢ Ping Scanner", color=[200, 200, 200])
            dpg.add_text("‚Ä¢ Port Scanner", color=[200, 200, 200])
            dpg.add_text("‚Ä¢ Service Detector", color=[200, 200, 200])
            dpg.add_text("‚Ä¢ Subdomain Scanner", color=[200, 200, 200])
            dpg.add_text("‚Ä¢ Vulnerability Scanner", color=[255, 100, 100])
            dpg.add_text("‚Ä¢ Exploitation Engine", color=[255, 60, 60])
            dpg.add_text("‚Ä¢ Lateral Movement", color=[255, 165, 0])
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        with dpg.collapsing_header(
            label="üìã Scan Profiles",
            default_open=True
        ):
            profiles = ["stealth", "normal", "aggressive"]  # –ó–∞–≥–ª—É—à–∫–∞
            for profile in profiles:
                dpg.add_button(
                    label=f"‚Ä¢ {profile.title()}",
                    width=-1,
                    callback=lambda s, d, p=profile: self._set_profile(p)
                )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        with dpg.collapsing_header(
            label="üìà Live Statistics",
            default_open=True
        ):
            dpg.add_text("Network:", color=[150, 150, 160])
            dpg.add_text("Nodes: 0", tag="stat_nodes")
            dpg.add_text("Services: 0", tag="stat_services")
            dpg.add_text("Targets: 0", tag="stat_targets")
            
            dpg.add_text("Security:", color=[150, 150, 160])
            dpg.add_text("Vulnerabilities: 0", tag="stat_vulns")
            dpg.add_text("Exploits: 0", tag="stat_exploits")
            dpg.add_text("Lateral Moves: 0", tag="stat_lateral")
        
        # –î–µ–π—Å—Ç–≤–∏—è
        with dpg.group():
            dpg.add_separator()
            dpg.add_button(
                label="‚öôÔ∏è Engine Settings",
                width=-1,
                callback=self.show_settings
            )
            dpg.add_button(
                label="üì§ Export All Data", 
                width=-1,
                callback=self.export_all_data
            )
            dpg.add_button(
                label="üßπ Clear Everything",
                width=-1,
                callback=self.clear_everything
            )
    
    def _setup_content_area(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        with dpg.tab_bar(tag="main_tabs"):
            # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.tab(label="üéØ Reconnaissance", tag="scan_tab"):
                self._setup_scan_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞
            with dpg.tab(label="üåê Network Map", tag="graph_tab"):
                self._setup_graph_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with dpg.tab(label="üìä Results & Analysis", tag="results_tab"):
                self._setup_results_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            with dpg.tab(label="üí• Exploitation", tag="exploit_tab"):
                self._setup_exploit_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ –º–æ–¥—É–ª–µ–π
            with dpg.tab(label="üîß Modules & Tools", tag="modules_tab"):
                self._setup_modules_tab()
    
    def _setup_scan_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        with dpg.group():
            dpg.add_text("Advanced Reconnaissance Configuration", color=[123, 97, 255])
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π
            with dpg.collapsing_header(label="üéØ Target Configuration", default_open=True):
                with dpg.group(horizontal=True):
                    with dpg.child_window(width=400):
                        dpg.add_text("Primary Targets")
                        dpg.add_input_text(
                            tag="target_input",
                            hint="Enter domains, IPs or ranges...",
                            width=-1,
                            height=60,
                            multiline=True
                        )
                        
                        dpg.add_text("Scan Scope")
                        dpg.add_combo(
                            tag="scan_scope",
                            items=["Full Infrastructure", "External Recon", "Internal Network", "Web Applications", "Critical Assets"],
                            default_value="Full Infrastructure",
                            width=-1
                        )
                    
                    with dpg.child_window(width=400):
                        dpg.add_text("Module Selection")
                        dpg.add_checkbox(tag="mod_ping", label="Ping Scanner", default_value=True)
                        dpg.add_checkbox(tag="mod_ports", label="Port Scanner", default_value=True)
                        dpg.add_checkbox(tag="mod_services", label="Service Detection", default_value=True)
                        dpg.add_checkbox(tag="mod_subdomains", label="Subdomain Discovery", default_value=True)
                        dpg.add_checkbox(tag="mod_vulns", label="Vulnerability Scanning", default_value=True)
                        dpg.add_checkbox(tag="mod_exploit", label="Exploitation Engine", default_value=False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            with dpg.collapsing_header(label="‚ö° Performance Settings"):
                with dpg.group(horizontal=True):
                    with dpg.child_window(width=300):
                        dpg.add_slider_int(
                            label="Scan Threads",
                            tag="thread_count",
                            default_value=15,
                            min_value=1,
                            max_value=50
                        )
                        dpg.add_slider_int(
                            label="Rate Limit (req/sec)",
                            tag="rate_limit",
                            default_value=10,
                            min_value=1,
                            max_value=100
                        )
                    
                    with dpg.child_window(width=300):
                        dpg.add_slider_int(
                            label="Max Depth",
                            tag="max_depth",
                            default_value=5,
                            min_value=1,
                            max_value=10
                        )
                        dpg.add_slider_int(
                            label="Timeout (seconds)",
                            tag="timeout_setting",
                            default_value=5,
                            min_value=1,
                            max_value=30
                        )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üöÄ Start Advanced Scan",
                    tag="adv_scan_button",
                    callback=self.start_scan
                )
                dpg.add_button(
                    label="‚èπÔ∏è Stop Scan", 
                    tag="adv_stop_button",
                    callback=self.stop_scan,
                    show=False
                )
                dpg.add_button(
                    label="üîç Resume Scan",
                    callback=self.resume_scan
                )
                dpg.add_button(
                    label="üßπ Clear Results",
                    callback=self.clear_results
                )
        
        # –õ–æ–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        dpg.add_text("Activity Log")
        dpg.add_input_text(
            tag="activity_log",
            multiline=True,
            height=300,
            readonly=True,
            width=-1
        )
    
    def _setup_graph_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞ —Å–µ—Ç–∏"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(label="üîÑ Refresh Map", callback=self.update_graph)
                dpg.add_button(label="üßπ Clear Map", callback=self.clear_graph)
                dpg.add_button(label="üíæ Export Map", callback=self.export_graph)
                dpg.add_button(label="üéØ Focus on Targets", callback=self.focus_on_targets)
                dpg.add_button(label="üî¥ Show Vulnerabilities", callback=self.highlight_vulnerabilities)
            
            # –õ–µ–≥–µ–Ω–¥–∞ –≥—Ä–∞—Ñ–∞
            with dpg.collapsing_header(label="üé® Map Legend", default_open=False):
                with dpg.group(horizontal=True):
                    dpg.add_text("üéØ Initial Target")
                    dpg.add_text("üåê Subdomain") 
                    dpg.add_text("üíª Active Host")
                    dpg.add_text("üîì Open Ports")
                    dpg.add_text("üî¥ Vulnerability")
                    dpg.add_text("üí• Exploitation")
                    dpg.add_text("üíÄ Success")
            
            # –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∞
            with dpg.child_window(
                tag="graph_container",
                height=650,
                border=True
            ):
                with dpg.drawlist(
                    tag="graph_canvas",
                    width=-1,
                    height=-1
                ):
                    # –ì—Ä–∞—Ñ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    pass
    
    def _setup_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with dpg.group(horizontal=True):
            # –î–µ—Ä–µ–≤–æ —É–∑–ª–æ–≤
            with dpg.child_window(width=450):
                dpg.add_text("Discovered Infrastructure")
                dpg.add_tree_node(
                    tag="nodes_tree",
                    label="Network Topology",
                    default_open=True
                )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            with dpg.child_window():
                with dpg.tab_bar():
                    # –î–µ—Ç–∞–ª–∏ —É–∑–ª–∞
                    with dpg.tab(label="Node Details"):
                        dpg.add_input_text(
                            tag="node_details",
                            multiline=True,
                            height=400,
                            readonly=True,
                            width=-1
                        )
                    
                    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏
                    with dpg.tab(label="Vulnerabilities"):
                        dpg.add_listbox(
                            tag="vulnerabilities_list",
                            items=[],
                            num_items=10,
                            width=-1
                        )
                        dpg.add_input_text(
                            tag="vuln_details",
                            multiline=True,
                            height=200,
                            readonly=True,
                            width=-1
                        )
                    
                    # –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è
                    with dpg.tab(label="Exploitation Results"):
                        dpg.add_input_text(
                            tag="exploit_results",
                            multiline=True,
                            height=400,
                            readonly=True,
                            width=-1
                        )
    
    def _setup_exploit_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        with dpg.group():
            dpg.add_text("Advanced Exploitation Engine", color=[255, 60, 60])
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Target Selection")
                    dpg.add_listbox(
                        tag="exploit_targets",
                        items=[],
                        num_items=8,
                        width=-1
                    )
                    dpg.add_button(
                        label="üéØ Load Vulnerable Targets",
                        callback=self.load_vulnerable_targets
                    )
                
                with dpg.child_window(width=400):
                    dpg.add_text("Exploitation Options")
                    dpg.add_checkbox(tag="auto_exploit", label="Auto-Exploit Vulnerabilities", default_value=False)
                    dpg.add_checkbox(tag="lateral_movement", label="Enable Lateral Movement", default_value=True)
                    dpg.add_checkbox(tag="persistence", label="Establish Persistence", default_value=False)
                    
                    dpg.add_text("Payload Type")
                    dpg.add_combo(
                        tag="payload_type",
                        items=["Reverse Shell", "Web Shell", "Meterpreter", "Custom"],
                        default_value="Reverse Shell",
                        width=-1
                    )
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            with dpg.group(horizontal=True):
                exploit_button = dpg.add_button(
                    label="üí• Start Exploitation",
                    callback=self.start_exploitation
                )
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–µ–º—É –∫ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
                if hasattr(self, 'danger_theme'):
                    dpg.bind_item_theme(exploit_button, self.danger_theme)
                
                dpg.add_button(
                    label="üîç Scan for Exploits",
                    callback=self.scan_for_exploits
                )
                dpg.add_button(
                    label="üîÑ Lateral Movement",
                    callback=self.start_lateral_movement
                )
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            dpg.add_text("Exploitation Results")
            dpg.add_input_text(
                tag="exploitation_log",
                multiline=True,
                height=300,
                readonly=True,
                width=-1
            )
    
    def _setup_modules_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –º–æ–¥—É–ª–µ–π"""
        with dpg.group():
            dpg.add_text("Security Modules & Tools", color=[123, 97, 255])
            
            with dpg.group(horizontal=True):
                # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
                with dpg.child_window(width=400):
                    dpg.add_text("Available Modules")
                    dpg.add_listbox(
                        tag="modules_list",
                        items=list(self.engine.active_modules.keys()) if hasattr(self.engine, 'active_modules') else [],
                        num_items=15,
                        width=-1
                    )
                    dpg.add_button(
                        label="üîÑ Refresh Modules",
                        callback=self.refresh_modules
                    )
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
                with dpg.child_window():
                    dpg.add_text("Module Information", tag="module_info_title")
                    dpg.add_input_text(
                        tag="module_info",
                        multiline=True,
                        height=200,
                        readonly=True,
                        width=-1
                    )
            
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            with dpg.collapsing_header(label="üõ†Ô∏è Additional Tools"):
                with dpg.group(horizontal=True):
                    dpg.add_button(label="üåê WHOIS Lookup", width=120)
                    dpg.add_button(label="üîç DNS Enumeration", width=120)
                    dpg.add_button(label="üìß Email Harvesting", width=120)
                    dpg.add_button(label="üîë SSL Scanner", width=120)
                    dpg.add_button(label="üåç GeoIP Lookup", width=120)
    
    def _setup_settings_window(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with dpg.window(
            tag="settings_window",
            label="Engine Settings",
            width=700,
            height=600,
            show=False,
            pos=[200, 100]
        ):
            with dpg.tab_bar():
                # –í–∫–ª–∞–¥–∫–∞ –æ–±—â–µ–≥–æ
                with dpg.tab(label="General"):
                    dpg.add_text("General Settings")
                    dpg.add_input_text(
                        tag="settings_scan_dir",
                        label="Scan Directory",
                        default_value="./scans/",
                        width=-1
                    )
                    dpg.add_checkbox(
                        tag="settings_auto_save",
                        label="Auto-save results",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="settings_verbose",
                        label="Verbose logging",
                        default_value=False
                    )
                
                # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                with dpg.tab(label="Scanning"):
                    dpg.add_text("Scanning Engine Settings")
                    dpg.add_slider_int(
                        tag="settings_default_threads",
                        label="Default Threads",
                        default_value=15,
                        min_value=1,
                        max_value=100
                    )
                    dpg.add_slider_int(
                        tag="settings_default_timeout",
                        label="Default Timeout (s)",
                        default_value=5,
                        min_value=1,
                        max_value=30
                    )
                    dpg.add_slider_int(
                        tag="settings_max_depth",
                        label="Maximum Depth",
                        default_value=5,
                        min_value=1,
                        max_value=10
                    )
                    dpg.add_checkbox(
                        tag="settings_follow_redirects",
                        label="Follow Redirects",
                        default_value=True
                    )
                
                # –í–∫–ª–∞–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                with dpg.tab(label="Security"):
                    dpg.add_text("Security Settings")
                    dpg.add_checkbox(
                        tag="settings_auto_exploit",
                        label="Auto-Exploit Critical Vulnerabilities",
                        default_value=False
                    )
                    dpg.add_checkbox(
                        tag="settings_enable_lateral",
                        label="Enable Lateral Movement",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="settings_stealth_mode",
                        label="Stealth Mode",
                        default_value=False
                    )
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üíæ Save Settings",
                    callback=self.save_settings
                )
                dpg.add_button(
                    label="üîÑ Apply to Current Scan",
                    callback=self.apply_settings
                )
                dpg.add_button(
                    label="‚ùå Close",
                    callback=lambda: dpg.hide_item("settings_window")
                )
    
    def _setup_targets_window(self):
        """–û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π"""
        with dpg.window(
            tag="targets_window",
            label="Select Targets from Discovered Nodes",
            width=800,
            height=600,
            show=False,
            pos=[300, 150]
        ):
            dpg.add_text("Discovered Targets (Select multiple with CTRL+Click)")
            dpg.add_listbox(
                tag="discovered_targets_list",
                items=[],
                num_items=15,
                width=-1
            )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üéØ Add Selected Targets",
                    callback=self.add_selected_targets
                )
                dpg.add_button(
                    label="üßπ Clear Selection",
                    callback=self.clear_target_selection
                )
                dpg.add_button(
                    label="‚ùå Close",
                    callback=lambda: dpg.hide_item("targets_window")
                )
    
    def _switch_tab(self, tab_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫"""
        dpg.set_value("main_tabs", tab_name)
    
    def _set_profile(self, profile_name: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if hasattr(self.engine, 'set_scan_profile'):
                if self.engine.set_scan_profile(profile_name):
                    profile_info = self.engine.get_current_profile_info() if hasattr(self.engine, 'get_current_profile_info') else {}
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
                    if dpg.does_item_exist("rate_limit"):
                        dpg.set_value("rate_limit", profile_info.get('rate_limit', 10))
                    if dpg.does_item_exist("max_depth"):
                        dpg.set_value("max_depth", profile_info.get('max_depth', 5))
                    
                    self.add_to_log(f"üìã Profile set to: {profile_name}")
            else:
                self.add_to_log(f"‚ö†Ô∏è Engine doesn't support profile setting")
        except Exception as e:
            self.logger.error(f"Error setting profile: {e}")
            self.add_to_log(f"‚ùå Error setting profile: {e}")
    
    def _on_scan_level_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        scan_level = dpg.get_value("scan_level")
        level_map = {
            "üöÄ Stealth": "stealth",
            "‚ö° Normal": "normal", 
            "üí• Aggressive": "aggressive",
            "üî• Full Attack": "aggressive",
            "üíÄ Pentest": "aggressive"
        }
        profile = level_map.get(scan_level, "normal")
        self._set_profile(profile)
        self.add_to_log(f"üéõÔ∏è Scan intensity: {scan_level}")
    
    def quick_start_scan(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            target = dpg.get_value("quick_target_input")
            if not target:
                self.add_to_log("‚ùå Please enter a target first!")
                return
            
            self.add_to_log(f"üöÄ Quick scan started for: {target}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å
            if hasattr(self.engine, 'set_targets'):
                self.engine.set_targets([target])
            elif hasattr(self.engine, 'add_initial_target'):
                self.engine.add_initial_target(target)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            scan_profile = dpg.get_value("scan_level").split(" ")[-1].lower()
            self._set_profile(scan_profile)
            
            # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(self.engine, 'start_scan'):
                if self.engine.start_scan():
                    self.is_scanning = True
                    dpg.hide_item("quick_scan_button")
                    dpg.show_item("quick_stop_button")
                    dpg.hide_item("adv_scan_button")
                    dpg.show_item("adv_stop_button")
                    self.add_to_log("‚úÖ Scan started successfully!")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    self._start_ui_updates()
                else:
                    self.add_to_log("‚ùå Failed to start scan!")
            else:
                self.add_to_log("‚ö†Ô∏è Engine doesn't support start_scan method")
                
        except Exception as e:
            self.logger.error(f"Error in quick_start_scan: {e}")
            self.add_to_log(f"‚ùå Error starting scan: {e}")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if self.is_scanning and hasattr(self.engine, 'stop_scan'):
                self.engine.stop_scan()
                self.is_scanning = False
                dpg.show_item("quick_scan_button")
                dpg.hide_item("quick_stop_button")
                dpg.show_item("adv_scan_button")
                dpg.hide_item("adv_stop_button")
                self.add_to_log("‚èπÔ∏è Scan stopped by user")
            else:
                self.add_to_log("‚ö†Ô∏è No active scan to stop")
        except Exception as e:
            self.logger.error(f"Error stopping scan: {e}")
            self.add_to_log(f"‚ùå Error stopping scan: {e}")
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            targets_text = dpg.get_value("target_input")
            if not targets_text:
                self.add_to_log("‚ùå Please enter targets first!")
                return False
                
            targets = [t.strip() for t in targets_text.split('\n') if t.strip()]
            
            self.add_to_log(f"üéØ Starting advanced scan for {len(targets)} targets")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–∏
            if hasattr(self.engine, 'set_targets'):
                self.engine.set_targets(targets)
            elif hasattr(self.engine, 'add_initial_target'):
                for target in targets:
                    self.engine.add_initial_target(target)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if hasattr(self.engine, 'start_scan'):
                if self.engine.start_scan():
                    self.is_scanning = True
                    dpg.hide_item("quick_scan_button")
                    dpg.show_item("quick_stop_button")
                    dpg.hide_item("adv_scan_button")
                    dpg.show_item("adv_stop_button")
                    self.add_to_log("‚úÖ Advanced scan started successfully!")
                    self._start_ui_updates()
                    return True
                else:
                    self.add_to_log("‚ùå Failed to start advanced scan!")
                    return False
            else:
                self.add_to_log("‚ö†Ô∏è Engine doesn't support start_scan method")
                return False
                
        except Exception as e:
            self.logger.error(f"Error in start_scan: {e}")
            self.add_to_log(f"‚ùå Error starting advanced scan: {e}")
            return False
    
    def resume_scan(self):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if hasattr(self.engine, 'resume_scan'):
                if self.engine.resume_scan():
                    self.is_scanning = True
                    dpg.hide_item("quick_scan_button")
                    dpg.show_item("quick_stop_button")
                    dpg.hide_item("adv_scan_button")
                    dpg.show_item("adv_stop_button")
                    self.add_to_log("üîç Scan resumed!")
                    self._start_ui_updates()
            else:
                self.add_to_log("‚ö†Ô∏è Engine doesn't support resume_scan method")
        except Exception as e:
            self.logger.error(f"Error resuming scan: {e}")
            self.add_to_log(f"‚ùå Error resuming scan: {e}")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            if hasattr(self.engine, 'clear_results'):
                self.engine.clear_results()
            self.graph.clear()
            dpg.set_value("activity_log", "")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            dpg.set_value("stat_nodes", "Nodes: 0")
            dpg.set_value("stat_services", "Services: 0")
            dpg.set_value("stat_targets", "Targets: 0")
            dpg.set_value("stat_vulns", "Vulnerabilities: 0")
            dpg.set_value("stat_exploits", "Exploits: 0")
            dpg.set_value("stat_lateral", "Lateral Moves: 0")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ü–µ–ª–µ–π
            dpg.configure_item("discovered_targets_list", items=[])
            dpg.configure_item("exploit_targets", items=[])
            
            self.add_to_log("üßπ All results cleared")
        except Exception as e:
            self.logger.error(f"Error clearing results: {e}")
            self.add_to_log(f"‚ùå Error clearing results: {e}")
    
    def update_graph(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.graph.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤–∏–∂–∫–∞
            if hasattr(self.engine, 'get_scan_results'):
                scan_data = self.engine.get_scan_results()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
                for node in scan_data.get('nodes', []):
                    node_id = self.graph.add_node(node)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
                    for edge in node.get('edges', []):
                        self.graph.add_edge(node_id, edge['target_id'], edge.get('type', 'normal'))
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            dpg.delete_item("graph_canvas", children_only=True)
            self.graph.draw_graph(1000, 600)
            
        except Exception as e:
            self.logger.error(f"Error updating graph: {e}")
    
    def clear_graph(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∞"""
        try:
            self.graph.clear()
            dpg.delete_item("graph_canvas", children_only=True)
            self.add_to_log("üó∫Ô∏è Graph cleared")
        except Exception as e:
            self.logger.error(f"Error clearing graph: {e}")
            self.add_to_log(f"‚ùå Error clearing graph: {e}")
    
    def export_graph(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"network_map_{timestamp}.json"
            
            export_data = {
                'nodes': list(self.graph.nodes.values()),
                'edges': self.graph.edges,
                'export_time': timestamp
            }
            
            with open(filename, 'w') as f:
                json.dump(export_data, f, indent=2)
            self.add_to_log(f"üíæ Graph exported to {filename}")
        except Exception as e:
            self.logger.error(f"Error exporting graph: {e}")
            self.add_to_log(f"‚ùå Export failed: {str(e)}")
    
    def focus_on_targets(self):
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤—ã—Ö —É–∑–ª–∞—Ö"""
        self.add_to_log("üéØ Focusing on target nodes...")
    
    def highlight_vulnerabilities(self):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.add_to_log("üî¥ Highlighting vulnerabilities...")
    
    def load_vulnerable_targets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π"""
        self.add_to_log("üéØ Loading vulnerable targets...")
    
    def start_exploitation(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üí• Starting exploitation...")
    
    def scan_for_exploits(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        self.add_to_log("üîç Scanning for exploits...")
    
    def start_lateral_movement(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏"""
        self.add_to_log("üîÑ Starting lateral movement...")
    
    def refresh_modules(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π"""
        self.add_to_log("üîÑ Refreshing modules...")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if not self.settings_window_open:
                dpg.show_item("settings_window")
                self.settings_window_open = True
                dpg.focus_item("settings_window")
            else:
                dpg.hide_item("settings_window")
                self.settings_window_open = False
        except Exception as e:
            self.logger.error(f"Error showing settings: {e}")
    
    def show_targets_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π"""
        try:
            dpg.show_item("targets_window")
        except Exception as e:
            self.logger.error(f"Error showing targets window: {e}")
    
    def add_selected_targets(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏"""
        self.add_to_log("üéØ Adding selected targets...")
    
    def clear_target_selection(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π"""
        self.add_to_log("üßπ Clearing target selection...")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.add_to_log("üíæ Settings saved")
    
    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.add_to_log("üîÑ Settings applied to current scan")
    
    def export_all_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.add_to_log("üì§ Exporting all data...")
    
    def clear_everything(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"""
        try:
            self.clear_results()
            self.clear_graph()
            self.add_to_log("üßπ Everything cleared")
        except Exception as e:
            self.logger.error(f"Error clearing everything: {e}")
            self.add_to_log(f"‚ùå Error clearing everything: {e}")
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            current_log = dpg.get_value("activity_log")
            timestamp = datetime.now().strftime("%H:%M:%S")
            new_message = f"[{timestamp}] {message}\n"
            
            if current_log:
                new_log = current_log + new_message
            else:
                new_log = new_message
                
            dpg.set_value("activity_log", new_log)
            # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            dpg.focus_item("activity_log")
        except Exception as e:
            self.logger.error(f"Error adding to log: {e}")
    
    def _start_ui_updates(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        def update_ui():
            current_time = time.time()
            if current_time - self.last_update_time >= self.update_interval:
                self.last_update_time = current_time
                
                if self.is_scanning:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats = self.engine.get_statistics() if hasattr(self.engine, 'get_statistics') else {}
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                        if 'nodes_discovered' in stats:
                            dpg.set_value("stat_nodes", f"Nodes: {stats['nodes_discovered']}")
                        if 'services_found' in stats:
                            dpg.set_value("stat_services", f"Services: {stats['services_found']}")
                        if 'active_targets' in stats:
                            dpg.set_value("stat_targets", f"Targets: {stats['active_targets']}")
                        if 'vulnerabilities_found' in stats:
                            dpg.set_value("stat_vulns", f"Vulnerabilities: {stats['vulnerabilities_found']}")
                        if 'exploits_successful' in stats:
                            dpg.set_value("stat_exploits", f"Exploits: {stats['exploits_successful']}")
                        if 'lateral_movements' in stats:
                            dpg.set_value("stat_lateral", f"Lateral Moves: {stats['lateral_movements']}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ
                        self.update_graph()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
                        self._update_targets_list()
                        
                    except Exception as e:
                        self.logger.error(f"Error in UI update: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        dpg.set_render_callback(update_ui)
    
    def _update_targets_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π"""
        try:
            targets = []
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏ –∏–∑ –¥–≤–∏–∂–∫–∞
            if hasattr(self.engine, 'discovered_nodes') and self.engine.discovered_nodes:
                for node_id, node in self.engine.discovered_nodes.items():
                    target_info = f"{node.get('data', 'Unknown')} - {node.get('type', 'unknown')}"
                    targets.append(target_info)
                    
            elif hasattr(self.engine, 'get_scan_results'):
                scan_data = self.engine.get_scan_results()
                for node in scan_data.get('nodes', []):
                    target_info = f"{node.get('data', 'Unknown')} - {node.get('type', 'unknown')}"
                    targets.append(target_info)
                    
            elif hasattr(self.engine, 'active_targets') and self.engine.active_targets:
                for target in self.engine.active_targets:
                    targets.append(f"{target} - active")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –æ–∫–Ω–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π
            dpg.configure_item("discovered_targets_list", items=targets)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            dpg.configure_item("exploit_targets", items=targets)
            
        except Exception as e:
            self.logger.error(f"Error updating targets list: {e}")
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info(f"GUI received engine event: {event_type}")
            
            if event_type == 'node_discovered':
                self.add_to_log(f"üîç Node discovered: {data}")
                self._update_targets_list()
                self.update_graph()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–∑–ª–æ–≤
                current_nodes = int(dpg.get_value("stat_nodes").split(": ")[1])
                dpg.set_value("stat_nodes", f"Nodes: {current_nodes + 1}")
                
            elif event_type == 'service_found':
                self.add_to_log(f"‚öôÔ∏è Service found: {data}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
                current_services = int(dpg.get_value("stat_services").split(": ")[1])
                dpg.set_value("stat_services", f"Services: {current_services + 1}")
                
            elif event_type == 'scan_completed':
                self.add_to_log("‚úÖ Scan completed")
                self.is_scanning = False
                dpg.show_item("quick_scan_button")
                dpg.hide_item("quick_stop_button")
                dpg.show_item("adv_scan_button")
                dpg.hide_item("adv_stop_button")
                
            elif event_type == 'vulnerability_found':
                self.add_to_log(f"üî¥ Vulnerability found: {data}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
                current_vulns = int(dpg.get_value("stat_vulns").split(": ")[1])
                dpg.set_value("stat_vulns", f"Vulnerabilities: {current_vulns + 1}")
                
            elif event_type == 'exploitation_success':
                self.add_to_log(f"üí• Exploitation successful: {data}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫
                current_exploits = int(dpg.get_value("stat_exploits").split(": ")[1])
                dpg.set_value("stat_exploits", f"Exploits: {current_exploits + 1}")
                
            elif event_type == 'lateral_movement':
                self.add_to_log(f"üîÑ Lateral movement: {data}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
                current_lateral = int(dpg.get_value("stat_lateral").split(": ")[1])
                dpg.set_value("stat_lateral", f"Lateral Moves: {current_lateral + 1}")
                
        except Exception as e:
            self.logger.error(f"Error handling engine event: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            dpg.setup_dearpygui()
            dpg.show_viewport()
            dpg.set_primary_window("main_window", True)
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª GUI
            while dpg.is_dearpygui_running():
                dpg.render_dearpygui_frame()
            
            self.destroy()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
            self.logger.error(traceback.format_exc())
            raise
    
    def destroy(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            dpg.destroy_context()
            self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è GUI: {e}")
