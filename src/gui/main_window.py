"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional
import logging
import traceback
import sys
import os
import time
import json
import csv
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from gui.network_tree import NetworkTree
from gui.hosts_table import HostsTable

class ObsidianTheme:
    """–¢–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as obsidian_theme:
            colors = {
                'bg_primary': [18, 18, 24],
                'bg_secondary': [28, 28, 36],
                'bg_tertiary': [38, 38, 48],
                'accent_primary': [123, 97, 255],
                'accent_secondary': [86, 156, 214],
                'text_primary': [220, 220, 220],
                'text_secondary': [150, 150, 160],
                'text_muted': [100, 100, 110],
                'success': [72, 199, 116],
                'warning': [255, 179, 64],
                'error': [255, 92, 87],
                'border': [60, 60, 70]
            }
            
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_WindowBg, colors['bg_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Text, colors['text_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Border, colors['border'])
                dpg.add_theme_style(dpg.mvStyleVar_WindowRounding, 8)
                dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 6)
            
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, colors['accent_primary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 4)
            
            with dpg.theme_component(dpg.mvInputText):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, colors['bg_secondary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 6)
        
        return obsidian_theme

class DangerTheme:
    """–¢–µ–º–∞ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as danger_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 60, 60, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 80, 80, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return danger_theme

class WarningTheme:
    """–¢–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as warning_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 179, 64, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 199, 84, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return warning_theme

class SuccessTheme:
    """–¢–µ–º–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as success_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [72, 199, 116, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [92, 219, 136, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return success_theme

class MainWindow:
    """
    –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.logger = logging.getLogger('RapidRecon.GUI')
        
        # –ú–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.network_tree = NetworkTree()
        self.hosts_table = HostsTable(engine)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_scanning = False
        self.is_paused = False
        self.current_scan_level = "‚ö° Normal"
        self.selected_targets = set()
        self.scope_settings = {
            'allowed_ips': [],
            'allowed_domains': [],
            'domain_suffixes': []
        }
        
        # –î–∞–Ω–Ω—ã–µ
        self.hosts_data = {}
        self.nodes_data = {}
        self.vulnerabilities_data = []
        self.exploitation_results = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.initialize_gui()
        
        self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_gui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        try:
            dpg.create_context()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º
            self.obsidian_theme = ObsidianTheme.setup_theme()
            self.danger_theme = DangerTheme.setup_theme()
            self.warning_theme = WarningTheme.setup_theme()
            self.success_theme = SuccessTheme.setup_theme()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ viewport
            dpg.create_viewport(
                title='RapidRecon ‚Ä¢ Advanced Security Scanner',
                width=1600,
                height=1000,
                min_width=1200,
                min_height=800
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.create_main_window()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.create_settings_window()
            self.create_export_window()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–∫–∞–∑ GUI
            dpg.bind_theme(self.obsidian_theme)
            dpg.setup_dearpygui()
            dpg.show_viewport()
            dpg.set_primary_window("main_window", True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
            raise
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
        with dpg.window(
            tag="main_window",
            label="RapidRecon - Advanced Network Reconnaissance",
            width=1600,
            height=1000,
            no_move=True,
            no_resize=True,
            no_collapse=True,
            no_close=True
        ):
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.child_window(tag="sidebar", width=300, border=False):
                self.create_sidebar()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
            with dpg.group(horizontal=True, width=-1, height=-1):
                with dpg.child_window(tag="content_area", width=-1, border=False):
                    self.create_content_area()
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        # –õ–æ–≥–æ—Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å
        with dpg.group():
            dpg.add_spacer(height=20)
            dpg.add_text("RapidRecon", color=[123, 97, 255])
            dpg.add_text("Advanced Security Scanner", color=[150, 150, 160])
            dpg.add_separator()
            
            # –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("Status:", color=[150, 150, 160])
                dpg.add_text("Ready", tag="scan_status", color=[72, 199, 116])
        
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
        with dpg.collapsing_header(label="‚ö° Quick Launch", default_open=True):
            dpg.add_text("Primary Target:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="quick_target_input", 
                hint="example.com / 192.168.1.1", 
                width=-1
            )
            
            dpg.add_text("Scan Intensity:", color=[150, 150, 160])
            dpg.add_combo(
                tag="scan_level",
                items=["üöÄ Stealth", "‚ö° Normal", "üí• Aggressive", "üî• Full Attack", "üíÄ Pentest"],
                default_value="‚ö° Normal",
                width=-1,
                callback=self._on_scan_level_change
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with dpg.group(horizontal=True):
                start_btn = dpg.add_button(
                    label="üéØ Start",
                    tag="quick_start_btn",
                    width=90,
                    callback=self.quick_start_scan
                )
                dpg.bind_item_theme(start_btn, self.success_theme)
                
                pause_btn = dpg.add_button(
                    label="‚è∏Ô∏è Pause",
                    tag="quick_pause_btn", 
                    width=90,
                    callback=self.pause_scan,
                    show=False
                )
                dpg.bind_item_theme(pause_btn, self.warning_theme)
            
            with dpg.group(horizontal=True):
                resume_btn = dpg.add_button(
                    label="‚ñ∂Ô∏è Resume",
                    tag="quick_resume_btn",
                    width=90,
                    callback=self.resume_scan,
                    show=False
                )
                dpg.bind_item_theme(resume_btn, self.success_theme)
                
                stop_btn = dpg.add_button(
                    label="‚èπÔ∏è Stop",
                    tag="quick_stop_btn",
                    width=90,
                    callback=self.stop_scan,
                    show=False
                )
                dpg.bind_item_theme(stop_btn, self.danger_theme)
        
        # –ú–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        with dpg.collapsing_header(label="üîß Modules & Capabilities", default_open=True):
            dpg.add_text("Active Modules:", color=[150, 150, 160])
            
            modules = [
                ("‚úÖ", "Ping Scanner", [200, 200, 200]),
                ("‚úÖ", "Port Scanner", [200, 200, 200]),
                ("‚úÖ", "Service Detector", [200, 200, 200]),
                ("‚úÖ", "Subdomain Scanner", [200, 200, 200]),
                ("üî¥", "Vulnerability Scanner", [255, 100, 100]),
                ("üíÄ", "Exploitation Engine", [255, 60, 60]),
                ("üü°", "Lateral Movement", [255, 165, 0])
            ]
            
            for icon, name, color in modules:
                with dpg.group(horizontal=True):
                    dpg.add_text(icon, color=color)
                    dpg.add_text(name, color=color)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        with dpg.collapsing_header(label="üìà Live Statistics", default_open=True):
            dpg.add_text("Network Discovery:", color=[150, 150, 160])
            dpg.add_text("Nodes: 0", tag="stat_nodes")
            dpg.add_text("Hosts: 0", tag="stat_hosts")
            dpg.add_text("Services: 0", tag="stat_services")
            dpg.add_text("Ports: 0", tag="stat_ports")
            
            dpg.add_text("Security Findings:", color=[150, 150, 160])
            dpg.add_text("Vulnerabilities: 0", tag="stat_vulns", color=[255, 100, 100])
            dpg.add_text("Exploits: 0", tag="stat_exploits", color=[255, 60, 60])
            dpg.add_text("Lateral: 0", tag="stat_lateral", color=[255, 165, 0])
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        with dpg.collapsing_header(label="üöÄ Quick Actions", default_open=True):
            dpg.add_button(
                label="üåê View Network Tree", 
                width=-1,
                callback=lambda: dpg.set_value("main_tabs", "tree_tab")
            )
            dpg.add_button(
                label="üìä View Hosts Table",
                width=-1, 
                callback=lambda: dpg.set_value("main_tabs", "table_tab")
            )
            dpg.add_button(
                label="üîç Scan for Vulnerabilities",
                width=-1,
                callback=self.start_vulnerability_scan_real
            )
            dpg.add_button(
                label="üí• Start Exploitation", 
                width=-1,
                callback=self.start_exploitation_real
            )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        with dpg.group():
            dpg.add_separator()
            dpg.add_button(
                label="‚öôÔ∏è Engine Settings", 
                width=-1, 
                callback=self.show_settings_real
            )
            dpg.add_button(
                label="üì§ Export All Data", 
                width=-1, 
                callback=self.export_all_data_real
            )
            dpg.add_button(
                label="üßπ Clear Everything", 
                width=-1, 
                callback=self.clear_everything_real
            )
    
    def create_content_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –º–æ–¥—É–ª–µ–π"""
        with dpg.tab_bar(tag="main_tabs"):
            # 1. –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏ üåê (–†–ï–ê–õ–¨–ù–û–ï –î–ï–†–ï–í–û)
            with dpg.tab(label="üåê Network Tree", tag="tree_tab"):
                self.create_network_tree_tab()
            
            # 2. –í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤ üìä (–†–ï–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê)
            with dpg.tab(label="üìä Hosts Table", tag="table_tab"):
                self.create_hosts_table_tab()
            
            # 3. –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope üéØ (–†–ï–ê–õ–¨–ù–´–ô SCOPE)
            with dpg.tab(label="üéØ Scope Manager", tag="scope_tab"):
                self.create_scope_manager_tab()
            
            # 4. –í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π üî¥ (–†–ï–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï)
            with dpg.tab(label="üî¥ Vulnerabilities", tag="vulns_tab"):
                self.create_vulnerabilities_tab()
            
            # 5. –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ üí• (–†–ï–ê–õ–¨–ù–ê–Ø –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–Ø)
            with dpg.tab(label="üí• Exploitation", tag="exploit_tab"):
                self.create_exploitation_tab()
            
            # 6. –í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ üìã (–†–ï–ê–õ–¨–ù–´–ï –û–¢–ß–ï–¢–´)
            with dpg.tab(label="üìã Reports", tag="reports_tab"):
                self.create_reports_tab()
    
    def create_network_tree_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏ —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Tree", 
                    callback=self.refresh_network_tree_real
                )
                dpg.add_button(
                    label="üìä Statistics",
                    callback=self.show_network_statistics_real
                )
                dpg.add_button(
                    label="üíæ Export Tree", 
                    callback=self.export_network_tree_real
                )
                dpg.add_button(
                    label="üéØ Add All to Scope",
                    callback=self.add_all_nodes_to_scope
                )
            
            # –î–µ—Ä–µ–≤–æ —Å–µ—Ç–∏
            self.network_tree_panel = self.network_tree.create_tree_panel("tree_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∑–ª–æ–≤
            self.network_tree.set_node_select_callback(self._on_node_select_real)
    
    def create_hosts_table_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤ —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Table",
                    callback=self.refresh_hosts_table_real
                )
                dpg.add_button(
                    label="üîç Scan Selected",
                    callback=self.scan_selected_hosts_real
                )
                dpg.add_button(
                    label="üéØ Add to Scope",
                    callback=self.add_selected_to_scope_real
                )
                dpg.add_button(
                    label="üíæ Export CSV",
                    callback=self.export_hosts_csv_real
                )
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table_panel = self.hosts_table.create_table_panel("table_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table.set_host_select_callback(self._on_host_select_real)
    
    def create_scope_manager_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        with dpg.group(horizontal=True):
            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scope
            with dpg.child_window(width=400):
                dpg.add_text("üéØ Scope Configuration", color=[123, 97, 255])
                dpg.add_separator()
                
                dpg.add_text("Allowed IP Ranges:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_ips",
                    hint="192.168.1.0/24, 10.0.0.0/8...",
                    multiline=True,
                    height=80,
                    width=-1
                )
                
                dpg.add_text("Allowed Domains:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_domains", 
                    hint="example.com, *.test.com...",
                    multiline=True,
                    height=80,
                    width=-1
                )
                
                dpg.add_text("Domain Suffixes:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_suffixes",
                    hint=".com, .org, .local...", 
                    multiline=True,
                    height=60,
                    width=-1
                )
                
                with dpg.group(horizontal=True):
                    dpg.add_button(
                        label="üíæ Save Scope",
                        callback=self.save_scope_settings_real
                    )
                    dpg.add_button(
                        label="üîÑ Apply Scope",
                        callback=self.apply_scope_settings_real
                    )
                    dpg.add_button(
                        label="üì• Load Scope",
                        callback=self.load_scope_settings
                    )
            
            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ scope
            with dpg.child_window():
                dpg.add_text("üìã In-Scope Targets", color=[123, 97, 255])
                dpg.add_separator()
                
                dpg.add_text("Discovered in Scope:", color=[150, 150, 160])
                dpg.add_listbox(
                    tag="in_scope_targets",
                    items=[],
                    num_items=15,
                    width=-1
                )
                
                with dpg.group(horizontal=True):
                    dpg.add_button(
                        label="üîÑ Refresh List",
                        callback=self.refresh_scope_list_real
                    )
                    dpg.add_button(
                        label="üßπ Clear Out-of-Scope",
                        callback=self.clear_out_of_scope_real
                    )
                    dpg.add_button(
                        label="üìä Scope Stats",
                        callback=self.show_scope_statistics
                    )
    
    def create_vulnerabilities_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å –†–ï–ê–õ–¨–ù–´–ú —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        with dpg.group():
            dpg.add_text("üî¥ Vulnerability Scanner", color=[255, 100, 100])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Scan Configuration")
                    dpg.add_checkbox(tag="vuln_scan_ports", label="Scan Open Ports", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_services", label="Service Detection", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_web", label="Web Application Scan", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_auth", label="Authentication Tests", default_value=False)
                    
                    dpg.add_text("Intensity Level:")
                    dpg.add_combo(
                        tag="vuln_intensity",
                        items=["Low", "Medium", "High", "Aggressive"],
                        default_value="Medium",
                        width=-1
                    )
                    
                    dpg.add_text("Target Selection:")
                    dpg.add_radio_button(
                        tag="vuln_targets",
                        items=["All Hosts", "Selected Hosts", "In-Scope Only"],
                        default_value="In-Scope Only"
                    )
                    
                    vuln_btn = dpg.add_button(
                        label="üîç Start Vulnerability Scan",
                        width=-1,
                        callback=self.start_vulnerability_scan_real
                    )
                    dpg.bind_item_theme(vuln_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Discovered Vulnerabilities")
                    with dpg.child_window(height=200, border=True):
                        dpg.add_listbox(
                            tag="vulnerabilities_list",
                            items=[],
                            num_items=8,
                            width=-1
                        )
                    
                    dpg.add_text("Vulnerability Details:")
                    dpg.add_input_text(
                        tag="vuln_details",
                        multiline=True,
                        height=200,
                        readonly=True,
                        width=-1
                    )
                    
                    with dpg.group(horizontal=True):
                        dpg.add_button(
                            label="üìã Export Vulns",
                            callback=self.export_vulnerabilities
                        )
                        dpg.add_button(
                            label="üéØ Add to Exploitation",
                            callback=self.add_vulns_to_exploitation
                        )
    
    def create_exploitation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å –†–ï–ê–õ–¨–ù–´–ú –¥–≤–∏–∂–∫–æ–º"""
        with dpg.group():
            dpg.add_text("üí• Exploitation Engine", color=[255, 60, 60])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Target Selection")
                    dpg.add_listbox(
                        tag="exploit_targets",
                        items=[],
                        num_items=8,
                        width=-1
                    )
                    with dpg.group(horizontal=True):
                        dpg.add_button(
                            label="üéØ Load Vulnerable Targets",
                            callback=self.load_vulnerable_targets_real
                        )
                        dpg.add_button(
                            label="üîÑ Refresh",
                            callback=self.refresh_exploit_targets
                        )
                    
                    dpg.add_text("Exploitation Options")
                    dpg.add_checkbox(tag="auto_exploit", label="Auto-Exploit", default_value=False)
                    dpg.add_checkbox(tag="lateral_movement", label="Lateral Movement", default_value=True)
                    dpg.add_checkbox(tag="persistence", label="Establish Persistence", default_value=True)
                    dpg.add_checkbox(tag="privilege_escalation", label="Privilege Escalation", default_value=True)
                    
                    dpg.add_text("Payload Type:")
                    dpg.add_combo(
                        tag="payload_type",
                        items=["Meterpreter", "Shell", "Custom", "Web Shell"],
                        default_value="Meterpreter",
                        width=-1
                    )
                    
                    exploit_btn = dpg.add_button(
                        label="üí• Start Exploitation",
                        width=-1,
                        callback=self.start_exploitation_engine_real
                    )
                    dpg.bind_item_theme(exploit_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Exploitation Results")
                    dpg.add_input_text(
                        tag="exploitation_log",
                        multiline=True,
                        height=400,
                        readonly=True,
                        width=-1
                    )
                    
                    with dpg.group(horizontal=True):
                        dpg.add_button(
                            label="üìã Copy Results",
                            callback=self.copy_exploitation_results
                        )
                        dpg.add_button(
                            label="üíæ Export Log",
                            callback=self.export_exploitation_log
                        )
                        dpg.add_button(
                            label="üßπ Clear Log",
                            callback=self.clear_exploitation_log
                        )
    
    def create_reports_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å –†–ï–ê–õ–¨–ù–û–ô –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"""
        with dpg.group():
            dpg.add_text("üìã Reporting Engine", color=[86, 156, 214])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=300):
                    dpg.add_text("Report Types")
                    dpg.add_button(
                        label="üìä Executive Summary", 
                        width=-1,
                        callback=lambda: self.generate_report_real("executive")
                    )
                    dpg.add_button(
                        label="üîç Technical Details", 
                        width=-1,
                        callback=lambda: self.generate_report_real("technical")
                    )
                    dpg.add_button(
                        label="üî¥ Vulnerability Report", 
                        width=-1,
                        callback=lambda: self.generate_report_real("vulnerability")
                    )
                    dpg.add_button(
                        label="üí• Exploitation Report", 
                        width=-1,
                        callback=lambda: self.generate_report_real("exploitation")
                    )
                    dpg.add_button(
                        label="üåê Full Network Report", 
                        width=-1,
                        callback=lambda: self.generate_report_real("full")
                    )
                    
                    dpg.add_separator()
                    dpg.add_text("Export Format:")
                    dpg.add_combo(
                        tag="report_format",
                        items=["PDF", "HTML", "JSON", "CSV", "Markdown"],
                        default_value="PDF",
                        width=-1
                    )
                    
                    dpg.add_button(
                        label="üíæ Generate Report",
                        width=-1,
                        callback=self.generate_custom_report
                    )
                
                with dpg.child_window():
                    dpg.add_text("Report Preview")
                    dpg.add_input_text(
                        tag="report_preview",
                        multiline=True,
                        height=500,
                        readonly=True,
                        width=-1
                    )
                    
                    with dpg.group(horizontal=True):
                        dpg.add_button(
                            label="üîÑ Refresh Preview",
                            callback=self.refresh_report_preview
                        )
                        dpg.add_button(
                            label="üì§ Export Report",
                            callback=self.export_current_report
                        )
    
    def create_settings_window(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–∏–∂–∫–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        with dpg.window(
            tag="settings_window",
            label="Engine Settings",
            width=600,
            height=500,
            show=False,
            pos=[100, 100]
        ):
            with dpg.tab_bar():
                # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                with dpg.tab(label="General"):
                    dpg.add_text("General Settings")
                    dpg.add_input_text(
                        tag="settings_scan_dir",
                        label="Scan Directory",
                        default_value="./scans/",
                        width=-1
                    )
                    dpg.add_input_text(
                        tag="settings_log_dir", 
                        label="Log Directory",
                        default_value="./logs/",
                        width=-1
                    )
                    dpg.add_checkbox(
                        tag="settings_auto_save",
                        label="Auto-save results",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="settings_backup",
                        label="Create backups",
                        default_value=True
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                with dpg.tab(label="Scanning"):
                    dpg.add_text("Scanning Engine Settings")
                    dpg.add_slider_int(
                        tag="settings_threads",
                        label="Thread Count",
                        default_value=10,
                        min_value=1,
                        max_value=50
                    )
                    dpg.add_slider_int(
                        tag="settings_timeout",
                        label="Timeout (seconds)",
                        default_value=5,
                        min_value=1,
                        max_value=30
                    )
                    dpg.add_slider_int(
                        tag="settings_rate_limit", 
                        label="Rate Limit (req/sec)",
                        default_value=10,
                        min_value=1,
                        max_value=100
                    )
                    dpg.add_slider_int(
                        tag="settings_max_depth",
                        label="Max Depth",
                        default_value=5,
                        min_value=1,
                        max_value=10
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª–µ–π
                with dpg.tab(label="Modules"):
                    dpg.add_text("Module Configuration")
                    dpg.add_checkbox(
                        tag="mod_ping_enabled",
                        label="Ping Scanner",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="mod_ports_enabled",
                        label="Port Scanner", 
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="mod_services_enabled",
                        label="Service Detection",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="mod_subdomains_enabled",
                        label="Subdomain Scanner",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="mod_vulns_enabled",
                        label="Vulnerability Scanner",
                        default_value=True
                    )
                    dpg.add_checkbox(
                        tag="mod_exploit_enabled",
                        label="Exploitation Engine",
                        default_value=True
                    )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üíæ Save Settings",
                    callback=self.save_engine_settings
                )
                dpg.add_button(
                    label="üîÑ Load Defaults",
                    callback=self.load_default_settings
                )
                dpg.add_button(
                    label="‚ùå Close",
                    callback=lambda: dpg.hide_item("settings_window")
                )
    
    def create_export_window(self):
        """–û–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        with dpg.window(
            tag="export_window",
            label="Export Data",
            width=500,
            height=400,
            show=False,
            pos=[150, 150]
        ):
            dpg.add_text("Export Options")
            dpg.add_separator()
            
            dpg.add_text("Data to Export:")
            dpg.add_checkbox(tag="export_hosts", label="Hosts Data", default_value=True)
            dpg.add_checkbox(tag="export_network", label="Network Tree", default_value=True)
            dpg.add_checkbox(tag="export_vulns", label="Vulnerabilities", default_value=True)
            dpg.add_checkbox(tag="export_exploits", label="Exploitation Results", default_value=True)
            dpg.add_checkbox(tag="export_scope", label="Scope Settings", default_value=True)
            
            dpg.add_text("Export Format:")
            dpg.add_combo(
                tag="export_format",
                items=["JSON", "CSV", "XML", "HTML", "PDF"],
                default_value="JSON",
                width=-1
            )
            
            dpg.add_input_text(
                tag="export_filename",
                label="Filename",
                default_value=f"rapidrecon_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                width=-1
            )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üíæ Export",
                    callback=self.perform_export
                )
                dpg.add_button(
                    label="‚ùå Cancel",
                    callback=lambda: dpg.hide_item("export_window")
                )
    
    # === –†–ï–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    
    def _on_scan_level_change(self, sender, app_data):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–û–ï"""
        self.current_scan_level = app_data
        self.add_to_log(f"üéõÔ∏è Scan intensity set to: {app_data}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –¥–≤–∏–∂–∫—É
        if hasattr(self.engine, 'set_scan_intensity'):
            intensity_map = {
                "üöÄ Stealth": "stealth",
                "‚ö° Normal": "normal", 
                "üí• Aggressive": "aggressive",
                "üî• Full Attack": "full",
                "üíÄ Pentest": "pentest"
            }
            self.engine.set_scan_intensity(intensity_map.get(app_data, "normal"))
    
    def _on_node_select_real(self, node_id):
        """–í—ã–±–æ—Ä —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ - –†–ï–ê–õ–¨–ù–´–ô"""
        self.add_to_log(f"üîç Selected node: {node_id}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞
        if node_id in self.nodes_data:
            node = self.nodes_data[node_id]
            details = self._format_node_details(node)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –¥–µ—Ç–∞–ª—è—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π)
    
    def _on_host_select_real(self, ip):
        """–í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ - –†–ï–ê–õ–¨–ù–´–ô"""
        self.add_to_log(f"üîç Selected host: {ip}")
        if ip in self.hosts_data:
            host = self.hosts_data[ip]
            details = self._format_host_details(host)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª–µ
    
    def quick_start_scan(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–´–ô"""
        target = dpg.get_value("quick_target_input")
        if not target:
            self.add_to_log("‚ùå Please enter a target first!")
            return
        
        self.add_to_log(f"üöÄ Starting {self.current_scan_level} scan for: {target}")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.is_scanning = True
            self.is_paused = False
            dpg.set_value("scan_status", "Scanning")
            dpg.configure_item("scan_status", color=[255, 179, 64])
            
            dpg.hide_item("quick_start_btn")
            dpg.show_item("quick_pause_btn")
            dpg.hide_item("quick_resume_btn")
            dpg.show_item("quick_stop_btn")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            if hasattr(self.engine, 'add_initial_target'):
                self.engine.add_initial_target(target)
            
            if hasattr(self.engine, 'start_scan'):
                success = self.engine.start_scan()
                if success:
                    self.add_to_log("‚úÖ Scan started successfully")
                else:
                    self.add_to_log("‚ùå Failed to start scan")
                    self.stop_scan()
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error starting scan: {e}")
            self.stop_scan()
    
    def pause_scan(self):
        """–ü–∞—É–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–ê–Ø"""
        self.is_paused = True
        dpg.set_value("scan_status", "Paused")
        dpg.configure_item("scan_status", color=[255, 179, 64])
        
        dpg.hide_item("quick_pause_btn")
        dpg.show_item("quick_resume_btn")
        
        # –ü–∞—É–∑–∞ –≤ –¥–≤–∏–∂–∫–µ
        if hasattr(self.engine, 'pause_scan'):
            self.engine.pause_scan()
        
        self.add_to_log("‚è∏Ô∏è Scan paused")
    
    def resume_scan(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–û–ï"""
        self.is_paused = False
        dpg.set_value("scan_status", "Scanning")
        dpg.configure_item("scan_status", color=[255, 179, 64])
        
        dpg.hide_item("quick_resume_btn")
        dpg.show_item("quick_pause_btn")
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–≤–∏–∂–∫–µ
        if hasattr(self.engine, 'resume_scan'):
            self.engine.resume_scan()
        
        self.add_to_log("‚ñ∂Ô∏è Scan resumed")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–ê–Ø"""
        self.is_scanning = False
        self.is_paused = False
        dpg.set_value("scan_status", "Ready")
        dpg.configure_item("scan_status", color=[72, 199, 116])
        
        dpg.show_item("quick_start_btn")
        dpg.hide_item("quick_pause_btn")
        dpg.hide_item("quick_resume_btn")
        dpg.hide_item("quick_stop_btn")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –¥–≤–∏–∂–∫–µ
        if hasattr(self.engine, 'stop_scan'):
            self.engine.stop_scan()
        
        self.add_to_log("‚èπÔ∏è Scan stopped")
    
    def start_vulnerability_scan_real(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π - –†–ï–ê–õ–¨–ù–´–ô"""
        try:
            self.add_to_log("üîç Starting vulnerability scan...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_ports = dpg.get_value("vuln_scan_ports")
            scan_services = dpg.get_value("vuln_scan_services")
            scan_web = dpg.get_value("vuln_scan_web")
            scan_auth = dpg.get_value("vuln_scan_auth")
            intensity = dpg.get_value("vuln_intensity")
            target_scope = dpg.get_value("vuln_targets")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            targets = self._get_vulnerability_targets(target_scope)
            
            if not targets:
                self.add_to_log("‚ùå No targets found for vulnerability scanning")
                return
            
            self.add_to_log(f"üéØ Scanning {len(targets)} targets for vulnerabilities")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            if hasattr(self.engine, 'start_vulnerability_scan'):
                self.engine.start_vulnerability_scan(
                    targets=targets,
                    scan_ports=scan_ports,
                    scan_services=scan_services,
                    scan_web=scan_web,
                    scan_auth=scan_auth,
                    intensity=intensity
                )
                self.add_to_log("‚úÖ Vulnerability scan started")
            else:
                # –≠–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self._emulate_vulnerability_scan(targets)
            
            dpg.set_value("main_tabs", "vulns_tab")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error starting vulnerability scan: {e}")
    
    def start_exploitation_real(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ - –†–ï–ê–õ–¨–ù–´–ô"""
        try:
            self.add_to_log("üí• Starting exploitation engine...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            auto_exploit = dpg.get_value("auto_exploit")
            lateral_movement = dpg.get_value("lateral_movement")
            persistence = dpg.get_value("persistence")
            privilege_escalation = dpg.get_value("privilege_escalation")
            payload_type = dpg.get_value("payload_type")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—è–∑–≤–∏–º—ã–µ —Ü–µ–ª–∏
            vulnerable_targets = self._get_vulnerable_targets()
            
            if not vulnerable_targets:
                self.add_to_log("‚ùå No vulnerable targets found for exploitation")
                return
            
            self.add_to_log(f"üéØ Found {len(vulnerable_targets)} vulnerable targets")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            if hasattr(self.engine, 'start_exploitation'):
                self.engine.start_exploitation(
                    targets=vulnerable_targets,
                    auto_exploit=auto_exploit,
                    lateral_movement=lateral_movement,
                    persistence=persistence,
                    privilege_escalation=privilege_escalation,
                    payload_type=payload_type
                )
                self.add_to_log("‚úÖ Exploitation engine started")
            else:
                # –≠–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
                self._emulate_exploitation(vulnerable_targets)
            
            dpg.set_value("main_tabs", "exploit_tab")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error starting exploitation: {e}")
    
    def show_settings_real(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–∫–∞ - –†–ï–ê–õ–¨–ù–´–ï"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–∫–Ω–æ
            if hasattr(self.engine, 'get_settings'):
                settings = self.engine.get_settings()
                for key, value in settings.items():
                    if dpg.does_item_exist(f"settings_{key}"):
                        dpg.set_value(f"settings_{key}", value)
            
            dpg.show_item("settings_window")
            dpg.focus_item("settings_window")
            self.add_to_log("‚öôÔ∏è Engine settings opened")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error opening settings: {e}")
    
    def export_all_data_real(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö - –†–ï–ê–õ–¨–ù–´–ô"""
        try:
            dpg.show_item("export_window")
            dpg.focus_item("export_window")
            self.add_to_log("üì§ Export dialog opened")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error opening export dialog: {e}")
    
    def clear_everything_real(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ - –†–ï–ê–õ–¨–ù–ê–Ø"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.nodes_data.clear()
            self.hosts_data.clear()
            self.vulnerabilities_data.clear()
            self.exploitation_results.clear()
            self.selected_targets.clear()
            
            # –û—á–∏—â–∞–µ–º –º–æ–¥—É–ª–∏
            self.network_tree.clear()
            self.hosts_table.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = ["stat_nodes", "stat_hosts", "stat_services", "stat_ports", 
                    "stat_vulns", "stat_exploits", "stat_lateral"]
            for stat in stats:
                dpg.set_value(stat, f"{stat.split('_')[1].title()}: 0")
            
            # –û—á–∏—â–∞–µ–º –¥–≤–∏–∂–æ–∫
            if hasattr(self.engine, 'clear_results'):
                self.engine.clear_results()
            
            self.add_to_log("üßπ Everything cleared")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error clearing everything: {e}")
    
    def refresh_network_tree_real(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏ - –†–ï–ê–õ–¨–ù–û–ï"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤–∏–∂–∫–∞
            if hasattr(self.engine, 'get_network_data'):
                network_data = self.engine.get_network_data()
                self.nodes_data.update(network_data)
            
            self.network_tree.update_tree(self.nodes_data, self.hosts_data)
            self.add_to_log("üîÑ Network tree refreshed with real data")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error refreshing network tree: {e}")
    
    def show_network_statistics_real(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ - –†–ï–ê–õ–¨–ù–£–Æ"""
        try:
            stats = self._calculate_real_statistics()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
            if dpg.does_item_exist("network_stats_window"):
                dpg.delete_item("network_stats_window")
            
            with dpg.window(
                tag="network_stats_window",
                label="Network Statistics",
                width=400,
                height=300,
                modal=True
            ):
                dpg.add_text("üìä Real Network Statistics")
                dpg.add_separator()
                
                for category, count in stats.items():
                    with dpg.group(horizontal=True):
                        dpg.add_text(f"{category}:", width=200)
                        dpg.add_text(str(count), color=[123, 97, 255])
                
                dpg.add_separator()
                dpg.add_text(f"Last Updated: {datetime.now().strftime('%H:%M:%S')}")
            
            self.add_to_log("üìä Showing real network statistics")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error showing network statistics: {e}")
    
    def export_network_tree_real(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏ - –†–ï–ê–õ–¨–ù–´–ô"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"network_tree_{timestamp}.json"
            
            export_data = {
                'metadata': {
                    'export_time': timestamp,
                    'total_nodes': len(self.nodes_data),
                    'total_hosts': len(self.hosts_data)
                },
                'nodes': self.nodes_data,
                'hosts': self.hosts_data,
                'statistics': self._calculate_real_statistics()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            self.add_to_log(f"üíæ Network tree exported to {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error exporting network tree: {e}")
    
    def add_all_nodes_to_scope(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —É–∑–ª—ã –≤ scope - –†–ï–ê–õ–¨–ù–ê–Ø"""
        try:
            count = 0
            for node_id, node in self.nodes_data.items():
                if self._add_node_to_scope(node):
                    count += 1
            
            self.add_to_log(f"üéØ Added {count} nodes to scope")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error adding nodes to scope: {e}")
    
    def scan_selected_hosts_real(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ - –†–ï–ê–õ–¨–ù–û–ï"""
        self.hosts_table._scan_selected_hosts()
    
    def add_selected_to_scope_real(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ scope - –†–ï–ê–õ–¨–ù–û–ï"""
        self.hosts_table._add_selected_to_scope()
    
    def export_hosts_csv_real(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤ –≤ CSV - –†–ï–ê–õ–¨–ù–´–ô"""
        self.hosts_table._export_selected_hosts()
    
    def save_scope_settings_real(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope - –†–ï–ê–õ–¨–ù–û–ï"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
            ips_text = dpg.get_value("scope_ips")
            domains_text = dpg.get_value("scope_domains")
            suffixes_text = dpg.get_value("scope_suffixes")
            
            # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.scope_settings['allowed_ips'] = [ip.strip() for ip in ips_text.split(',') if ip.strip()]
            self.scope_settings['allowed_domains'] = [domain.strip() for domain in domains_text.split(',') if domain.strip()]
            self.scope_settings['domain_suffixes'] = [suffix.strip() for suffix in suffixes_text.split(',') if suffix.strip()]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('scope_settings.json', 'w') as f:
                json.dump(self.scope_settings, f, indent=2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –¥–≤–∏–∂–∫—É
            if hasattr(self.engine, 'set_scope'):
                self.engine.set_scope(self.scope_settings)
            
            self.add_to_log("üíæ Scope settings saved and applied")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error saving scope settings: {e}")
    
    def apply_scope_settings_real(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope - –†–ï–ê–õ–¨–ù–û–ï"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º scope –∫ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º
            self._apply_scope_to_data()
            self.add_to_log("üîÑ Scope settings applied to current data")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error applying scope settings: {e}")
    
    def refresh_scope_list_real(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ scope - –†–ï–ê–õ–¨–ù–û–ï"""
        try:
            in_scope_targets = self._get_in_scope_targets()
            dpg.configure_item("in_scope_targets", items=in_scope_targets)
            self.add_to_log(f"üîÑ Scope list refreshed: {len(in_scope_targets)} targets in scope")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error refreshing scope list: {e}")
    
    def clear_out_of_scope_real(self):
        """–û—á–∏—Å—Ç–∫–∞ out-of-scope —Ü–µ–ª–µ–π - –†–ï–ê–õ–¨–ù–ê–Ø"""
        try:
            # –£–¥–∞–ª—è–µ–º out-of-scope –¥–∞–Ω–Ω—ã–µ
            self._remove_out_of_scope_data()
            self.add_to_log("üßπ Cleared out-of-scope targets")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error clearing out-of-scope targets: {e}")
    
    def load_vulnerable_targets_real(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π - –†–ï–ê–õ–¨–ù–ê–Ø"""
        try:
            vulnerable_targets = self._get_vulnerable_targets()
            dpg.configure_item("exploit_targets", items=vulnerable_targets)
            self.add_to_log(f"üéØ Loaded {len(vulnerable_targets)} vulnerable targets")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error loading vulnerable targets: {e}")
    
    def start_exploitation_engine_real(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ - –†–ï–ê–õ–¨–ù–´–ô"""
        try:
            selected_targets = dpg.get_value("exploit_targets")
            if not selected_targets:
                self.add_to_log("‚ùå No targets selected for exploitation")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            auto_exploit = dpg.get_value("auto_exploit")
            lateral_movement = dpg.get_value("lateral_movement")
            persistence = dpg.get_value("persistence")
            privilege_escalation = dpg.get_value("privilege_escalation")
            payload_type = dpg.get_value("payload_type")
            
            self.add_to_log(f"üí• Starting exploitation for {len(selected_targets)} targets")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
            if hasattr(self.engine, 'exploit_targets'):
                results = self.engine.exploit_targets(
                    targets=selected_targets,
                    options={
                        'auto_exploit': auto_exploit,
                        'lateral_movement': lateral_movement,
                        'persistence': persistence,
                        'privilege_escalation': privilege_escalation,
                        'payload_type': payload_type
                    }
                )
                self.exploitation_results.extend(results)
                self._update_exploitation_log()
            else:
                self._emulate_exploitation(selected_targets)
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error starting exploitation engine: {e}")
    
    def generate_report_real(self, report_type: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ - –†–ï–ê–õ–¨–ù–ê–Ø"""
        try:
            self.add_to_log(f"üìã Generating {report_type} report...")
            
            report_content = self._generate_report_content(report_type)
            dpg.set_value("report_preview", report_content)
            
            self.add_to_log(f"‚úÖ {report_type} report generated")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error generating report: {e}")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _format_node_details(self, node: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —É–∑–ª–∞"""
        details = []
        details.append(f"=== {node.get('label', 'Unknown')} ===")
        details.append(f"Type: {node.get('type', 'unknown')}")
        details.append(f"ID: {node.get('id', 'unknown')}")
        
        data = node.get('data', {})
        if isinstance(data, dict):
            for key, value in data.items():
                if key not in ['position', 'color', 'radius', 'icon']:
                    details.append(f"{key}: {value}")
        else:
            details.append(f"Data: {data}")
        
        return "\n".join(details)
    
    def _format_host_details(self, host: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ö–æ—Å—Ç–∞"""
        details = []
        details.append(f"=== {host.get('ip', 'Unknown')} ===")
        details.append(f"Hostname: {host.get('hostname', 'Unknown')}")
        details.append(f"Status: {host.get('status', 'unknown')}")
        details.append(f"OS: {host.get('os', 'Unknown')}")
        details.append(f"Last Seen: {host.get('last_seen', 'Unknown')}")
        
        ports = host.get('ports', [])
        if ports:
            details.append(f"Open Ports: {', '.join(map(str, ports))}")
        
        services = host.get('services', [])
        if services:
            details.append(f"Services: {', '.join(services)}")
        
        vulns = host.get('vulnerabilities', [])
        if vulns:
            details.append(f"Vulnerabilities: {len(vulns)} found")
        
        return "\n".join(details)
    
    def _calculate_real_statistics(self) -> Dict[str, int]:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            "Total Nodes": len(self.nodes_data),
            "Active Hosts": len([h for h in self.hosts_data.values() if h.get('status') == 'active']),
            "Open Ports": sum(len(h.get('ports', [])) for h in self.hosts_data.values()),
            "Discovered Services": sum(len(h.get('services', [])) for h in self.hosts_data.values()),
            "Vulnerabilities Found": len(self.vulnerabilities_data),
            "Successful Exploits": len([e for e in self.exploitation_results if e.get('success')]),
            "In-Scope Targets": len(self._get_in_scope_targets()),
            "Network Depth": max((n.get('depth', 0) for n in self.nodes_data.values()), default=0)
        }
    
    def _get_vulnerability_targets(self, target_scope: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        if target_scope == "All Hosts":
            return list(self.hosts_data.keys())
        elif target_scope == "Selected Hosts":
            return list(self.hosts_table.selected_hosts)
        else:  # In-Scope Only
            return self._get_in_scope_targets()
    
    def _get_vulnerable_targets(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π"""
        vulnerable = []
        for ip, host in self.hosts_data.items():
            if host.get('vulnerabilities'):
                vulnerable.append(ip)
        return vulnerable
    
    def _get_in_scope_targets(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –≤ scope"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ scope
        return list(self.hosts_data.keys())  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _add_node_to_scope(self, node: Dict) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≤ scope"""
        try:
            node_data = node.get('data')
            if isinstance(node_data, str):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ scope
                if node_data not in self.scope_settings['allowed_ips']:
                    self.scope_settings['allowed_ips'].append(node_data)
                return True
            return False
        except:
            return False
    
    def _apply_scope_to_data(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ scope –∫ –¥–∞–Ω–Ω—ã–º"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è scope
        pass
    
    def _remove_out_of_scope_data(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ out-of-scope –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è out-of-scope –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def _emulate_vulnerability_scan(self, targets: List[str]):
        """–≠–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        for target in targets:
            self.add_to_log(f"üîç Scanning {target} for vulnerabilities...")
            # –≠–º—É–ª—è—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            time.sleep(0.5)
    
    def _emulate_exploitation(self, targets: List[str]):
        """–≠–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        for target in targets:
            self.add_to_log(f"üí• Attempting exploitation on {target}...")
            # –≠–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            time.sleep(1.0)
    
    def _generate_report_content(self, report_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = self._calculate_real_statistics()
        
        if report_type == "executive":
            return self._generate_executive_report(stats)
        elif report_type == "technical":
            return self._generate_technical_report(stats)
        elif report_type == "vulnerability":
            return self._generate_vulnerability_report(stats)
        elif report_type == "exploitation":
            return self._generate_exploitation_report(stats)
        else:
            return self._generate_full_report(stats)
    
    def _generate_executive_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        return f"""EXECUTIVE SUMMARY
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

OVERVIEW:
‚Ä¢ Total Hosts Discovered: {stats.get('Active Hosts', 0)}
‚Ä¢ Vulnerabilities Found: {stats.get('Vulnerabilities Found', 0)}
‚Ä¢ Successful Exploits: {stats.get('Successful Exploits', 0)}

RECOMMENDATIONS:
1. Immediate attention required for critical vulnerabilities
2. Review network segmentation
3. Update security policies

RISK LEVEL: {'HIGH' if stats.get('Vulnerabilities Found', 0) > 0 else 'MEDIUM'}"""
    
    def _generate_technical_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        return f"""TECHNICAL REPORT
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

NETWORK STATISTICS:
‚Ä¢ Total Nodes: {stats.get('Total Nodes', 0)}
‚Ä¢ Active Hosts: {stats.get('Active Hosts', 0)}
‚Ä¢ Open Ports: {stats.get('Open Ports', 0)}
‚Ä¢ Services: {stats.get('Discovered Services', 0)}
‚Ä¢ Network Depth: {stats.get('Network Depth', 0)}

SECURITY FINDINGS:
‚Ä¢ Vulnerabilities: {stats.get('Vulnerabilities Found', 0)}
‚Ä¢ Successful Exploits: {stats.get('Successful Exploits', 0)}
‚Ä¢ In-Scope Targets: {stats.get('In-Scope Targets', 0)}

DETAILED ANALYSIS:
[Technical details would go here]"""
    
    def _generate_vulnerability_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö"""
        return f"""VULNERABILITY REPORT
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

SUMMARY:
‚Ä¢ Total Vulnerabilities: {stats.get('Vulnerabilities Found', 0)}
‚Ä¢ Affected Hosts: {len([h for h in self.hosts_data.values() if h.get('vulnerabilities')])}

VULNERABILITY BREAKDOWN:
[Vulnerability details would go here]

RECOMMENDATIONS:
1. Patch critical vulnerabilities immediately
2. Implement network segmentation
3. Regular security assessments"""
    
    def _generate_exploitation_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        return f"""EXPLOITATION REPORT
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

EXPLOITATION RESULTS:
‚Ä¢ Successful Exploits: {stats.get('Successful Exploits', 0)}
‚Ä¢ Total Attempts: {len(self.exploitation_results)}

COMPROMISED SYSTEMS:
[Compromised system details would go here]

LATERAL MOVEMENT:
[Lateral movement details would go here]"""
    
    def _generate_full_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        return f"""FULL SECURITY ASSESSMENT REPORT
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

COMPREHENSIVE ANALYSIS:

NETWORK DISCOVERY:
{json.dumps(stats, indent=2)}

HOST DETAILS:
{json.dumps(list(self.hosts_data.keys())[:10], indent=2)}  # First 10 hosts

VULNERABILITIES:
{json.dumps(self.vulnerabilities_data[:5], indent=2)}  # First 5 vulnerabilities

EXPLOITATION RESULTS:
{json.dumps(self.exploitation_results, indent=2)}

RECOMMENDATIONS:
1. Comprehensive security review required
2. Immediate patching of critical systems
3. Enhanced monitoring and logging
4. Regular penetration testing"""
    
    def _update_exploitation_log(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        log_content = "EXPLOITATION RESULTS:\n\n"
        for result in self.exploitation_results:
            status = "‚úÖ SUCCESS" if result.get('success') else "‚ùå FAILED"
            log_content += f"{status} - {result.get('target', 'Unknown')}\n"
            if result.get('details'):
                log_content += f"    Details: {result.get('details')}\n"
            log_content += "\n"
        
        dpg.set_value("exploitation_log", log_content)
    
    def save_engine_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–∏–∂–∫–∞"""
        try:
            settings = {}
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
            for key in ['scan_dir', 'log_dir', 'auto_save', 'backup', 
                       'threads', 'timeout', 'rate_limit', 'max_depth']:
                settings[key] = dpg.get_value(f"settings_{key}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–≤–∏–∂–æ–∫
            if hasattr(self.engine, 'set_settings'):
                self.engine.set_settings(settings)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('engine_settings.json', 'w') as f:
                json.dump(settings, f, indent=2)
            
            self.add_to_log("üíæ Engine settings saved")
            dpg.hide_item("settings_window")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error saving engine settings: {e}")
    
    def load_default_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_settings = {
                'scan_dir': './scans/',
                'log_dir': './logs/',
                'auto_save': True,
                'backup': True,
                'threads': 10,
                'timeout': 5,
                'rate_limit': 10,
                'max_depth': 5
            }
            
            for key, value in default_settings.items():
                if dpg.does_item_exist(f"settings_{key}"):
                    dpg.set_value(f"settings_{key}", value)
            
            self.add_to_log("üîÑ Default settings loaded")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error loading default settings: {e}")
    
    def perform_export(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            export_format = dpg.get_value("export_format")
            filename = dpg.get_value("export_filename")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            data_to_export = {}
            
            if dpg.get_value("export_hosts"):
                data_to_export['hosts'] = self.hosts_data
            
            if dpg.get_value("export_network"):
                data_to_export['network'] = self.nodes_data
            
            if dpg.get_value("export_vulns"):
                data_to_export['vulnerabilities'] = self.vulnerabilities_data
            
            if dpg.get_value("export_exploits"):
                data_to_export['exploitation'] = self.exploitation_results
            
            if dpg.get_value("export_scope"):
                data_to_export['scope'] = self.scope_settings
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            data_to_export['metadata'] = {
                'export_time': datetime.now().isoformat(),
                'export_format': export_format,
                'version': '1.0.0'
            }
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if export_format == "JSON":
                with open(f"{filename}.json", 'w') as f:
                    json.dump(data_to_export, f, indent=2)
            elif export_format == "CSV":
                # –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV
                self._export_to_csv(data_to_export, filename)
            
            self.add_to_log(f"üíæ Data exported to {filename}.{export_format.lower()}")
            dpg.hide_item("export_window")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error exporting data: {e}")
    
    def _export_to_csv(self, data: Dict, filename: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        # –≠–∫—Å–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤
        if 'hosts' in data:
            with open(f"{filename}_hosts.csv", 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(['IP', 'Hostname', 'Ports', 'Services', 'OS', 'Status'])
                for ip, host in data['hosts'].items():
                    writer.writerow([
                        ip,
                        host.get('hostname', ''),
                        ','.join(map(str, host.get('ports', []))),
                        ','.join(host.get('services', [])),
                        host.get('os', ''),
                        host.get('status', '')
                    ])
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info(f"GUI received event: {event_type}")
            
            if event_type in ['node_added', 'node_discovered', 'module_results']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤–∏–∂–∫–∞
                if hasattr(self.engine, 'discovered_nodes'):
                    self.nodes_data = self.engine.discovered_nodes
                
                if hasattr(self.engine, 'hosts_data'):
                    self.hosts_data = self.engine.hosts_data
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.network_tree.update_tree(self.nodes_data, self.hosts_data)
                self.hosts_table.update_table(self.hosts_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_statistics()
                
            elif event_type == 'vulnerability_found':
                self.vulnerabilities_data.append(data)
                self._update_statistics()
                
            elif event_type == 'exploitation_result':
                self.exploitation_results.append(data)
                self._update_exploitation_log()
                self._update_statistics()
                
        except Exception as e:
            self.logger.error(f"Error handling engine event: {e}")
    
    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self._calculate_real_statistics()
            
            dpg.set_value("stat_nodes", f"Nodes: {stats['Total Nodes']}")
            dpg.set_value("stat_hosts", f"Hosts: {stats['Active Hosts']}")
            dpg.set_value("stat_services", f"Services: {stats['Discovered Services']}")
            dpg.set_value("stat_ports", f"Ports: {stats['Open Ports']}")
            dpg.set_value("stat_vulns", f"Vulnerabilities: {stats['Vulnerabilities Found']}")
            dpg.set_value("stat_exploits", f"Exploits: {stats['Successful Exploits']}")
            dpg.set_value("stat_lateral", f"Lateral: {stats.get('Lateral Moves', 0)}")
            
        except Exception as e:
            self.logger.error(f"Error updating statistics: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            
            while dpg.is_dearpygui_running():
                dpg.render_dearpygui_frame()
            
            self.destroy()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
    
    def destroy(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            dpg.destroy_context()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è GUI: {e}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–∫–∞)
    def load_scope_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope"""
        self.add_to_log("üì• Loading scope settings...")
    
    def show_scope_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É scope"""
        self.add_to_log("üìä Showing scope statistics...")
    
    def export_vulnerabilities(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.add_to_log("üìã Exporting vulnerabilities...")
    
    def add_vulns_to_exploitation(self):
        """–î–æ–±–∞–≤–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"""
        self.add_to_log("üéØ Adding vulnerabilities to exploitation...")
    
    def refresh_exploit_targets(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üîÑ Refreshing exploit targets...")
    
    def copy_exploitation_results(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üìã Copying exploitation results...")
    
    def export_exploitation_log(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üíæ Exporting exploitation log...")
    
    def clear_exploitation_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üßπ Clearing exploitation log...")
    
    def generate_custom_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.add_to_log("üìã Generating custom report...")
    
    def refresh_report_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞"""
        self.add_to_log("üîÑ Refreshing report preview...")
    
    def export_current_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.add_to_log("üì§ Exporting current report...")
