"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon - –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional
import logging
import traceback
import sys
import os
import time
import json
import csv
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from gui.network_tree import NetworkTree
from gui.hosts_table import HostsTable
from gui.scope_manager import ScopeManager
from gui.controls_panel import ControlsPanel

class ObsidianTheme:
    """–¢–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as obsidian_theme:
            colors = {
                'bg_primary': [18, 18, 24],
                'bg_secondary': [28, 28, 36],
                'bg_tertiary': [38, 38, 48],
                'accent_primary': [123, 97, 255],
                'accent_secondary': [86, 156, 214],
                'text_primary': [220, 220, 220],
                'text_secondary': [150, 150, 160],
                'text_muted': [100, 100, 110],
                'success': [72, 199, 116],
                'warning': [255, 179, 64],
                'error': [255, 92, 87],
                'border': [60, 60, 70]
            }
            
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_WindowBg, colors['bg_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Text, colors['text_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Border, colors['border'])
                dpg.add_theme_style(dpg.mvStyleVar_WindowRounding, 8)
                dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 6)
            
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, colors['accent_primary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 4)
            
            with dpg.theme_component(dpg.mvInputText):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, colors['bg_secondary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 6)
        
        return obsidian_theme

class DangerTheme:
    """–¢–µ–º–∞ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as danger_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 60, 60, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 80, 80, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return danger_theme

class WarningTheme:
    """–¢–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as warning_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 179, 64, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 199, 84, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return warning_theme

class SuccessTheme:
    """–¢–µ–º–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as success_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [72, 199, 116, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [92, 219, 136, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return success_theme

class MainWindow:
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.logger = logging.getLogger('RapidRecon.GUI')
        
        # –ú–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.network_tree = NetworkTree()
        self.hosts_table = HostsTable(engine)
        self.scope_manager = ScopeManager()
        self.controls_panel = ControlsPanel(engine)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_scanning = False
        self.is_paused = False
        self.current_scan_level = "‚ö° Normal"
        
        # –î–∞–Ω–Ω—ã–µ
        self.hosts_data = {}
        self.nodes_data = {}
        self.vulnerabilities_data = []
        self.exploitation_results = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.initialize_gui()
        
        self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_gui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥—ã
            if not self.check_gui_environment():
                raise RuntimeError("Graphical environment not available")
                
            dpg.create_context()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º
            self.obsidian_theme = ObsidianTheme.setup_theme()
            self.danger_theme = DangerTheme.setup_theme()
            self.warning_theme = WarningTheme.setup_theme()
            self.success_theme = SuccessTheme.setup_theme()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ viewport
            dpg.create_viewport(
                title='RapidRecon ‚Ä¢ Advanced Security Scanner',
                width=1600,
                height=1000,
                min_width=1200,
                min_height=800
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.create_main_window()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.create_settings_window()
            self.create_export_window()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–∫–∞–∑ GUI
            dpg.bind_theme(self.obsidian_theme)
            dpg.setup_dearpygui()
            dpg.show_viewport()
            dpg.set_primary_window("main_window", True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
            self.logger.error(traceback.format_exc())
            raise
    
    def check_gui_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥—ã"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
            import dearpygui.dearpygui as dpg
            dpg.create_context()
            dpg.destroy_context()
            return True
        except Exception:
            return False
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
        with dpg.window(
            tag="main_window",
            label="RapidRecon - Advanced Network Reconnaissance",
            width=1600,
            height=1000,
            no_move=True,
            no_resize=True,
            no_collapse=True,
            no_close=True
        ):
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.child_window(tag="sidebar", width=300, border=False):
                self.create_sidebar()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
            with dpg.group(horizontal=True, width=-1, height=-1):
                with dpg.child_window(tag="content_area", width=-1, border=False):
                    self.create_content_area()
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –õ–æ–≥–æ—Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å
        with dpg.group():
            dpg.add_spacer(height=20)
            dpg.add_text("RapidRecon", color=[123, 97, 255])
            dpg.add_text("Advanced Security Scanner", color=[150, 150, 160])
            dpg.add_separator()
            
            # –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("Status:", color=[150, 150, 160])
                dpg.add_text("Ready", tag="scan_status", color=[72, 199, 116])
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (ControlsPanel)
        self.controls_panel.create_controls_panel("sidebar")
        
        # –ú–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        with dpg.collapsing_header(label="üîß Modules & Capabilities", default_open=True):
            dpg.add_text("Active Modules:", color=[150, 150, 160])
            
            modules = [
                ("‚úÖ", "Ping Scanner", [200, 200, 200]),
                ("‚úÖ", "Port Scanner", [200, 200, 200]),
                ("‚úÖ", "Service Detector", [200, 200, 200]),
                ("‚úÖ", "Subdomain Scanner", [200, 200, 200]),
                ("üî¥", "Vulnerability Scanner", [255, 100, 100]),
                ("üíÄ", "Exploitation Engine", [255, 60, 60]),
                ("üü°", "Lateral Movement", [255, 165, 0])
            ]
            
            for icon, name, color in modules:
                with dpg.group(horizontal=True):
                    dpg.add_text(icon, color=color)
                    dpg.add_text(name, color=color)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        with dpg.collapsing_header(label="üìà Live Statistics", default_open=True):
            dpg.add_text("Network Discovery:", color=[150, 150, 160])
            dpg.add_text("Nodes: 0", tag="stat_nodes")
            dpg.add_text("Hosts: 0", tag="stat_hosts")
            dpg.add_text("Services: 0", tag="stat_services")
            dpg.add_text("Ports: 0", tag="stat_ports")
            
            dpg.add_text("Security Findings:", color=[150, 150, 160])
            dpg.add_text("Vulnerabilities: 0", tag="stat_vulns", color=[255, 100, 100])
            dpg.add_text("Exploits: 0", tag="stat_exploits", color=[255, 60, 60])
            dpg.add_text("Lateral: 0", tag="stat_lateral", color=[255, 165, 0])
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        with dpg.collapsing_header(label="üöÄ Quick Actions", default_open=True):
            dpg.add_button(
                label="üåê View Network Tree", 
                width=-1,
                callback=lambda: dpg.set_value("main_tabs", "tree_tab")
            )
            dpg.add_button(
                label="üìä View Hosts Table",
                width=-1, 
                callback=lambda: dpg.set_value("main_tabs", "table_tab")
            )
            dpg.add_button(
                label="üéØ Scope Manager",
                width=-1,
                callback=lambda: dpg.set_value("main_tabs", "scope_tab")
            )
            dpg.add_button(
                label="üîç Vulnerability Scan", 
                width=-1,
                callback=self.start_vulnerability_scan
            )
            dpg.add_button(
                label="üí• Exploitation", 
                width=-1,
                callback=self.start_exploitation
            )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        with dpg.group():
            dpg.add_separator()
            dpg.add_button(
                label="‚öôÔ∏è Engine Settings", 
                width=-1, 
                callback=self.show_settings
            )
            dpg.add_button(
                label="üì§ Export All Data", 
                width=-1, 
                callback=self.export_all_data
            )
            dpg.add_button(
                label="üßπ Clear Everything", 
                width=-1, 
                callback=self.clear_everything
            )
    
    def create_content_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –º–æ–¥—É–ª–µ–π"""
        with dpg.tab_bar(tag="main_tabs"):
            # 1. –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏ üåê
            with dpg.tab(label="üåê Network Tree", tag="tree_tab"):
                self.create_network_tree_tab()
            
            # 2. –í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤ üìä
            with dpg.tab(label="üìä Hosts Table", tag="table_tab"):
                self.create_hosts_table_tab()
            
            # 3. –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope üéØ
            with dpg.tab(label="üéØ Scope Manager", tag="scope_tab"):
                self.create_scope_manager_tab()
            
            # 4. –í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π üî¥
            with dpg.tab(label="üî¥ Vulnerabilities", tag="vulns_tab"):
                self.create_vulnerabilities_tab()
            
            # 5. –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ üí•
            with dpg.tab(label="üí• Exploitation", tag="exploit_tab"):
                self.create_exploitation_tab()
            
            # 6. –í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ üìã
            with dpg.tab(label="üìã Reports", tag="reports_tab"):
                self.create_reports_tab()
    
    def create_network_tree_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Tree", 
                    callback=self.refresh_network_tree
                )
                dpg.add_button(
                    label="üìä Statistics",
                    callback=self.show_network_statistics
                )
                dpg.add_button(
                    label="üíæ Export Tree", 
                    callback=self.export_network_tree
                )
                dpg.add_button(
                    label="üéØ Add All to Scope",
                    callback=self.add_all_nodes_to_scope
                )
            
            # –î–µ—Ä–µ–≤–æ —Å–µ—Ç–∏
            self.network_tree.create_tree_panel("tree_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∑–ª–æ–≤
            self.network_tree.set_node_select_callback(self.on_node_select)
    
    def create_hosts_table_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Table",
                    callback=self.refresh_hosts_table
                )
                dpg.add_button(
                    label="üîç Scan Selected",
                    callback=self.scan_selected_hosts
                )
                dpg.add_button(
                    label="üéØ Add to Scope",
                    callback=self.add_selected_to_scope
                )
                dpg.add_button(
                    label="üíæ Export CSV",
                    callback=self.export_hosts_csv
                )
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table.create_table_panel("table_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table.set_host_select_callback(self.on_host_select)
    
    def create_scope_manager_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ScopeManager –º–æ–¥—É–ª—å
        self.scope_manager.create_scope_panel("scope_tab")
    
    def create_vulnerabilities_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        with dpg.group():
            dpg.add_text("üî¥ Vulnerability Scanner", color=[255, 100, 100])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Scan Configuration")
                    dpg.add_checkbox(tag="vuln_scan_ports", label="Scan Open Ports", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_services", label="Service Detection", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_web", label="Web Application Scan", default_value=True)
                    
                    dpg.add_text("Intensity Level:")
                    dpg.add_combo(
                        tag="vuln_intensity",
                        items=["Low", "Medium", "High", "Aggressive"],
                        default_value="Medium",
                        width=-1
                    )
                    
                    vuln_btn = dpg.add_button(
                        label="üîç Start Vulnerability Scan",
                        width=-1,
                        callback=self.start_vulnerability_scan
                    )
                    dpg.bind_item_theme(vuln_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Discovered Vulnerabilities")
                    dpg.add_listbox(
                        tag="vulnerabilities_list",
                        items=[],
                        num_items=12,
                        width=-1
                    )
                    
                    dpg.add_text("Vulnerability Details:")
                    dpg.add_input_text(
                        tag="vuln_details",
                        multiline=True,
                        height=200,
                        readonly=True,
                        width=-1
                    )
    
    def create_exploitation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        with dpg.group():
            dpg.add_text("üí• Exploitation Engine", color=[255, 60, 60])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Target Selection")
                    dpg.add_listbox(
                        tag="exploit_targets",
                        items=[],
                        num_items=8,
                        width=-1
                    )
                    dpg.add_button(
                        label="üéØ Load Vulnerable Targets",
                        callback=self.load_vulnerable_targets
                    )
                    
                    dpg.add_text("Exploitation Options")
                    dpg.add_checkbox(tag="auto_exploit", label="Auto-Exploit", default_value=False)
                    dpg.add_checkbox(tag="lateral_movement", label="Lateral Movement", default_value=True)
                    
                    exploit_btn = dpg.add_button(
                        label="üí• Start Exploitation",
                        width=-1,
                        callback=self.start_exploitation
                    )
                    dpg.bind_item_theme(exploit_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Exploitation Results")
                    dpg.add_input_text(
                        tag="exploitation_log",
                        multiline=True,
                        height=400,
                        readonly=True,
                        width=-1
                    )
    
    def create_reports_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        with dpg.group():
            dpg.add_text("üìã Reporting Engine", color=[86, 156, 214])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=300):
                    dpg.add_text("Report Types")
                    dpg.add_button(label="üìä Executive Summary", width=-1)
                    dpg.add_button(label="üîç Technical Details", width=-1)
                    dpg.add_button(label="üî¥ Vulnerability Report", width=-1)
                    dpg.add_button(label="üí• Exploitation Report", width=-1)
                    dpg.add_button(label="üåê Full Network Report", width=-1)
                    
                    dpg.add_separator()
                    dpg.add_text("Export Format:")
                    dpg.add_combo(
                        items=["PDF", "HTML", "JSON", "CSV", "Markdown"],
                        default_value="PDF",
                        width=-1
                    )
                    
                    dpg.add_button(
                        label="üíæ Generate Report",
                        width=-1,
                        callback=self.generate_report
                    )
                
                with dpg.child_window():
                    dpg.add_text("Report Preview")
                    dpg.add_input_text(
                        tag="report_preview",
                        multiline=True,
                        height=500,
                        readonly=True,
                        width=-1
                    )
    
    def create_settings_window(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–∏–∂–∫–∞"""
        with dpg.window(
            tag="settings_window",
            label="Engine Settings",
            width=600,
            height=500,
            show=False,
            pos=[100, 100]
        ):
            with dpg.tab_bar():
                with dpg.tab(label="General"):
                    dpg.add_text("General Settings")
                    dpg.add_input_text(
                        tag="settings_scan_dir",
                        label="Scan Directory",
                        default_value="./scans/",
                        width=-1
                    )
                    dpg.add_checkbox(
                        tag="settings_auto_save",
                        label="Auto-save results",
                        default_value=True
                    )
                
                with dpg.tab(label="Scanning"):
                    dpg.add_text("Scanning Engine Settings")
                    dpg.add_slider_int(
                        tag="settings_threads",
                        label="Thread Count",
                        default_value=10,
                        min_value=1,
                        max_value=50
                    )
                    dpg.add_slider_int(
                        tag="settings_timeout",
                        label="Timeout (seconds)",
                        default_value=5,
                        min_value=1,
                        max_value=30
                    )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üíæ Save Settings",
                    callback=self.save_engine_settings
                )
                dpg.add_button(
                    label="‚ùå Close",
                    callback=lambda: dpg.hide_item("settings_window")
                )
    
    def create_export_window(self):
        """–û–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        with dpg.window(
            tag="export_window",
            label="Export Data",
            width=500,
            height=400,
            show=False,
            pos=[150, 150]
        ):
            dpg.add_text("Export Options")
            dpg.add_separator()
            
            dpg.add_text("Data to Export:")
            dpg.add_checkbox(tag="export_hosts", label="Hosts Data", default_value=True)
            dpg.add_checkbox(tag="export_network", label="Network Tree", default_value=True)
            dpg.add_checkbox(tag="export_vulns", label="Vulnerabilities", default_value=True)
            
            dpg.add_text("Export Format:")
            dpg.add_combo(
                tag="export_format",
                items=["JSON", "CSV", "XML"],
                default_value="JSON",
                width=-1
            )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üíæ Export",
                    callback=self.perform_export
                )
                dpg.add_button(
                    label="‚ùå Cancel",
                    callback=lambda: dpg.hide_item("export_window")
                )
    
    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def on_scan_level_change(self, sender, app_data):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.current_scan_level = app_data
        self.add_to_log(f"üéõÔ∏è Scan intensity set to: {app_data}")
    
    def on_node_select(self, node_id):
        """–í—ã–±–æ—Ä —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        self.add_to_log(f"üîç Selected node: {node_id}")
    
    def on_host_select(self, ip):
        """–í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.add_to_log(f"üîç Selected host: {ip}")
    
    def quick_start_scan(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        target = dpg.get_value("quick_target_input")
        if not target:
            self.add_to_log("‚ùå Please enter a target first!")
            return
        
        self.add_to_log(f"üöÄ Starting {self.current_scan_level} scan for: {target}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ControlsPanel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.controls_panel.start_scan(target, self.current_scan_level)
        self.update_scan_state()
    
    def pause_scan(self):
        """–ü–∞—É–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.controls_panel.pause_scan()
        self.update_scan_state()
    
    def resume_scan(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.controls_panel.resume_scan()
        self.update_scan_state()
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.controls_panel.stop_scan()
        self.update_scan_state()
    
    def update_scan_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI"""
        state = self.controls_panel.get_scan_state()
        self.is_scanning = state['is_scanning']
        self.is_paused = state['is_paused']
        
        dpg.set_value("scan_status", state['status'])
        dpg.configure_item("scan_status", color=state['color'])
    
    def start_vulnerability_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.add_to_log("üîç Starting vulnerability scan...")
        dpg.set_value("main_tabs", "vulns_tab")
    
    def start_exploitation(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üí• Starting exploitation...")
        dpg.set_value("main_tabs", "exploit_tab")
    
    def refresh_network_tree(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        self.network_tree.update_tree(self.nodes_data, self.hosts_data)
        self.add_to_log("üîÑ Network tree refreshed")
    
    def refresh_hosts_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤"""
        self.hosts_table.update_table(self.hosts_data)
        self.add_to_log("üîÑ Hosts table refreshed")
    
    def show_network_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏"""
        stats = self.calculate_statistics()
        
        if dpg.does_item_exist("network_stats_window"):
            dpg.delete_item("network_stats_window")
        
        with dpg.window(
            tag="network_stats_window",
            label="Network Statistics",
            width=400,
            height=300,
            modal=True
        ):
            dpg.add_text("üìä Network Statistics")
            dpg.add_separator()
            
            for category, count in stats.items():
                with dpg.group(horizontal=True):
                    dpg.add_text(f"{category}:", width=200)
                    dpg.add_text(str(count), color=[123, 97, 255])
        
        self.add_to_log("üìä Showing network statistics")
    
    def export_network_tree(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"network_tree_{timestamp}.json"
        
        export_data = {
            'nodes': self.nodes_data,
            'hosts': self.hosts_data,
            'export_time': timestamp
        }
        
        try:
            with open(filename, 'w') as f:
                json.dump(export_data, f, indent=2)
            self.add_to_log(f"üíæ Network tree exported to {filename}")
        except Exception as e:
            self.add_to_log(f"‚ùå Export failed: {e}")
    
    def add_all_nodes_to_scope(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —É–∑–ª—ã –≤ scope"""
        count = 0
        for node_id, node in self.nodes_data.items():
            if self.scope_manager.add_to_scope(node):
                count += 1
        
        self.add_to_log(f"üéØ Added {count} nodes to scope")
    
    def scan_selected_hosts(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤"""
        self.hosts_table.scan_selected_hosts()
    
    def add_selected_to_scope(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ scope"""
        self.hosts_table.add_selected_to_scope()
    
    def export_hosts_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤ –≤ CSV"""
        self.hosts_table.export_hosts_csv()
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        dpg.show_item("settings_window")
        self.add_to_log("‚öôÔ∏è Engine settings opened")
    
    def export_all_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dpg.show_item("export_window")
        self.add_to_log("üì§ Export dialog opened")
    
    def clear_everything(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"""
        self.nodes_data.clear()
        self.hosts_data.clear()
        self.vulnerabilities_data.clear()
        self.exploitation_results.clear()
        
        self.network_tree.clear()
        self.hosts_table.clear()
        self.scope_manager.clear()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = ["stat_nodes", "stat_hosts", "stat_services", "stat_ports", 
                "stat_vulns", "stat_exploits", "stat_lateral"]
        for stat in stats:
            dpg.set_value(stat, f"{stat.split('_')[1].title()}: 0")
        
        self.add_to_log("üßπ Everything cleared")
    
    def load_vulnerable_targets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π"""
        vulnerable_targets = []
        for ip, host in self.hosts_data.items():
            if host.get('vulnerabilities'):
                vulnerable_targets.append(ip)
        
        dpg.configure_item("exploit_targets", items=vulnerable_targets)
        self.add_to_log(f"üéØ Loaded {len(vulnerable_targets)} vulnerable targets")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.add_to_log("üìã Generating report...")
    
    def save_engine_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–∏–∂–∫–∞"""
        self.add_to_log("üíæ Engine settings saved")
        dpg.hide_item("settings_window")
    
    def perform_export(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        export_format = dpg.get_value("export_format")
        self.add_to_log(f"üíæ Exporting data in {export_format} format")
        dpg.hide_item("export_window")
    
    def calculate_statistics(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            "Total Nodes": len(self.nodes_data),
            "Active Hosts": len([h for h in self.hosts_data.values() if h.get('status') == 'active']),
            "Open Ports": sum(len(h.get('ports', [])) for h in self.hosts_data.values()),
            "Services": sum(len(h.get('services', [])) for h in self.hosts_data.values()),
            "Vulnerabilities": len(self.vulnerabilities_data),
            "Exploits": len([e for e in self.exploitation_results if e.get('success')])
        }
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info(f"GUI received event: {event_type}")
            
            if event_type in ['node_added', 'node_discovered', 'module_results']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤–∏–∂–∫–∞
                if hasattr(self.engine, 'discovered_nodes'):
                    self.nodes_data = self.engine.discovered_nodes
                
                if hasattr(self.engine, 'hosts_data'):
                    self.hosts_data = self.engine.hosts_data
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.network_tree.update_tree(self.nodes_data, self.hosts_data)
                self.hosts_table.update_table(self.hosts_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.update_statistics()
                
        except Exception as e:
            self.logger.error(f"Error handling engine event: {e}")
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.calculate_statistics()
            
            dpg.set_value("stat_nodes", f"Nodes: {stats['Total Nodes']}")
            dpg.set_value("stat_hosts", f"Hosts: {stats['Active Hosts']}")
            dpg.set_value("stat_services", f"Services: {stats['Services']}")
            dpg.set_value("stat_ports", f"Ports: {stats['Open Ports']}")
            dpg.set_value("stat_vulns", f"Vulnerabilities: {stats['Vulnerabilities']}")
            dpg.set_value("stat_exploits", f"Exploits: {stats['Exploits']}")
            
        except Exception as e:
            self.logger.error(f"Error updating statistics: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            
            while dpg.is_dearpygui_running():
                dpg.render_dearpygui_frame()
            
            self.destroy()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
    
    def destroy(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            dpg.destroy_context()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è GUI: {e}")
