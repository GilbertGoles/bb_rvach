"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon –Ω–∞ Dear PyGui
"""
import dearpygui.dearpygui as dpg
from typing import Callable, Dict, Any, List
import asyncio
import threading
import time
import json
from datetime import datetime

class MainWindow:
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.is_scanning = False
        self.scan_stats = {}
        self.real_time_data = []
        self.setup_gui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        self.setup_theme()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.setup_callbacks()
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        dpg.create_context()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        with dpg.viewport_menu_bar():
            with dpg.menu(label="–§–∞–π–ª"):
                dpg.add_menu_item(label="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback=self.export_results)
                dpg.add_menu_item(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback=self.show_settings)
                dpg.add_separator()
                dpg.add_menu_item(label="–í—ã—Ö–æ–¥", callback=self.exit_app)
            
            with dpg.menu(label="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                dpg.add_menu_item(label="–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.quick_scan)
                dpg.add_menu_item(label="–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.deep_scan)
                dpg.add_menu_item(label="–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.custom_scan)
            
            with dpg.menu(label="–ú–æ–¥—É–ª–∏"):
                dpg.add_menu_item(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏", callback=self.show_module_manager)
                dpg.add_menu_item(label="–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏", callback=self.refresh_modules)
            
            with dpg.menu(label="–°–ø—Ä–∞–≤–∫–∞"):
                dpg.add_menu_item(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback=self.show_about)
        
        with dpg.window(tag="Primary Window", label="RapidRecon - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ–¥–∫–∏"):
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_input_text(
                    tag="target_input", 
                    hint="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω, IP –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω",
                    width=300
                )
                dpg.add_button(
                    label="‚ñ∂Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", 
                    callback=self.start_scan,
                    tag="scan_button"
                )
                dpg.add_button(
                    label="‚èπÔ∏è –°—Ç–æ–ø", 
                    callback=self.stop_scan,
                    tag="stop_button"
                )
                dpg.add_button(
                    label="üßπ –û—á–∏—Å—Ç–∏—Ç—å", 
                    callback=self.clear_results
                )
                dpg.add_spacer(width=20)
                dpg.add_text("–°—Ç–∞—Ç—É—Å:", tag="status_text")
                dpg.add_text("–û–∂–∏–¥–∞–Ω–∏–µ", tag="current_status")
            
            # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with dpg.collapsing_header(label="‚öôÔ∏è –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", default_open=True):
                with dpg.group(horizontal=True):
                    with dpg.child_window(width=300):
                        dpg.add_text("–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                        dpg.add_slider_int(
                            label="–ü–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É",
                            default_value=50, min_value=1, max_value=1000,
                            tag="rate_limit",
                            callback=self.update_rate_limit
                        )
                        dpg.add_combo(
                            label="–ü—Ä–æ—Ñ–∏–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏",
                            items=["–°—Ç–µ–ª—Å", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–ë–µ–∑—É–º–Ω—ã–π"],
                            default_value="–ù–æ—Ä–º–∞–ª—å–Ω—ã–π",
                            tag="speed_profile",
                            callback=self.update_speed_profile
                        )
                    
                    with dpg.child_window(width=300):
                        dpg.add_text("–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                        dpg.add_slider_int(
                            label="–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞",
                            default_value=3, min_value=1, max_value=10,
                            tag="max_depth",
                            callback=self.update_max_depth
                        )
                        dpg.add_checkbox(
                            label="–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            default_value=True,
                            tag="recursive_scan"
                        )
                    
                    with dpg.child_window(width=300):
                        dpg.add_text("–ú–æ–¥—É–ª–∏:")
                        dpg.add_combo(
                            label="–¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            items=["–ê–≤—Ç–æ", "–¢–æ–ª—å–∫–æ –ø–æ–¥–¥–æ–º–µ–Ω—ã", "–ü–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã", "–£—è–∑–≤–∏–º–æ—Å—Ç–∏"],
                            default_value="–ê–≤—Ç–æ",
                            tag="scan_type"
                        )
                        dpg.add_checkbox(
                            label="–ü–∞—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            default_value=False,
                            tag="passive_scan"
                        )
            
            # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            with dpg.tab_bar(tag="main_tab_bar"):
                # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                with dpg.tab(label="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                    with dpg.group(horizontal=True):
                        # –î–µ—Ä–µ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
                        with dpg.child_window(width=400, tag="nodes_tree_window"):
                            dpg.add_text("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–∑–ª—ã:")
                            dpg.add_tree_node(
                                label="–ö–æ—Ä–Ω–µ–≤—ã–µ —Ü–µ–ª–∏",
                                tag="root_nodes",
                                default_open=True
                            )
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        with dpg.child_window(tag="details_window"):
                            dpg.add_text("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", tag="details_title")
                            dpg.add_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π", tag="details_content")
                
                # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                with dpg.tab(label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                    with dpg.group(horizontal=True):
                        with dpg.child_window(width=300):
                            dpg.add_text("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                            dpg.add_text("–¶–µ–ª–µ–π: 0", tag="stats_targets")
                            dpg.add_text("–ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: 0", tag="stats_nodes")
                            dpg.add_text("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: 0", tag="stats_scans")
                            dpg.add_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: 0", tag="stats_modules")
                            dpg.add_separator()
                            dpg.add_text("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 00:00:00", tag="stats_uptime")
                        
                        with dpg.child_window():
                            dpg.add_text("–ì—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞):")
                            dpg.add_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                
                # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
                with dpg.tab(label="üìù –õ–æ–≥–∏"):
                    dpg.add_input_text(
                        tag="log_output",
                        multiline=True,
                        readonly=True,
                        height=400,
                        width=-1
                    )
                    with dpg.group(horizontal=True):
                        dpg.add_button(label="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback=self.clear_logs)
                        dpg.add_button(label="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", callback=self.export_logs)
                        dpg.add_checkbox(label="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", default_value=True, tag="auto_scroll")
                
                # –í–∫–ª–∞–¥–∫–∞ –º–æ–¥—É–ª–µ–π
                with dpg.tab(label="üîß –ú–æ–¥—É–ª–∏"):
                    self.setup_modules_tab()
    
    def setup_modules_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏"""
        with dpg.group(horizontal=True):
            # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
            with dpg.child_window(width=400):
                dpg.add_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:")
                dpg.add_listbox(
                    items=[],
                    tag="modules_list",
                    num_items=15,
                    callback=self.on_module_select
                )
                with dpg.group(horizontal=True):
                    dpg.add_button(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å", callback=self.load_selected_module)
                    dpg.add_button(label="–í—ã–≥—Ä—É–∑–∏—Ç—å", callback=self.unload_selected_module)
                    dpg.add_button(label="–û–±–Ω–æ–≤–∏—Ç—å", callback=self.refresh_modules_list)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
            with dpg.child_window(tag="module_info_window"):
                dpg.add_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ:", tag="module_info_title")
                dpg.add_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞", tag="module_info_content")
    
    def setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        with dpg.theme() as global_theme:
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (40, 40, 40), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_Button, (60, 60, 80), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, (80, 80, 100), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, (100, 100, 120), category=dpg.mvThemeCat_Core)
        
        dpg.bind_theme(global_theme)
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if hasattr(self.engine, 'callbacks'):
            self.engine.callbacks['node_discovered'] = self.on_node_discovered
            self.engine.callbacks['scan_completed'] = self.on_scan_completed
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        target = dpg.get_value("target_input")
        if not target:
            self.log_message("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        self.is_scanning = True
        self.update_ui_state()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ –¥–≤–∏–∂–æ–∫
        self.engine.add_initial_target(target)
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scan_thread = threading.Thread(target=self.run_scan_async)
        scan_thread.daemon = True
        scan_thread.start()
        
        self.log_message(f"üöÄ –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {target}")
        dpg.set_value("current_status", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    def run_scan_async(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(self.engine.process_queue())
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            loop.close()
            self.is_scanning = False
            self.update_ui_state()
            dpg.set_value("current_status", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.log_message("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.engine.stop_engine()
        self.is_scanning = False
        self.update_ui_state()
        dpg.set_value("current_status", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.log_message("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.log_message("üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
        dpg.set_value("current_status", "–û–∂–∏–¥–∞–Ω–∏–µ")
    
    def update_ui_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        dpg.configure_item("scan_button", enabled=not self.is_scanning)
        dpg.configure_item("stop_button", enabled=self.is_scanning)
    
    def on_node_discovered(self, node):
        """Callback –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞"""
        message = f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω: {node.type.value} -> {node.data}"
        self.log_message(message)
        self.update_nodes_tree(node)
    
    def on_scan_completed(self, task):
        """Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        message = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.data}"
        self.log_message(message)
        self.update_statistics()
    
    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        current_log = dpg.get_value("log_output")
        new_log = current_log + log_entry
        
        dpg.set_value("log_output", new_log)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if dpg.get_value("auto_scroll"):
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö DPG)
            pass
    
    def update_nodes_tree(self, node):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —É–∑–ª–æ–≤"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
        pass
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.engine.get_statistics()
        dpg.set_value("stats_targets", f"–¶–µ–ª–µ–π: {stats.get('total_scans', 0)}")
        dpg.set_value("stats_nodes", f"–ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: {stats.get('nodes_discovered', 0)}")
        dpg.set_value("stats_scans", f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats.get('successful_scans', 0)}")
        dpg.set_value("stats_modules", f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {stats.get('active_modules', 0)}")
    
    def refresh_modules_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π"""
        modules = self.module_manager.list_modules()
        module_names = list(modules.keys())
        dpg.configure_item("modules_list", items=module_names)
        self.log_message("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def on_module_select(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è"""
        selected_module = app_data
        module_info = self.module_manager.get_module_info(selected_module)
        
        if module_info:
            info_text = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {module_info.name}
–í–µ—Ä—Å–∏—è: {module_info.version}
–ê–≤—Ç–æ—Ä: {module_info.author}
–¢–∏–ø: {module_info.module_type.value}
–û–ø–∏—Å–∞–Ω–∏–µ: {module_info.description}

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(module_info.input_types)}
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(module_info.output_types)}
–¢—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(module_info.triggers)}
–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if module_info.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
"""
            dpg.set_value("module_info_content", info_text)
    
    def load_selected_module(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        selected_module = dpg.get_value("modules_list")
        if selected_module:
            success = self.module_manager.load_module(selected_module)
            if success:
                self.log_message(f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {selected_module}")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {selected_module}")
    
    def unload_selected_module(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
        self.log_message("‚ö†Ô∏è –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filename = f"rapidrecon_scan_{int(time.time())}.json"
        self.engine.export_results(filename)
        self.log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"""
        logs = dpg.get_value("log_output")
        filename = f"rapidrecon_logs_{int(time.time())}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(logs)
        self.log_message(f"üìÑ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        dpg.set_value("log_output", "")
        self.log_message("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def update_rate_limit(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        rate = dpg.get_value("rate_limit")
        self.log_message(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {rate} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É")
    
    def update_speed_profile(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        profile = dpg.get_value("speed_profile")
        self.log_message(f"üéõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
    
    def update_max_depth(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã"""
        depth = dpg.get_value("max_depth")
        self.engine.max_depth = depth
        self.log_message(f"üìè –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞: {depth}")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.log_message("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def show_module_manager(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π"""
        self.log_message("üîß –û—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
RapidRecon v1.0.0

–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 
—Ä–∞–∑–≤–µ–¥–∫–∏ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""
        self.log_message("‚ÑπÔ∏è " + about_text.replace('\n', ' '))
    
    def quick_scan(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        dpg.set_value("speed_profile", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π")
        dpg.set_value("max_depth", 2)
        self.log_message("üöÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def deep_scan(self):
        """–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        dpg.set_value("speed_profile", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π")
        dpg.set_value("max_depth", 5)
        self.log_message("üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –≥–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def custom_scan(self):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.log_message("üéõÔ∏è –û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def exit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_scanning:
            self.stop_scan()
        self.destroy()
    
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ"""
        dpg.create_viewport(
            title='RapidRecon v1.0.0', 
            width=1400, 
            height=900,
            min_width=1000,
            min_height=700
        )
        dpg.setup_dearpygui()
        dpg.show_viewport()
        dpg.set_primary_window("Primary Window", True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.refresh_modules_list()
        self.update_ui_state()
        
        dpg.start_dearpygui()
    
    def destroy(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        dpg.destroy_context()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    from propagation_engine import PropagationEngine
    from module_manager import ModuleManager
    
    engine = PropagationEngine()
    module_manager = ModuleManager()
    
    app = MainWindow(engine, module_manager)
    app.show()
