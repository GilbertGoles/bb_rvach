"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon –Ω–∞ Dear PyGui
"""
import dearpygui.dearpygui as dpg
from typing import Callable, Dict, Any, List, Optional
import asyncio
import threading
import time
import json
from datetime import datetime
import logging

class GraphView:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤"""
    
    def __init__(self):
        self.nodes = {}
        self.edges = {}
        self.node_counter = 0
        self.setup_graph_theme()
    
    def setup_graph_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –¥–ª—è –≥—Ä–∞—Ñ–∞"""
        with dpg.theme(tag="graph_theme"):
            with dpg.theme_component(dpg.mvNode):
                dpg.add_theme_color(dpg.mvNodeCol_TitleBar, (70, 70, 100))
                dpg.add_theme_color(dpg.mvNodeCol_TitleBarHovered, (90, 90, 120))
                dpg.add_theme_color(dpg.mvNodeCol_TitleBarSelected, (110, 110, 140))
            
            with dpg.theme_component(dpg.mvNodeAttribute):
                dpg.add_theme_color(dpg.mvNodeCol_Attr, (60, 60, 80))
    
    def setup_graph_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –≥—Ä–∞—Ñ–∞"""
        with dpg.tab(label="üåê –ì—Ä–∞—Ñ —Å–µ—Ç–∏", tag="graph_tab"):
            with dpg.group(horizontal=True):
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–º
                with dpg.child_window(width=200):
                    dpg.add_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–º:")
                    dpg.add_button(label="–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ", callback=self.update_graph)
                    dpg.add_button(label="–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ", callback=self.clear_graph)
                    dpg.add_button(label="–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞", callback=self.export_graph)
                    dpg.add_separator()
                    dpg.add_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
                    dpg.add_checkbox(label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø—ã", default_value=True, tag="show_types")
                    dpg.add_checkbox(label="–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É", default_value=False, tag="group_by_type")
                    dpg.add_slider_float(label="–ú–∞—Å—à—Ç–∞–±", default_value=1.0, min_value=0.1, max_value=2.0, tag="graph_scale")
                
                # –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∞
                with dpg.child_window(tag="graph_window"):
                    with dpg.node_editor(
                        tag="node_editor",
                        minimap=True,
                        minimap_location=dpg.mvNodeMiniMap_Location_BottomRight
                    ):
                        pass  # –£–∑–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    
    def add_node(self, node_data: Dict[str, Any]) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª –≤ –≥—Ä–∞—Ñ"""
        node_id = self.node_counter
        self.node_counter += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —É–∑–ª–∞ –ø–æ —Ç–∏–ø—É
        node_colors = {
            'initial_target': (100, 200, 100),
            'subdomain': (100, 150, 200),
            'ip_address': (200, 150, 100),
            'active_host': (200, 100, 100),
            'open_ports': (150, 100, 200),
            'service': (100, 200, 200),
            'vulnerability': (200, 100, 150),
            'exploitation': (255, 50, 50),
            'exploitation_success': (255, 0, 0),
            'internal_scan': (50, 150, 255)
        }
        
        color = node_colors.get(node_data.get('type', 'custom'), (150, 150, 150))
        
        with dpg.node(
            parent="node_editor",
            label=f"{node_data.get('type', 'node')}",
            tag=f"node_{node_id}",
            pos=[100 + (node_id % 5) * 200, 100 + (node_id // 5) * 150]
        ):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∑–ª–∞
            with dpg.node_attribute(attribute_type=dpg.mvNode_Attr_Static):
                dpg.add_text(f"–î–∞–Ω–Ω—ã–µ: {node_data.get('data', 'N/A')}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with dpg.node_attribute(attribute_type=dpg.mvNode_Attr_Static):
                if 'depth' in node_data:
                    dpg.add_text(f"–ì–ª—É–±–∏–Ω–∞: {node_data['depth']}")
                if 'module' in node_data:
                    dpg.add_text(f"–ú–æ–¥—É–ª—å: {node_data['module']}")
            
            # –í—Ö–æ–¥–Ω–æ–π –ø–æ—Ä—Ç
            with dpg.node_attribute(attribute_type=dpg.mvNode_Attr_Input, tag=f"in_{node_id}"):
                dpg.add_text("–í—Ö–æ–¥")
            
            # –í—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ä—Ç
            with dpg.node_attribute(attribute_type=dpg.mvNode_Attr_Output, tag=f"out_{node_id}"):
                dpg.add_text("–í—ã—Ö–æ–¥")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        dpg.bind_item_theme(f"node_{node_id}", "graph_theme")
        
        self.nodes[node_id] = {
            'data': node_data,
            'dpg_id': f"node_{node_id}"
        }
        
        return node_id
    
    def add_edge(self, source_node_id: int, target_node_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
        if source_node_id in self.nodes and target_node_id in self.nodes:
            edge_id = f"edge_{source_node_id}_{target_node_id}"
            dpg.add_node_link(
                f"out_{source_node_id}",
                f"in_{target_node_id}",
                parent="node_editor",
                tag=edge_id
            )
            self.edges[edge_id] = (source_node_id, target_node_id)
    
    def clear_graph(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ"""
        dpg.delete_item("node_editor", children_only=True)
        self.nodes.clear()
        self.edges.clear()
        self.node_counter = 0
    
    def update_graph(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
        pass
    
    def export_graph(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ –≤ —Ñ–∞–π–ª"""
        graph_data = {
            'nodes': [
                {**node['data'], 'graph_id': node_id}
                for node_id, node in self.nodes.items()
            ],
            'edges': list(self.edges.values())
        }
        
        filename = f"rapidrecon_graph_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(graph_data, f, indent=2, ensure_ascii=False)
        
        return filename

class MainWindow:
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.graph_view = GraphView()
        self.is_scanning = False
        self.scan_stats = {}
        self.real_time_data = []
        self.logger = logging.getLogger('RapidRecon.GUI')
        self.setup_gui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        self.setup_theme()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.setup_callbacks()
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        dpg.create_context()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        with dpg.viewport_menu_bar():
            with dpg.menu(label="–§–∞–π–ª"):
                dpg.add_menu_item(label="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback=self.export_results)
                dpg.add_menu_item(label="–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞", callback=self.export_graph)
                dpg.add_menu_item(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback=self.show_settings)
                dpg.add_separator()
                dpg.add_menu_item(label="–í—ã—Ö–æ–¥", callback=self.exit_app)
            
            with dpg.menu(label="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                dpg.add_menu_item(label="–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.quick_scan)
                dpg.add_menu_item(label="–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.deep_scan)
                dpg.add_menu_item(label="–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback=self.custom_scan)
            
            with dpg.menu(label="–ú–æ–¥—É–ª–∏"):
                dpg.add_menu_item(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏", callback=self.show_module_manager)
                dpg.add_menu_item(label="–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏", callback=self.refresh_modules)
            
            with dpg.menu(label="–í–∏–¥"):
                dpg.add_menu_item(label="–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ", callback=self.update_graph_from_engine)
                dpg.add_menu_item(label="–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ", callback=self.graph_view.clear_graph)
            
            with dpg.menu(label="–°–ø—Ä–∞–≤–∫–∞"):
                dpg.add_menu_item(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback=self.show_about)
        
        with dpg.window(tag="Primary Window", label="RapidRecon - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ–¥–∫–∏"):
            # –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
            with dpg.tab_bar(tag="main_tab_bar"):
                # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.setup_scan_tab()
                
                # –í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞
                self.graph_view.setup_graph_tab()
                
                # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.setup_results_tab()
                
                # –í–∫–ª–∞–¥–∫–∞ –º–æ–¥—É–ª–µ–π
                self.setup_modules_tab()
    
    def setup_scan_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        with dpg.tab(label="üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"):
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_input_text(
                    tag="target_input", 
                    hint="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω, IP –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω",
                    width=300
                )
                dpg.add_button(
                    label="‚ñ∂Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", 
                    callback=self.start_scan,
                    tag="scan_button"
                )
                dpg.add_button(
                    label="‚èπÔ∏è –°—Ç–æ–ø", 
                    callback=self.stop_scan,
                    tag="stop_button"
                )
                dpg.add_button(
                    label="üßπ –û—á–∏—Å—Ç–∏—Ç—å", 
                    callback=self.clear_results
                )
                dpg.add_spacer(width=20)
                dpg.add_text("–°—Ç–∞—Ç—É—Å:", tag="status_text")
                dpg.add_text("–û–∂–∏–¥–∞–Ω–∏–µ", tag="current_status")
            
            # –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("–ü—Ä–æ—Ñ–∏–ª—å:")
                dpg.add_combo(
                    items=self.engine.get_available_profiles(),
                    default_value=self.engine.config_manager.active_profile,
                    tag="scan_profile",
                    callback=self.on_profile_change,
                    width=120
                )
                dpg.add_button(
                    label="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", 
                    callback=self.save_config,
                    width=120
                )
                dpg.add_text("", tag="profile_description")
            
            # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with dpg.collapsing_header(label="‚öôÔ∏è –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", default_open=True):
                with dpg.group(horizontal=True):
                    with dpg.child_window(width=300):
                        dpg.add_text("–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                        dpg.add_slider_int(
                            label="–ü–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É",
                            default_value=self.engine.rate_limit,
                            min_value=1, max_value=1000,
                            tag="rate_limit",
                            callback=self.update_rate_limit
                        )
                        dpg.add_combo(
                            label="–ü—Ä–æ—Ñ–∏–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏",
                            items=["–°—Ç–µ–ª—Å", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–ë–µ–∑—É–º–Ω—ã–π"],
                            default_value="–ù–æ—Ä–º–∞–ª—å–Ω—ã–π",
                            tag="speed_profile",
                            callback=self.update_speed_profile
                        )
                    
                    with dpg.child_window(width=300):
                        dpg.add_text("–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                        dpg.add_slider_int(
                            label="–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞",
                            default_value=self.engine.max_depth,
                            min_value=1, max_value=10,
                            tag="max_depth",
                            callback=self.update_max_depth
                        )
                        dpg.add_checkbox(
                            label="–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            default_value=True,
                            tag="recursive_scan"
                        )
                    
                    with dpg.child_window(width=300):
                        dpg.add_text("–ú–æ–¥—É–ª–∏:")
                        dpg.add_combo(
                            label="–¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                            items=["–ê–≤—Ç–æ", "–¢–æ–ª—å–∫–æ –ø–æ–¥–¥–æ–º–µ–Ω—ã", "–ü–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã", "–£—è–∑–≤–∏–º–æ—Å—Ç–∏"],
                            default_value="–ê–≤—Ç–æ",
                            tag="scan_type"
                        )
                        dpg.add_checkbox(
                            label="–ü–∞—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            default_value=False,
                            tag="passive_scan"
                        )
            
            # –õ–æ–≥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            dpg.add_text("–õ–æ–≥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            dpg.add_input_text(
                tag="scan_log", 
                multiline=True, 
                height=200,
                readonly=True,
                width=-1
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            self.update_profile_description()
    
    def setup_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with dpg.tab(label="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            with dpg.group(horizontal=True):
                # –î–µ—Ä–µ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
                with dpg.child_window(width=400, tag="nodes_tree_window"):
                    dpg.add_text("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–∑–ª—ã:")
                    dpg.add_tree_node(
                        label="–ö–æ—Ä–Ω–µ–≤—ã–µ —Ü–µ–ª–∏",
                        tag="root_nodes",
                        default_open=True
                    )
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with dpg.child_window(tag="details_window"):
                    dpg.add_text("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", tag="details_title")
                    dpg.add_input_text(
                        tag="detailed_results",
                        multiline=True,
                        height=300,
                        readonly=True,
                        width=-1
                    )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            with dpg.collapsing_header(label="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                with dpg.group(horizontal=True):
                    with dpg.child_window(width=300):
                        dpg.add_text("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                        dpg.add_text("–¶–µ–ª–µ–π: 0", tag="stats_targets")
                        dpg.add_text("–ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: 0", tag="stats_nodes")
                        dpg.add_text("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: 0", tag="stats_scans")
                        dpg.add_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: 0", tag="stats_modules")
                        dpg.add_separator()
                        dpg.add_text("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 00:00:00", tag="stats_uptime")
    
    def setup_modules_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏"""
        with dpg.tab(label="üîß –ú–æ–¥—É–ª–∏"):
            with dpg.group(horizontal=True):
                # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
                with dpg.child_window(width=400):
                    dpg.add_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:")
                    dpg.add_listbox(
                        items=list(self.engine.active_modules.keys()),
                        tag="modules_list",
                        num_items=15,
                        callback=self.on_module_select
                    )
                    with dpg.group(horizontal=True):
                        dpg.add_button(label="–û–±–Ω–æ–≤–∏—Ç—å", callback=self.refresh_modules_list)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
                with dpg.child_window(tag="module_info_window"):
                    dpg.add_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ:", tag="module_info_title")
                    dpg.add_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞", tag="module_info_content")
    
    def setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        with dpg.theme() as global_theme:
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (40, 40, 40), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_Button, (60, 60, 80), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, (80, 80, 100), category=dpg.mvThemeCat_Core)
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, (100, 100, 120), category=dpg.mvThemeCat_Core)
        
        dpg.bind_theme(global_theme)
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.engine.register_callback('node_discovered', self.on_node_discovered)
        self.engine.register_callback('scan_completed', self.on_scan_completed)
        self.engine.register_callback('task_failed', self.on_task_failed)
        self.engine.register_callback('vulnerability_found', self.on_vulnerability_found)
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞"""
        try:
            if event_type in ['node_discovered', 'node_added', 'task_completed']:
                self.update_graph_from_engine()
                self.update_statistics()
            elif event_type == 'scan_started':
                self.on_scan_started(data)
            elif event_type == 'scan_completed':
                self.on_scan_completed(data)
            elif event_type == 'task_failed':
                self.on_task_failed(data)
            elif event_type == 'vulnerability_found':
                self.on_vulnerability_found(data)
            elif event_type == 'exploitation_success':
                self.on_exploitation_success(data)
            elif event_type == 'progress_update':
                self.on_progress_update(data)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def on_profile_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = dpg.get_value("scan_profile")
        if self.engine.set_scan_profile(profile):
            # –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            profile_info = self.engine.get_current_profile_info()
            dpg.set_value("rate_limit", profile_info.get('rate_limit', 10))
            dpg.set_value("max_depth", profile_info.get('max_depth', 5))
            
            self.update_profile_description()
            self.add_to_log(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
    
    def update_profile_description(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = dpg.get_value("scan_profile")
        profile_info = self.engine.get_current_profile_info()
        description = profile_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        dpg.set_value("profile_description", f" - {description}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π config_manager
            self.engine.config_manager.save_config()
            self.engine.config_manager.save_profiles()
            self.engine.config_manager.save_module_configs()
            self.add_to_log("üíæ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            self.add_to_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        target = dpg.get_value("target_input")
        if not target:
            self.add_to_log("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        self.is_scanning = True
        self.update_ui_state()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ –¥–≤–∏–∂–æ–∫
        self.engine.add_initial_target(target)
        
        self.add_to_log(f"üöÄ –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {target}")
        self.add_to_log(f"üìã –ü—Ä–æ—Ñ–∏–ª—å: {dpg.get_value('scan_profile')}")
        dpg.set_value("current_status", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.engine.stop_engine()
        self.is_scanning = False
        self.update_ui_state()
        dpg.set_value("current_status", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.add_to_log("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.graph_view.clear_graph()
        dpg.set_value("detailed_results", "")
        dpg.set_value("scan_log", "")
        self.add_to_log("üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
        dpg.set_value("current_status", "–û–∂–∏–¥–∞–Ω–∏–µ")
    
    def update_ui_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        dpg.configure_item("scan_button", enabled=not self.is_scanning)
        dpg.configure_item("stop_button", enabled=self.is_scanning)
    
    def on_node_discovered(self, node):
        """Callback –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞"""
        message = f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω: {node.type.value} -> {node.data}"
        self.add_to_log(message)
        self.update_statistics()
    
    def on_scan_completed(self, task):
        """Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        message = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.data}"
        self.add_to_log(message)
        self.update_statistics()
    
    def on_task_failed(self, data):
        """Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–¥–∞—á–∏"""
        task = data.get('task')
        error = data.get('error')
        message = f"‚ùå –û—à–∏–±–∫–∞: {task.data if task else 'Unknown'} - {error}"
        self.add_to_log(message)
    
    def on_vulnerability_found(self, data):
        """Callback –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        message = f"üî¥ –£—è–∑–≤–∏–º–æ—Å—Ç—å: {data.get('cve', 'Unknown')} –Ω–∞ {data.get('target', 'Unknown')}"
        self.add_to_log(message)
    
    def on_exploitation_success(self, data):
        """Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        message = f"üí• –£–°–ü–ï–®–ù–ê–Ø –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–Ø: {data.get('access_type', 'Unknown')} –¥–æ—Å—Ç—É–ø –∫ {data.get('target', 'Unknown')}"
        self.add_to_log(message)
    
    def on_scan_started(self, data):
        """Callback –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.add_to_log("üöÄ –ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    def on_progress_update(self, data):
        """Callback –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        pass
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        current_log = dpg.get_value("scan_log")
        new_log = log_entry + current_log  # –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
        
        dpg.set_value("scan_log", new_log)
    
    def update_graph_from_engine(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –¥–≤–∏–∂–∫–∞"""
        self.graph_view.clear_graph()
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤—è–∑–µ–π
        node_map = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã –≤ –≥—Ä–∞—Ñ
        for node in self.engine.discovered_nodes:
            node_id = self.graph_view.add_node({
                'type': node.type.value,
                'data': node.data,
                'depth': node.depth,
                'module': node.module,
                'ports': node.ports,
                'metadata': node.metadata,
                'vulnerability_data': node.vulnerability_data,
                'exploit_data': node.exploit_data
            })
            node_map[node.node_id] = node_id
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        for node in self.engine.discovered_nodes:
            if node.source and node.source in node_map:
                source_id = node_map.get(node.source)
                target_id = node_map.get(node.node_id)
                if source_id is not None and target_id is not None:
                    self.graph_view.add_edge(source_id, target_id)
        
        self.graph_view.update_graph()
        self.update_detailed_results()
    
    def update_detailed_results(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        results_text = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–∑–ª—ã:\n\n"
        
        for node in self.engine.discovered_nodes:
            depth_indent = "  " * node.depth
            node_type = getattr(node.type, 'value', str(node.type))
            results_text += f"{depth_indent}‚Ä¢ {node_type}: {node.data}\n"
            
            if node.ports:
                results_text += f"{depth_indent}  –ü–æ—Ä—Ç—ã: {node.ports}\n"
            
            if node.metadata:
                results_text += f"{depth_indent}  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {node.metadata}\n"
            
            if node.vulnerability_data:
                results_text += f"{depth_indent}  –£—è–∑–≤–∏–º–æ—Å—Ç—å: {node.vulnerability_data}\n"
            
            if node.exploit_data:
                results_text += f"{depth_indent}  –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è: {node.exploit_data}\n"
        
        dpg.set_value("detailed_results", results_text)
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.engine.get_statistics()
        dpg.set_value("stats_targets", f"–¶–µ–ª–µ–π: {stats.get('total_scans', 0)}")
        dpg.set_value("stats_nodes", f"–ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: {stats.get('discovered_nodes', 0)}")
        dpg.set_value("stats_scans", f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats.get('successful_scans', 0)}")
        dpg.set_value("stats_modules", f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {stats.get('active_modules', 0)}")
    
    def refresh_modules_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π"""
        module_names = list(self.engine.active_modules.keys())
        dpg.configure_item("modules_list", items=module_names)
        self.add_to_log("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def on_module_select(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è"""
        selected_module = app_data
        module_info = f"""
–ú–æ–¥—É–ª—å: {selected_module}
–°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω
        """
        dpg.set_value("module_info_content", module_info)
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filename = f"rapidrecon_scan_{int(time.time())}.json"
        self.engine.export_results(filename)
        self.add_to_log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
    
    def export_graph(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞"""
        filename = self.graph_view.export_graph()
        self.add_to_log(f"üåê –ì—Ä–∞—Ñ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {filename}")
    
    def update_rate_limit(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        rate = dpg.get_value("rate_limit")
        self.engine.rate_limit = rate
        self.add_to_log(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {rate} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É")
    
    def update_speed_profile(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        profile = dpg.get_value("speed_profile")
        self.add_to_log(f"üéõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
    
    def update_max_depth(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã"""
        depth = dpg.get_value("max_depth")
        self.engine.max_depth = depth
        self.add_to_log(f"üìè –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞: {depth}")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.add_to_log("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def show_module_manager(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π"""
        self.add_to_log("üîß –û—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
RapidRecon v1.0.0

–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 
—Ä–∞–∑–≤–µ–¥–∫–∏ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""
        self.add_to_log("‚ÑπÔ∏è " + about_text.replace('\n', ' '))
    
    def quick_scan(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        dpg.set_value("scan_profile", "stealth")
        self.on_profile_change()
        dpg.set_value("max_depth", 2)
        self.add_to_log("üöÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def deep_scan(self):
        """–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        dpg.set_value("scan_profile", "aggressive")
        self.on_profile_change()
        dpg.set_value("max_depth", 5)
        self.add_to_log("üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –≥–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def custom_scan(self):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.add_to_log("üéõÔ∏è –û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def exit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_scanning:
            self.stop_scan()
        self.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ show –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.show()
    
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ"""
        dpg.create_viewport(
            title='RapidRecon v1.0.0', 
            width=1400, 
            height=900,
            min_width=1000,
            min_height=700
        )
        dpg.setup_dearpygui()
        dpg.show_viewport()
        dpg.set_primary_window("Primary Window", True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.refresh_modules_list()
        self.update_ui_state()
        self.update_profile_description()
        
        dpg.start_dearpygui()
    
    def destroy(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        dpg.destroy_context()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    from core.engine import PropagationEngine
    from core.module_manager import ModuleManager
    
    engine = PropagationEngine()
    module_manager = ModuleManager()
    
    app = MainWindow(engine, module_manager)
    app.show()
