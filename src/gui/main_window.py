"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon –≤ —Å—Ç–∏–ª–µ Obsidian - –ì–ò–ë–†–ò–î–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional, Tuple
import time
import json
from datetime import datetime
import logging
import math
import random
import traceback
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

class ObsidianTheme:
    """–¢–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    @staticmethod
    def setup_theme():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Obsidian"""
        
        with dpg.theme() as obsidian_theme:
            # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ Obsidian
            colors = {
                'bg_primary': [18, 18, 24],
                'bg_secondary': [28, 28, 36],
                'bg_tertiary': [38, 38, 48],
                'accent_primary': [123, 97, 255],
                'accent_secondary': [86, 156, 214],
                'text_primary': [220, 220, 220],
                'text_secondary': [150, 150, 160],
                'text_muted': [100, 100, 110],
                'success': [72, 199, 116],
                'warning': [255, 179, 64],
                'error': [255, 92, 87],
                'border': [60, 60, 70]
            }
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_WindowBg, colors['bg_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Text, colors['text_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Border, colors['border'])
                dpg.add_theme_style(dpg.mvStyleVar_WindowRounding, 8)
                dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 6)
                dpg.add_theme_style(dpg.mvStyleVar_GrabRounding, 6)
            
            # –ö–Ω–æ–ø–∫–∏
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, [103, 77, 235])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 4)
            
            # –ü–æ–ª—è –≤–≤–æ–¥–∞
            with dpg.theme_component(dpg.mvInputText):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_FrameBgHovered, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_FrameBgActive, colors['bg_tertiary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 6)
            
            # –í–∫–ª–∞–¥–∫–∏
            with dpg.theme_component(dpg.mvTabBar):
                dpg.add_theme_color(dpg.mvThemeCol_Tab, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabActive, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabUnfocused, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_TabUnfocusedActive, colors['bg_tertiary'])
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            with dpg.theme_component(dpg.mvCollapsingHeader):
                dpg.add_theme_color(dpg.mvThemeCol_Header, colors['bg_secondary'])
                dpg.add_theme_color(dpg.mvThemeCol_HeaderHovered, colors['accent_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_HeaderActive, colors['accent_primary'])
        
        return obsidian_theme

class DangerTheme:
    """–¢–µ–º–∞ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∫—Ä–∞—Å–Ω–∞—è)"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as danger_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 60, 60, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 80, 80, 255])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, [255, 40, 40, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return danger_theme

class NetworkGraph:
    """–°–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ –≤ —Å—Ç–∏–ª–µ Obsidian - –£–ü–†–û–©–ï–ù–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        self.nodes = {}
        self.edges = []
        self.node_counter = 0
        self.layout_positions = {}
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ (–∫–∞–∫ –≤ NetworkVisualizer)
        self.colors = {
            'initial_target': [72, 199, 116, 200],    # –ó–µ–ª–µ–Ω—ã–π
            'subdomain': [86, 156, 214, 180],         # –°–∏–Ω–∏–π
            'active_host': [255, 179, 64, 200],       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'open_ports': [123, 97, 255, 180],        # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'service': [158, 118, 255, 180],          # –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
            'vulnerability': [255, 92, 87, 220],      # –ö—Ä–∞—Å–Ω—ã–π
            'exploitation': [255, 60, 60, 220],       # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
            'unknown': [128, 128, 128, 150]           # –°–µ—Ä—ã–π
        }
        
        self.icons = {
            'initial_target': 'üéØ',
            'subdomain': 'üåê',
            'active_host': 'üíª',
            'open_ports': 'üîì',
            'service': '‚öôÔ∏è',
            'vulnerability': 'üî¥',
            'exploitation': 'üí•',
            'unknown': '‚Ä¢'
        }
    
    def add_node(self, node_data: Dict[str, Any]) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            node_id = self.node_counter
            self.node_counter += 1
            
            node_type = node_data.get('type', 'unknown')
            label = self._get_node_label(node_data)
            position = self._calculate_position(node_id, node_type)
            
            self.nodes[node_id] = {
                'id': node_id,
                'label': label,
                'type': node_type,
                'data': node_data,
                'position': position,
                'color': self.colors.get(node_type, self.colors['unknown']),
                'icon': self.icons.get(node_type, self.icons['unknown']),
                'radius': self._get_radius(node_type)
            }
            
            return node_id
        except Exception as e:
            logging.error(f"Error adding node: {e}")
            return -1
    
    def _get_node_label(self, node_data: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É –¥–ª—è —É–∑–ª–∞"""
        data = node_data.get('data', 'Unknown')
        node_type = node_data.get('type', '')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if len(str(data)) > 20:
            return str(data)[:17] + "..."
        return str(data)
    
    def _get_radius(self, node_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏—É—Å —É–∑–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        sizes = {
            'initial_target': 25,
            'active_host': 22,
            'exploitation': 23,
            'vulnerability': 19,
            'subdomain': 20,
            'open_ports': 20,
            'service': 18,
            'unknown': 20
        }
        return sizes.get(node_type, 20)
    
    def _calculate_position(self, node_id: int, node_type: str) -> List[float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —É–∑–ª–∞ - –£–ü–†–û–©–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú"""
        center_x, center_y = 500, 350
        
        if not self.nodes:
            return [center_x, center_y]
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—Ä—É–≥—É
        angle = (node_id * 2 * math.pi / len(self.nodes))
        radius = 200 + (len(self.nodes) * 3)
        
        # –°–ª–µ–≥–∫–∞ —Å–º–µ—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
        type_offset = {
            'initial_target': (0, -50),
            'subdomain': (-30, -20),
            'active_host': (30, 0),
            'open_ports': (0, 30),
            'vulnerability': (40, 40)
        }
        
        offset_x, offset_y = type_offset.get(node_type, (0, 0))
        
        return [
            center_x + radius * math.cos(angle) + offset_x,
            center_y + radius * math.sin(angle) + offset_y
        ]
    
    def add_edge(self, source_id: int, target_id: int, edge_type: str = "normal"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
        try:
            if source_id in self.nodes and target_id in self.nodes:
                edge_configs = {
                    "normal": {"color": [150, 150, 150, 100], "thickness": 2},
                    "dns": {"color": [86, 156, 214, 120], "thickness": 2},
                    "port": {"color": [123, 97, 255, 120], "thickness": 2},
                    "vulnerability": {"color": [255, 100, 100, 120], "thickness": 2}
                }
                
                config = edge_configs.get(edge_type, edge_configs["normal"])
                
                self.edges.append({
                    'source': source_id,
                    'target': target_id,
                    'type': edge_type,
                    'color': config['color'],
                    'thickness': config['thickness']
                })
        except Exception as e:
            logging.error(f"Error adding edge: {e}")
    
    def draw(self, width: int, height: int):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ - –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –§–æ–Ω
            dpg.draw_rectangle([0, 0], [width, height], 
                             fill=[25, 25, 32], parent="graph_canvas")
            
            # –°–µ—Ç–∫–∞
            grid_size = 50
            for x in range(0, width, grid_size):
                dpg.draw_line([x, 0], [x, height], color=[40, 40, 50], 
                            thickness=1, parent="graph_canvas")
            for y in range(0, height, grid_size):
                dpg.draw_line([0, y], [width, y], color=[40, 40, 50], 
                            thickness=1, parent="graph_canvas")
            
            # –°–≤—è–∑–∏
            for edge in self.edges:
                source = self.nodes.get(edge['source'])
                target = self.nodes.get(edge['target'])
                if source and target:
                    dpg.draw_line(source['position'], target['position'],
                                color=edge['color'], thickness=edge['thickness'],
                                parent="graph_canvas")
            
            # –£–∑–ª—ã
            for node_id, node in self.nodes.items():
                pos = node['position']
                
                # –ö—Ä—É–≥ —É–∑–ª–∞
                dpg.draw_circle(pos, node['radius'], fill=node['color'],
                              color=[255, 255, 255, 100], thickness=2,
                              parent="graph_canvas")
                
                # –ò–∫–æ–Ω–∫–∞
                dpg.draw_text([pos[0] - 4, pos[1] - 6], node['icon'],
                            color=[255, 255, 255], size=14, parent="graph_canvas")
                
                # –ú–µ—Ç–∫–∞
                dpg.draw_text([pos[0] - len(node['label']) * 3, pos[1] + node['radius'] + 8],
                            node['label'], color=[200, 200, 200], size=11,
                            parent="graph_canvas")
                            
        except Exception as e:
            logging.error(f"Error drawing graph: {e}")
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ"""
        self.nodes.clear()
        self.edges.clear()
        self.node_counter = 0

class MainWindow:
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° –ì–†–ê–§–û–ú
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.graph = NetworkGraph()
        self.is_scanning = False
        self.logger = logging.getLogger('RapidRecon.GUI')
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
        self.all_nodes = {}  # node_id -> ScanNode
        self.graph_nodes = {}  # engine_node_id -> graph_node_id
        self.node_tree_data = {}  # –î–ª—è –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.initialize_gui()
        
        self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_gui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        try:
            dpg.create_context()
            
            # –¢–µ–º—ã
            self.obsidian_theme = ObsidianTheme.setup_theme()
            self.danger_theme = DangerTheme.setup_theme()
            
            # Viewport
            dpg.create_viewport(
                title='RapidRecon ‚Ä¢ Advanced Security Scanner',
                width=1600, height=1000,
                min_width=1200, min_height=800
            )
            
            # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.create_main_window()
            
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            self.create_settings_window()
            
            # –ó–∞–ø—É—Å–∫
            dpg.bind_theme(self.obsidian_theme)
            dpg.setup_dearpygui()
            dpg.show_viewport()
            dpg.set_primary_window("main_window", True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
            raise
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        with dpg.window(tag="main_window", label="RapidRecon", width=1600, height=1000,
                       no_move=True, no_resize=True, no_collapse=True, no_close=True):
            
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
            with dpg.child_window(tag="sidebar", width=300, border=False):
                self.create_sidebar()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
            with dpg.group(horizontal=True, width=-1, height=-1):
                with dpg.child_window(tag="content_area", width=-1, border=False):
                    self.create_content_area()
    
    def create_sidebar(self):
        """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å"""
        # –õ–æ–≥–æ—Ç–∏–ø
        dpg.add_spacer(height=20)
        dpg.add_text("RapidRecon", color=[123, 97, 255])
        dpg.add_text("Security Scanner", color=[150, 150, 160])
        dpg.add_separator()
        
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
        with dpg.collapsing_header(label="‚ö° Quick Launch", default_open=True):
            dpg.add_text("Target:", color=[150, 150, 160])
            dpg.add_input_text(tag="quick_target", hint="example.com", width=-1)
            
            dpg.add_button(label="üéØ Start Scan", tag="quick_scan_btn",
                         width=-1, callback=self.quick_start_scan)
            dpg.add_button(label="‚èπÔ∏è Stop", tag="quick_stop_btn",
                         width=-1, callback=self.stop_scan, show=False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with dpg.collapsing_header(label="üìà Statistics", default_open=True):
            dpg.add_text("Discovered:", color=[150, 150, 160])
            dpg.add_text("Nodes: 0", tag="stat_nodes")
            dpg.add_text("Hosts: 0", tag="stat_hosts")
            dpg.add_text("Services: 0", tag="stat_services")
            dpg.add_text("Vulnerabilities: 0", tag="stat_vulns")
        
        # –î–µ–π—Å—Ç–≤–∏—è
        dpg.add_separator()
        dpg.add_button(label="üßπ Clear All", width=-1, callback=self.clear_all)
    
    def create_content_area(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        with dpg.tab_bar(tag="main_tabs"):
            # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.tab(label="üéØ Scan"):
                self.create_scan_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞
            with dpg.tab(label="üåê Network Map"):
                self.create_graph_tab()
            
            # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with dpg.tab(label="üìä Results"):
                self.create_results_tab()
    
    def create_scan_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        dpg.add_text("Target Configuration", color=[123, 97, 255])
        
        with dpg.group(horizontal=True):
            with dpg.child_window(width=400):
                dpg.add_text("Targets:")
                dpg.add_input_text(tag="target_input", multiline=True, height=100, width=-1)
            
            with dpg.child_window(width=400):
                dpg.add_text("Modules:")
                dpg.add_checkbox(tag="mod_ping", label="Ping Scanner", default_value=True)
                dpg.add_checkbox(tag="mod_ports", label="Port Scanner", default_value=True)
                dpg.add_checkbox(tag="mod_subdomains", label="Subdomain Scanner", default_value=True)
        
        dpg.add_button(label="üöÄ Start Advanced Scan", callback=self.start_scan)
        
        # –õ–æ–≥
        dpg.add_text("Activity Log:")
        dpg.add_input_text(tag="activity_log", multiline=True, height=300, 
                         readonly=True, width=-1)
    
    def create_graph_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∞ —Å–µ—Ç–∏"""
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        with dpg.group(horizontal=True):
            dpg.add_button(label="üîÑ Refresh", callback=self.update_graph_display)
            dpg.add_button(label="üßπ Clear", callback=self.clear_graph)
            dpg.add_button(label="üíæ Export", callback=self.export_graph)
        
        # –õ–µ–≥–µ–Ω–¥–∞
        with dpg.collapsing_header(label="Legend", default_open=True):
            with dpg.table(header_row=False):
                dpg.add_table_column()
                dpg.add_table_column()
                
                legends = [
                    ("üéØ", "Initial Target"),
                    ("üåê", "Subdomain"), 
                    ("üíª", "Active Host"),
                    ("üîì", "Open Ports"),
                    ("üî¥", "Vulnerability"),
                    ("üí•", "Exploitation")
                ]
                
                for icon, text in legends:
                    with dpg.table_row():
                        dpg.add_text(icon)
                        dpg.add_text(text)
        
        # –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∞
        with dpg.child_window(tag="graph_container", height=600, border=True):
            with dpg.drawlist(tag="graph_canvas", width=-1, height=-1):
                pass
    
    def create_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with dpg.group(horizontal=True):
            # –î–µ—Ä–µ–≤–æ —É–∑–ª–æ–≤
            with dpg.child_window(width=400):
                dpg.add_text("Discovered Nodes:")
                dpg.add_tree_node(tag="nodes_tree", label="Network (0 nodes)", default_open=True)
            
            # –î–µ—Ç–∞–ª–∏
            with dpg.child_window():
                dpg.add_text("Node Details:")
                dpg.add_input_text(tag="node_details", multiline=True, height=500, 
                                 readonly=True, width=-1)
    
    def create_settings_window(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with dpg.window(tag="settings_window", label="Settings", 
                       width=600, height=400, show=False):
            dpg.add_text("Engine Settings")
            dpg.add_button(label="Close", callback=lambda: dpg.hide_item("settings_window"))
    
    def quick_start_scan(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        target = dpg.get_value("quick_target")
        if not target:
            self.add_log("‚ùå Enter target first!")
            return
        
        self.add_log(f"üöÄ Starting scan: {target}")
        
        try:
            if hasattr(self.engine, 'add_initial_target'):
                self.engine.add_initial_target(target)
            
            if hasattr(self.engine, 'start_scan'):
                if self.engine.start_scan():
                    self.is_scanning = True
                    dpg.hide_item("quick_scan_btn")
                    dpg.show_item("quick_stop_btn")
                    self.add_log("‚úÖ Scan started!")
        except Exception as e:
            self.add_log(f"‚ùå Error: {e}")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if self.is_scanning and hasattr(self.engine, 'stop_scan'):
                self.engine.stop_scan()
                self.is_scanning = False
                dpg.show_item("quick_scan_btn")
                dpg.hide_item("quick_stop_btn")
                self.add_log("‚èπÔ∏è Scan stopped")
        except Exception as e:
            self.add_log(f"‚ùå Error stopping: {e}")
    
    def start_scan(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        targets = dpg.get_value("target_input")
        if not targets:
            self.add_log("‚ùå Enter targets!")
            return
        
        target_list = [t.strip() for t in targets.split('\n') if t.strip()]
        self.add_log(f"üéØ Starting advanced scan: {len(target_list)} targets")
        
        try:
            if hasattr(self.engine, 'add_initial_target'):
                for target in target_list:
                    self.engine.add_initial_target(target)
            
            if hasattr(self.engine, 'start_scan'):
                if self.engine.start_scan():
                    self.is_scanning = True
                    self.add_log("‚úÖ Advanced scan started!")
        except Exception as e:
            self.add_log(f"‚ùå Error: {e}")
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞ - –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î"""
        try:
            self.logger.info(f"GUI event: {event_type}")
            
            if event_type == 'node_added':
                self.process_node(data, "üéØ Added")
            elif event_type == 'node_discovered':
                self.process_node(data, "üîç Discovered")
            elif event_type == 'module_results':
                self.process_module_results(data)
            elif event_type == 'scan_completed':
                self.add_log("‚úÖ Scan completed")
                self.is_scanning = False
                dpg.show_item("quick_scan_btn")
                dpg.hide_item("quick_stop_btn")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.update_ui()
            
        except Exception as e:
            self.logger.error(f"Error handling event: {e}")
    
    def process_node(self, scan_node, log_prefix: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ScanNode –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä–∞—Ñ"""
        try:
            if not hasattr(scan_node, 'node_id'):
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
            self.all_nodes[scan_node.node_id] = scan_node
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞
            node_data = self.scan_node_to_dict(scan_node)
            self.add_log(f"{log_prefix}: {node_data.get('data', 'Unknown')}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä–∞—Ñ
            graph_node_id = self.graph.add_node(node_data)
            if graph_node_id != -1:
                self.graph_nodes[scan_node.node_id] = graph_node_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                source_id = getattr(scan_node, 'source', None)
                if source_id and source_id in self.graph_nodes:
                    source_graph_id = self.graph_nodes[source_id]
                    edge_type = self.get_edge_type(node_data)
                    self.graph.add_edge(source_graph_id, graph_node_id, edge_type)
                    
        except Exception as e:
            self.logger.error(f"Error processing node: {e}")
    
    def process_module_results(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥—É–ª—è"""
        try:
            self.add_log("‚öôÔ∏è Module results")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            task = results.get('task')
            if task and hasattr(task, 'node_id'):
                self.process_node(task, "üìä Processed")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
            if 'open_ports' in results:
                for ip, ports in results['open_ports'].items():
                    if ports:
                        self.add_log(f"üîì Ports found on {ip}: {ports}")
                        self.create_ports_node(ip, ports)
                        
        except Exception as e:
            self.logger.error(f"Error processing module results: {e}")
    
    def scan_node_to_dict(self, scan_node) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ScanNode –≤ —Å–ª–æ–≤–∞—Ä—å"""
        try:
            node_type = getattr(scan_node, 'type', 'unknown')
            if hasattr(node_type, 'value'):
                node_type = node_type.value
            
            data = getattr(scan_node, 'data', 'Unknown')
            module = getattr(scan_node, 'module', 'unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            vis_type = 'unknown'
            if node_type == 'initial_target':
                vis_type = 'initial_target'
            elif node_type == 'subdomain':
                vis_type = 'subdomain'
            elif node_type == 'active_host':
                vis_type = 'active_host'
            elif 'port' in module:
                vis_type = 'open_ports'
            elif 'vulnerability' in module:
                vis_type = 'vulnerability'
            
            return {
                'type': vis_type,
                'data': data,
                'source': getattr(scan_node, 'source', None),
                'module': module
            }
        except Exception as e:
            self.logger.error(f"Error converting node: {e}")
            return {'type': 'unknown', 'data': 'Error'}
    
    def create_ports_node(self, ip: str, ports: List):
        """–°–æ–∑–¥–∞—Ç—å —É–∑–µ–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        try:
            port_data = {
                'type': 'open_ports',
                'data': f"{ip}:{len(ports)} ports",
                'ports': ports,
                'ip': ip
            }
            
            port_node_id = self.graph.add_node(port_data)
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ö–æ—Å—Ç–æ–º
            for engine_id, graph_id in self.graph_nodes.items():
                node = self.graph.nodes.get(graph_id)
                if node and node.get('data') == ip:
                    self.graph.add_edge(graph_id, port_node_id, 'port')
                    break
                    
        except Exception as e:
            self.logger.error(f"Error creating ports node: {e}")
    
    def get_edge_type(self, node_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–≤—è–∑–∏"""
        node_type = node_data.get('type', '')
        module = node_data.get('module', '')
        
        if node_type == 'subdomain':
            return 'dns'
        elif 'port' in module:
            return 'port'
        elif 'vulnerability' in module:
            return 'vulnerability'
        else:
            return 'normal'
    
    def update_ui(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.update_statistics()
        self.update_graph_display()
        self.update_nodes_tree()
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            nodes_count = len(self.graph.nodes)
            hosts_count = sum(1 for n in self.graph.nodes.values() 
                            if n['type'] in ['initial_target', 'active_host'])
            services_count = sum(1 for n in self.graph.nodes.values() 
                               if n['type'] == 'service')
            vulns_count = sum(1 for n in self.graph.nodes.values() 
                            if n['type'] == 'vulnerability')
            
            dpg.set_value("stat_nodes", f"Nodes: {nodes_count}")
            dpg.set_value("stat_hosts", f"Hosts: {hosts_count}")
            dpg.set_value("stat_services", f"Services: {services_count}")
            dpg.set_value("stat_vulns", f"Vulnerabilities: {vulns_count}")
            
        except Exception as e:
            self.logger.error(f"Error updating stats: {e}")
    
    def update_graph_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞"""
        try:
            if dpg.does_item_exist("graph_canvas"):
                dpg.delete_item("graph_canvas", children_only=True)
            
            width = dpg.get_item_width("graph_container")
            height = dpg.get_item_height("graph_container")
            self.graph.draw(width - 20, height - 20)
            
        except Exception as e:
            self.logger.error(f"Error updating graph: {e}")
    
    def update_nodes_tree(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ —É–∑–ª–æ–≤"""
        try:
            if not dpg.does_item_exist("nodes_tree"):
                return
            
            dpg.delete_item("nodes_tree", children_only=True)
            dpg.set_value("nodes_tree", f"Network ({len(self.graph.nodes)} nodes)")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            by_type = {}
            for node_id, node in self.graph.nodes.items():
                node_type = node['type']
                if node_type not in by_type:
                    by_type[node_type] = []
                by_type[node_type].append(node)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ
            for node_type, nodes in by_type.items():
                with dpg.tree_node(label=f"{node_type} ({len(nodes)})", parent="nodes_tree"):
                    for node in nodes:
                        with dpg.tree_node(label=node['label']):
                            details = self.get_node_details(node)
                            dpg.add_text(details)
                            
        except Exception as e:
            self.logger.error(f"Error updating tree: {e}")
    
    def get_node_details(self, node: Dict) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞"""
        details = []
        details.append(f"Type: {node['type']}")
        details.append(f"Data: {node['data']}")
        
        if 'ports' in node.get('data', {}):
            details.append(f"Ports: {node['data']['ports']}")
        
        return "\n".join(details)
    
    def add_log(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            current = dpg.get_value("activity_log") or ""
            timestamp = datetime.now().strftime("%H:%M:%S")
            new_log = f"[{timestamp}] {message}\n"
            dpg.set_value("activity_log", current + new_log)
            dpg.focus_item("activity_log")
        except Exception as e:
            self.logger.error(f"Error adding log: {e}")
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"""
        try:
            self.graph.clear()
            self.all_nodes.clear()
            self.graph_nodes.clear()
            dpg.set_value("activity_log", "")
            self.update_ui()
            self.add_log("üßπ All cleared")
        except Exception as e:
            self.add_log(f"‚ùå Clear error: {e}")
    
    def clear_graph(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ"""
        self.graph.clear()
        self.update_graph_display()
        self.add_log("üó∫Ô∏è Graph cleared")
    
    def export_graph(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"network_map_{timestamp}.json"
            
            data = {
                'nodes': list(self.graph.nodes.values()),
                'edges': self.graph.edges,
                'export_time': timestamp
            }
            
            with open(filename, 'w') as f:
                json.dump(data, f, indent=2)
            self.add_log(f"üíæ Exported to {filename}")
        except Exception as e:
            self.add_log(f"‚ùå Export error: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.logger.info("üöÄ Starting GUI...")
            while dpg.is_dearpygui_running():
                dpg.render_dearpygui_frame()
            self.destroy()
        except Exception as e:
            self.logger.error(f"‚ùå GUI error: {e}")
            raise
    
    def destroy(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI"""
        try:
            self.logger.info("üßπ Cleaning up GUI...")
            dpg.destroy_context()
            self.logger.info("‚úÖ GUI destroyed")
        except Exception as e:
            self.logger.error(f"‚ùå Destroy error: {e}")
