"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ RapidRecon - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—è–º–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional
import logging
import traceback
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from gui.network_tree import NetworkTree
from gui.hosts_table import HostsTable

class ObsidianTheme:
    """–¢–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Obsidian"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as obsidian_theme:
            colors = {
                'bg_primary': [18, 18, 24],
                'bg_secondary': [28, 28, 36],
                'bg_tertiary': [38, 38, 48],
                'accent_primary': [123, 97, 255],
                'accent_secondary': [86, 156, 214],
                'text_primary': [220, 220, 220],
                'text_secondary': [150, 150, 160],
                'text_muted': [100, 100, 110],
                'success': [72, 199, 116],
                'warning': [255, 179, 64],
                'error': [255, 92, 87],
                'border': [60, 60, 70]
            }
            
            with dpg.theme_component(dpg.mvAll):
                dpg.add_theme_color(dpg.mvThemeCol_WindowBg, colors['bg_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Text, colors['text_primary'])
                dpg.add_theme_color(dpg.mvThemeCol_Border, colors['border'])
                dpg.add_theme_style(dpg.mvStyleVar_WindowRounding, 8)
                dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 6)
            
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, colors['bg_tertiary'])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, colors['accent_primary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 4)
            
            with dpg.theme_component(dpg.mvInputText):
                dpg.add_theme_color(dpg.mvThemeCol_FrameBg, colors['bg_secondary'])
                dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 8, 6)
        
        return obsidian_theme

class DangerTheme:
    """–¢–µ–º–∞ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as danger_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 60, 60, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 80, 80, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return danger_theme

class WarningTheme:
    """–¢–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as warning_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [255, 179, 64, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [255, 199, 84, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return warning_theme

class SuccessTheme:
    """–¢–µ–º–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    @staticmethod
    def setup_theme():
        with dpg.theme() as success_theme:
            with dpg.theme_component(dpg.mvButton):
                dpg.add_theme_color(dpg.mvThemeCol_Button, [72, 199, 116, 200])
                dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [92, 219, 136, 255])
                dpg.add_theme_color(dpg.mvThemeCol_Text, [255, 255, 255])
        return success_theme

class MainWindow:
    """
    –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RapidRecon —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –º–æ–¥—É–ª—è–º–∏
    """
    
    def __init__(self, engine, module_manager):
        self.engine = engine
        self.module_manager = module_manager
        self.logger = logging.getLogger('RapidRecon.GUI')
        
        # –ú–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.network_tree = NetworkTree()
        self.hosts_table = HostsTable()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_scanning = False
        self.is_paused = False
        self.current_scan_level = "‚ö° Normal"
        self.selected_targets = set()
        
        # –î–∞–Ω–Ω—ã–µ
        self.hosts_data = {}
        self.nodes_data = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
        self.initialize_gui()
        
        self.logger.info("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_gui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        try:
            dpg.create_context()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º
            self.obsidian_theme = ObsidianTheme.setup_theme()
            self.danger_theme = DangerTheme.setup_theme()
            self.warning_theme = WarningTheme.setup_theme()
            self.success_theme = SuccessTheme.setup_theme()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ viewport
            dpg.create_viewport(
                title='RapidRecon ‚Ä¢ Advanced Security Scanner',
                width=1600,
                height=1000,
                min_width=1200,
                min_height=800
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.create_main_window()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–∫–∞–∑ GUI
            dpg.bind_theme(self.obsidian_theme)
            dpg.setup_dearpygui()
            dpg.show_viewport()
            dpg.set_primary_window("main_window", True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
            raise
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
        with dpg.window(
            tag="main_window",
            label="RapidRecon - Advanced Network Reconnaissance",
            width=1600,
            height=1000,
            no_move=True,
            no_resize=True,
            no_collapse=True,
            no_close=True
        ):
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with dpg.child_window(tag="sidebar", width=300, border=False):
                self.create_sidebar()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
            with dpg.group(horizontal=True, width=-1, height=-1):
                with dpg.child_window(tag="content_area", width=-1, border=False):
                    self.create_content_area()
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –õ–æ–≥–æ—Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å
        with dpg.group():
            dpg.add_spacer(height=20)
            dpg.add_text("RapidRecon", color=[123, 97, 255])
            dpg.add_text("Advanced Security Scanner", color=[150, 150, 160])
            dpg.add_separator()
            
            # –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("Status:", color=[150, 150, 160])
                dpg.add_text("Ready", tag="scan_status", color=[72, 199, 116])
        
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
        with dpg.collapsing_header(label="‚ö° Quick Launch", default_open=True):
            dpg.add_text("Primary Target:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="quick_target_input", 
                hint="example.com / 192.168.1.1", 
                width=-1
            )
            
            dpg.add_text("Scan Intensity:", color=[150, 150, 160])
            dpg.add_combo(
                tag="scan_level",
                items=["üöÄ Stealth", "‚ö° Normal", "üí• Aggressive", "üî• Full Attack", "üíÄ Pentest"],
                default_value="‚ö° Normal",
                width=-1,
                callback=self._on_scan_level_change
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with dpg.group(horizontal=True):
                start_btn = dpg.add_button(
                    label="üéØ Start",
                    tag="quick_start_btn",
                    width=90,
                    callback=self.quick_start_scan
                )
                dpg.bind_item_theme(start_btn, self.success_theme)
                
                pause_btn = dpg.add_button(
                    label="‚è∏Ô∏è Pause",
                    tag="quick_pause_btn", 
                    width=90,
                    callback=self.pause_scan,
                    show=False
                )
                dpg.bind_item_theme(pause_btn, self.warning_theme)
            
            with dpg.group(horizontal=True):
                resume_btn = dpg.add_button(
                    label="‚ñ∂Ô∏è Resume",
                    tag="quick_resume_btn",
                    width=90,
                    callback=self.resume_scan,
                    show=False
                )
                dpg.bind_item_theme(resume_btn, self.success_theme)
                
                stop_btn = dpg.add_button(
                    label="‚èπÔ∏è Stop",
                    tag="quick_stop_btn",
                    width=90,
                    callback=self.stop_scan,
                    show=False
                )
                dpg.bind_item_theme(stop_btn, self.danger_theme)
        
        # –ú–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        with dpg.collapsing_header(label="üîß Modules & Capabilities", default_open=True):
            dpg.add_text("Active Modules:", color=[150, 150, 160])
            
            modules = [
                ("‚úÖ", "Ping Scanner", [200, 200, 200]),
                ("‚úÖ", "Port Scanner", [200, 200, 200]),
                ("‚úÖ", "Service Detector", [200, 200, 200]),
                ("‚úÖ", "Subdomain Scanner", [200, 200, 200]),
                ("üî¥", "Vulnerability Scanner", [255, 100, 100]),
                ("üíÄ", "Exploitation Engine", [255, 60, 60]),
                ("üü°", "Lateral Movement", [255, 165, 0])
            ]
            
            for icon, name, color in modules:
                with dpg.group(horizontal=True):
                    dpg.add_text(icon, color=color)
                    dpg.add_text(name, color=color)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        with dpg.collapsing_header(label="üìà Live Statistics", default_open=True):
            dpg.add_text("Network Discovery:", color=[150, 150, 160])
            dpg.add_text("Nodes: 0", tag="stat_nodes")
            dpg.add_text("Hosts: 0", tag="stat_hosts")
            dpg.add_text("Services: 0", tag="stat_services")
            dpg.add_text("Ports: 0", tag="stat_ports")
            
            dpg.add_text("Security Findings:", color=[150, 150, 160])
            dpg.add_text("Vulnerabilities: 0", tag="stat_vulns", color=[255, 100, 100])
            dpg.add_text("Exploits: 0", tag="stat_exploits", color=[255, 60, 60])
            dpg.add_text("Lateral: 0", tag="stat_lateral", color=[255, 165, 0])
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        with dpg.collapsing_header(label="üöÄ Quick Actions", default_open=True):
            dpg.add_button(
                label="üåê View Network Tree", 
                width=-1,
                callback=lambda: dpg.set_value("main_tabs", "tree_tab")
            )
            dpg.add_button(
                label="üìä View Hosts Table",
                width=-1, 
                callback=lambda: dpg.set_value("main_tabs", "table_tab")
            )
            dpg.add_button(
                label="üîç Scan for Vulnerabilities",
                width=-1,
                callback=self.scan_vulnerabilities
            )
            dpg.add_button(
                label="üí• Start Exploitation", 
                width=-1,
                callback=self.start_exploitation
            )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        with dpg.group():
            dpg.add_separator()
            dpg.add_button(
                label="‚öôÔ∏è Engine Settings", 
                width=-1, 
                callback=self.show_settings
            )
            dpg.add_button(
                label="üì§ Export All Data", 
                width=-1, 
                callback=self.export_all_data
            )
            dpg.add_button(
                label="üßπ Clear Everything", 
                width=-1, 
                callback=self.clear_everything
            )
    
    def create_content_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –º–æ–¥—É–ª–µ–π"""
        with dpg.tab_bar(tag="main_tabs"):
            # 1. –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏
            with dpg.tab(label="üåê Network Tree", tag="tree_tab"):
                self.create_network_tree_tab()
            
            # 2. –í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤
            with dpg.tab(label="üìä Hosts Table", tag="table_tab"):
                self.create_hosts_table_tab()
            
            # 3. –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope
            with dpg.tab(label="üéØ Scope Manager", tag="scope_tab"):
                self.create_scope_manager_tab()
            
            # 4. –í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            with dpg.tab(label="üî¥ Vulnerabilities", tag="vulns_tab"):
                self.create_vulnerabilities_tab()
            
            # 5. –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            with dpg.tab(label="üí• Exploitation", tag="exploit_tab"):
                self.create_exploitation_tab()
            
            # 6. –í–∫–ª–∞–¥–∫–∞ lateral movement
            with dpg.tab(label="üîÑ Lateral Movement", tag="lateral_tab"):
                self.create_lateral_movement_tab()
            
            # 7. –í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
            with dpg.tab(label="üìã Reports", tag="reports_tab"):
                self.create_reports_tab()
    
    def create_network_tree_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Tree", 
                    callback=self.refresh_network_tree
                )
                dpg.add_button(
                    label="üìä Statistics",
                    callback=self.show_network_statistics
                )
                dpg.add_button(
                    label="üíæ Export Tree", 
                    callback=self.export_network_tree
                )
            
            # –î–µ—Ä–µ–≤–æ —Å–µ—Ç–∏
            self.network_tree_panel = self.network_tree.create_tree_panel("tree_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∑–ª–æ–≤
            self.network_tree.set_node_select_callback(self._on_node_select)
    
    def create_hosts_table_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤"""
        with dpg.group():
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Refresh Table",
                    callback=self.refresh_hosts_table
                )
                dpg.add_button(
                    label="üîç Scan Selected",
                    callback=self.scan_selected_hosts
                )
                dpg.add_button(
                    label="üéØ Add to Scope",
                    callback=self.add_selected_to_scope
                )
                dpg.add_button(
                    label="üíæ Export CSV",
                    callback=self.export_hosts_csv
                )
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table_panel = self.hosts_table.create_table_panel("table_tab")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–æ–≤
            self.hosts_table.set_host_select_callback(self._on_host_select)
    
    def create_scope_manager_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope"""
        with dpg.group(horizontal=True):
            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scope
            with dpg.child_window(width=400):
                dpg.add_text("üéØ Scope Configuration", color=[123, 97, 255])
                dpg.add_separator()
                
                dpg.add_text("Allowed IP Ranges:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_ips",
                    hint="192.168.1.0/24, 10.0.0.0/8...",
                    multiline=True,
                    height=80,
                    width=-1
                )
                
                dpg.add_text("Allowed Domains:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_domains", 
                    hint="example.com, *.test.com...",
                    multiline=True,
                    height=80,
                    width=-1
                )
                
                dpg.add_text("Domain Suffixes:", color=[150, 150, 160])
                dpg.add_input_text(
                    tag="scope_suffixes",
                    hint=".com, .org, .local...", 
                    multiline=True,
                    height=60,
                    width=-1
                )
                
                with dpg.group(horizontal=True):
                    dpg.add_button(
                        label="üíæ Save Scope",
                        callback=self.save_scope_settings
                    )
                    dpg.add_button(
                        label="üîÑ Apply Scope",
                        callback=self.apply_scope_settings
                    )
            
            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ scope
            with dpg.child_window():
                dpg.add_text("üìã In-Scope Targets", color=[123, 97, 255])
                dpg.add_separator()
                
                dpg.add_text("Discovered in Scope:", color=[150, 150, 160])
                dpg.add_listbox(
                    tag="in_scope_targets",
                    items=[],
                    num_items=15,
                    width=-1
                )
                
                with dpg.group(horizontal=True):
                    dpg.add_button(
                        label="üîÑ Refresh List",
                        callback=self.refresh_scope_list
                    )
                    dpg.add_button(
                        label="üßπ Clear Out-of-Scope",
                        callback=self.clear_out_of_scope
                    )
    
    def create_vulnerabilities_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        with dpg.group():
            dpg.add_text("üî¥ Vulnerability Scanner", color=[255, 100, 100])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Scan Configuration")
                    dpg.add_checkbox(tag="vuln_scan_ports", label="Scan Open Ports", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_services", label="Service Detection", default_value=True)
                    dpg.add_checkbox(tag="vuln_scan_web", label="Web Application Scan", default_value=True)
                    
                    dpg.add_text("Intensity Level:")
                    dpg.add_combo(
                        items=["Low", "Medium", "High", "Aggressive"],
                        default_value="Medium",
                        width=-1
                    )
                    
                    vuln_btn = dpg.add_button(
                        label="üîç Start Vulnerability Scan",
                        width=-1,
                        callback=self.start_vulnerability_scan
                    )
                    dpg.bind_item_theme(vuln_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Discovered Vulnerabilities")
                    dpg.add_listbox(
                        tag="vulnerabilities_list",
                        items=[],
                        num_items=12,
                        width=-1
                    )
                    
                    dpg.add_text("Vulnerability Details:")
                    dpg.add_input_text(
                        tag="vuln_details",
                        multiline=True,
                        height=200,
                        readonly=True,
                        width=-1
                    )
    
    def create_exploitation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        with dpg.group():
            dpg.add_text("üí• Exploitation Engine", color=[255, 60, 60])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=400):
                    dpg.add_text("Target Selection")
                    dpg.add_listbox(
                        tag="exploit_targets",
                        items=[],
                        num_items=8,
                        width=-1
                    )
                    dpg.add_button(
                        label="üéØ Load Vulnerable Targets",
                        callback=self.load_vulnerable_targets
                    )
                    
                    dpg.add_text("Exploitation Options")
                    dpg.add_checkbox(tag="auto_exploit", label="Auto-Exploit", default_value=False)
                    dpg.add_checkbox(tag="lateral_movement", label="Lateral Movement", default_value=True)
                    dpg.add_checkbox(tag="persistence", label="Establish Persistence", default_value=True)
                    
                    exploit_btn = dpg.add_button(
                        label="üí• Start Exploitation",
                        width=-1,
                        callback=self.start_exploitation_engine
                    )
                    dpg.bind_item_theme(exploit_btn, self.danger_theme)
                
                with dpg.child_window():
                    dpg.add_text("Exploitation Results")
                    dpg.add_input_text(
                        tag="exploitation_log",
                        multiline=True,
                        height=400,
                        readonly=True,
                        width=-1
                    )
                    
                    with dpg.group(horizontal=True):
                        dpg.add_button(label="üìã Copy Results")
                        dpg.add_button(label="üíæ Export Log")
    
    def create_lateral_movement_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ lateral movement"""
        with dpg.group():
            dpg.add_text("üîÑ Lateral Movement", color=[255, 165, 0])
            dpg.add_separator()
            dpg.add_text("Lateral Movement Module - Coming Soon", color=[150, 150, 160])
            dpg.add_text("This module will enable moving through the network after initial compromise.")
    
    def create_reports_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        with dpg.group():
            dpg.add_text("üìã Reporting Engine", color=[86, 156, 214])
            dpg.add_separator()
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=300):
                    dpg.add_text("Report Types")
                    dpg.add_button(label="üìä Executive Summary", width=-1)
                    dpg.add_button(label="üîç Technical Details", width=-1)
                    dpg.add_button(label="üî¥ Vulnerability Report", width=-1)
                    dpg.add_button(label="üí• Exploitation Report", width=-1)
                    dpg.add_button(label="üåê Full Network Report", width=-1)
                    
                    dpg.add_separator()
                    dpg.add_text("Export Format:")
                    dpg.add_combo(
                        items=["PDF", "HTML", "JSON", "CSV", "Markdown"],
                        default_value="PDF",
                        width=-1
                    )
                    
                    dpg.add_button(
                        label="üíæ Generate Report",
                        width=-1,
                        callback=self.generate_report
                    )
                
                with dpg.child_window():
                    dpg.add_text("Report Preview")
                    dpg.add_input_text(
                        tag="report_preview",
                        multiline=True,
                        height=500,
                        readonly=True,
                        width=-1
                    )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
    
    def _on_scan_level_change(self, sender, app_data):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.current_scan_level = app_data
        self.add_to_log(f"üéõÔ∏è Scan intensity set to: {app_data}")
    
    def _on_node_select(self, node_id):
        """–í—ã–±–æ—Ä —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        self.add_to_log(f"üîç Selected node: {node_id}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª–µ
    
    def _on_host_select(self, ip):
        """–í—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.add_to_log(f"üîç Selected host: {ip}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ö–æ—Å—Ç–∞
    
    def quick_start_scan(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        target = dpg.get_value("quick_target_input")
        if not target:
            self.add_to_log("‚ùå Please enter a target first!")
            return
        
        self.add_to_log(f"üöÄ Starting {self.current_scan_level} scan for: {target}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.is_scanning = True
        self.is_paused = False
        dpg.set_value("scan_status", "Scanning")
        dpg.configure_item("scan_status", color=[255, 179, 64])
        
        dpg.hide_item("quick_start_btn")
        dpg.show_item("quick_pause_btn")
        dpg.hide_item("quick_resume_btn")
        dpg.show_item("quick_stop_btn")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if hasattr(self.engine, 'add_initial_target'):
            self.engine.add_initial_target(target)
        
        if hasattr(self.engine, 'start_scan'):
            self.engine.start_scan()
    
    def pause_scan(self):
        """–ü–∞—É–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_paused = True
        dpg.set_value("scan_status", "Paused")
        dpg.configure_item("scan_status", color=[255, 179, 64])
        
        dpg.hide_item("quick_pause_btn")
        dpg.show_item("quick_resume_btn")
        
        self.add_to_log("‚è∏Ô∏è Scan paused")
    
    def resume_scan(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_paused = False
        dpg.set_value("scan_status", "Scanning")
        dpg.configure_item("scan_status", color=[255, 179, 64])
        
        dpg.hide_item("quick_resume_btn")
        dpg.show_item("quick_pause_btn")
        
        self.add_to_log("‚ñ∂Ô∏è Scan resumed")
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_scanning = False
        self.is_paused = False
        dpg.set_value("scan_status", "Ready")
        dpg.configure_item("scan_status", color=[72, 199, 116])
        
        dpg.show_item("quick_start_btn")
        dpg.hide_item("quick_pause_btn")
        dpg.hide_item("quick_resume_btn")
        dpg.hide_item("quick_stop_btn")
        
        self.add_to_log("‚èπÔ∏è Scan stopped")
    
    def scan_vulnerabilities(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.add_to_log("üîç Starting vulnerability scan...")
        dpg.set_value("main_tabs", "vulns_tab")
    
    def start_exploitation(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üí• Starting exploitation engine...")
        dpg.set_value("main_tabs", "exploit_tab")
    
    def refresh_network_tree(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        self.network_tree.update_tree(self.nodes_data, self.hosts_data)
        self.add_to_log("üîÑ Network tree refreshed")
    
    def refresh_hosts_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤"""
        self.hosts_table.update_table(self.hosts_data)
        self.add_to_log("üîÑ Hosts table refreshed")
    
    def show_network_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏"""
        self.add_to_log("üìä Showing network statistics")
    
    def export_network_tree(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        self.add_to_log("üíæ Exporting network tree")
    
    def scan_selected_hosts(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤"""
        self.add_to_log("üîç Scanning selected hosts")
    
    def add_selected_to_scope(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ scope"""
        self.add_to_log("üéØ Adding selected hosts to scope")
    
    def export_hosts_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤ –≤ CSV"""
        self.add_to_log("üíæ Exporting hosts to CSV")
    
    def save_scope_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope"""
        self.add_to_log("üíæ Scope settings saved")
    
    def apply_scope_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope"""
        self.add_to_log("üîÑ Scope settings applied")
    
    def refresh_scope_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ scope"""
        self.add_to_log("üîÑ Scope list refreshed")
    
    def clear_out_of_scope(self):
        """–û—á–∏—Å—Ç–∫–∞ out-of-scope —Ü–µ–ª–µ–π"""
        self.add_to_log("üßπ Cleared out-of-scope targets")
    
    def start_vulnerability_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.add_to_log("üîç Starting vulnerability scan")
    
    def load_vulnerable_targets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—è–∑–≤–∏–º—ã—Ö —Ü–µ–ª–µ–π"""
        self.add_to_log("üéØ Loading vulnerable targets")
    
    def start_exploitation_engine(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
        self.add_to_log("üí• Starting exploitation engine")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.add_to_log("üìã Generating report")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.add_to_log("‚öôÔ∏è Showing engine settings")
    
    def export_all_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.add_to_log("üì§ Exporting all data")
    
    def clear_everything(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"""
        self.nodes_data.clear()
        self.hosts_data.clear()
        self.network_tree.clear()
        self.hosts_table.clear()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = ["stat_nodes", "stat_hosts", "stat_services", "stat_ports", "stat_vulns", "stat_exploits", "stat_lateral"]
        for stat in stats:
            dpg.set_value(stat, f"{stat.split('_')[1].title()}: 0")
        
        self.add_to_log("üßπ Everything cleared")
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    
    def handle_engine_event(self, event_type: str, data: Any = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞"""
        try:
            self.logger.info(f"GUI received event: {event_type}")
            
            if event_type in ['node_added', 'node_discovered', 'module_results']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if hasattr(self.engine, 'discovered_nodes'):
                    self.nodes_data = self.engine.discovered_nodes
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.network_tree.update_tree(self.nodes_data, self.hosts_data)
                self.hosts_table.update_table(self.hosts_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_statistics()
                
        except Exception as e:
            self.logger.error(f"Error handling engine event: {e}")
    
    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            nodes_count = len(self.nodes_data)
            hosts_count = len(self.hosts_data)
            services_count = sum(1 for node in self.nodes_data.values() if node.get('type') == 'service')
            ports_count = sum(1 for node in self.nodes_data.values() if node.get('type') == 'open_ports')
            vulns_count = sum(1 for node in self.nodes_data.values() if node.get('type') == 'vulnerability')
            
            dpg.set_value("stat_nodes", f"Nodes: {nodes_count}")
            dpg.set_value("stat_hosts", f"Hosts: {hosts_count}")
            dpg.set_value("stat_services", f"Services: {services_count}")
            dpg.set_value("stat_ports", f"Ports: {ports_count}")
            dpg.set_value("stat_vulns", f"Vulnerabilities: {vulns_count}")
            
        except Exception as e:
            self.logger.error(f"Error updating statistics: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            
            while dpg.is_dearpygui_running():
                dpg.render_dearpygui_frame()
            
            self.destroy()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
    
    def destroy(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            dpg.destroy_context()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è GUI: {e}")
