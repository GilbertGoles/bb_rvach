"""
–î–µ—Ä–µ–≤–æ —Å–µ—Ç–∏ –≤ —Å—Ç–∏–ª–µ Obsidian
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional, Callable
import logging
from datetime import datetime

class NetworkTree:
    """
    –î—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤ —Å—Ç–∏–ª–µ Obsidian
    """
    
    def __init__(self):
        self.logger = logging.getLogger('RapidRecon.NetworkTree')
        self.nodes_data = {}
        self.hosts_data = {}
        self.selected_node = None
        self.on_node_select_callback = None
        
    def create_tree_panel(self, parent: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ—Ä–µ–≤–∞ —Å–µ—Ç–∏"""
        with dpg.child_window(parent=parent, border=False) as tree_panel:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            with dpg.group(horizontal=True):
                dpg.add_text("üåê Network Topology")
                dpg.add_text("(0)", tag="tree_stats", color=[150, 150, 160])
            
            # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
            with dpg.group(horizontal=True):
                dpg.add_input_text(
                    hint="Search nodes...",
                    width=-1,
                    callback=self._on_search
                )
            
            # –î–µ—Ä–µ–≤–æ —Å–µ—Ç–∏
            with dpg.child_window(height=500, border=True):
                dpg.add_tree_node(
                    tag="network_tree_root",
                    label="Discovered Infrastructure (0)",
                    default_open=True,
                    indent=10
                )
            
            # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–µ—Ä–µ–≤–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîÑ Expand All",
                    width=120,
                    callback=self._expand_all
                )
                dpg.add_button(
                    label="üìä Statistics", 
                    width=120,
                    callback=self._show_statistics
                )
        
        return tree_panel
    
    def update_tree(self, nodes: Dict, hosts: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.nodes_data = nodes
            self.hosts_data = hosts
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –¥–µ—Ä–µ–≤–æ
            if dpg.does_item_exist("network_tree_root"):
                dpg.delete_item("network_tree_root", children_only=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            total_nodes = len(nodes)
            dpg.set_value("tree_stats", f"({total_nodes})")
            dpg.configure_item("network_tree_root", label=f"Discovered Infrastructure ({total_nodes})")
            
            if not nodes:
                dpg.add_text("No nodes discovered yet...", parent="network_tree_root")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —Ç–∏–ø–∞–º
            nodes_by_type = self._group_nodes_by_type(nodes)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self._create_category("üéØ Initial Targets", nodes_by_type.get('initial_target', []), "targets")
            self._create_category("üåê Subdomains", nodes_by_type.get('subdomain', []), "subdomains") 
            self._create_category("üíª Active Hosts", nodes_by_type.get('active_host', []), "hosts")
            self._create_category("üîì Open Ports", nodes_by_type.get('open_ports', []), "ports")
            self._create_category("‚öôÔ∏è Services", nodes_by_type.get('service', []), "services")
            self._create_category("üî¥ Vulnerabilities", nodes_by_type.get('vulnerability', []), "vulns")
            self._create_category("üí• Exploitation", nodes_by_type.get('exploitation', []), "exploits")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç—ã –∏–∑ host manager
            if hosts:
                self._create_hosts_category(hosts)
                
        except Exception as e:
            self.logger.error(f"Error updating tree: {e}")
    
    def _group_nodes_by_type(self, nodes: Dict) -> Dict[str, List]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–∑–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
        grouped = {}
        for node_id, node in nodes.items():
            node_type = node.get('type', 'unknown')
            if node_type not in grouped:
                grouped[node_type] = []
            grouped[node_type].append(node)
        return grouped
    
    def _create_category(self, label: str, nodes: List, tag_suffix: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–æ–≤"""
        if not nodes:
            return
            
        with dpg.tree_node(
            label=f"{label} ({len(nodes)})", 
            parent="network_tree_root",
            tag=f"cat_{tag_suffix}"
        ):
            for node in nodes:
                self._create_node_item(node)
    
    def _create_hosts_category(self, hosts: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ—Å—Ç–æ–≤"""
        with dpg.tree_node(
            label=f"üè† Hosts ({len(hosts)})",
            parent="network_tree_root", 
            tag="cat_hosts_manager"
        ):
            for ip, host in hosts.items():
                with dpg.tree_node(label=f"üì° {ip}"):
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ
                    dpg.add_text(f"Hostname: {host.get('hostname', 'Unknown')}")
                    dpg.add_text(f"Status: {host.get('status', 'unknown')}")
                    dpg.add_text(f"OS: {host.get('os', 'Unknown')}")
                    dpg.add_text(f"Last Seen: {host.get('last_seen', 'Unknown')}")
                    
                    # –ü–æ—Ä—Ç—ã
                    ports = host.get('ports', [])
                    if ports:
                        with dpg.tree_node(label=f"üîì Ports ({len(ports)})"):
                            for port in ports:
                                dpg.add_text(f"Port {port}")
                    
                    # –°–µ—Ä–≤–∏—Å—ã
                    services = host.get('services', [])
                    if services:
                        with dpg.tree_node(label=f"‚öôÔ∏è Services ({len(services)})"):
                            for service in services:
                                dpg.add_text(service)
                    
                    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏
                    vulns = host.get('vulnerabilities', [])
                    if vulns:
                        with dpg.tree_node(label=f"üî¥ Vulnerabilities ({len(vulns)})"):
                            for vuln in vulns:
                                dpg.add_text(vuln, color=[255, 100, 100])
                    
                    # –î–µ–π—Å—Ç–≤–∏—è
                    with dpg.tree_node(label="üöÄ Actions"):
                        dpg.add_button(
                            label="üîç Scan Ports",
                            callback=lambda s, d, ip=ip: self._scan_host_ports(ip)
                        )
                        dpg.add_button(
                            label="üîé Service Detection", 
                            callback=lambda s, d, ip=ip: self._detect_services(ip)
                        )
    
    def _create_node_item(self, node: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–∑–ª–∞"""
        node_id = node.get('id', 'unknown')
        node_type = node.get('type', 'unknown')
        label = node.get('label', 'Unknown')
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
        icons = {
            'initial_target': 'üéØ',
            'subdomain': 'üåê', 
            'active_host': 'üíª',
            'open_ports': 'üîì',
            'service': '‚öôÔ∏è',
            'vulnerability': 'üî¥',
            'exploitation': 'üí•'
        }
        
        icon = icons.get(node_type, '‚Ä¢')
        
        with dpg.tree_node(label=f"{icon} {label}", tag=f"node_{node_id}"):
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            dpg.add_text(f"Type: {node_type}")
            dpg.add_text(f"ID: {node_id}")
            
            # –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞
            data = node.get('data', {})
            if isinstance(data, dict):
                for key, value in data.items():
                    if key not in ['position', 'color', 'radius', 'icon']:
                        dpg.add_text(f"{key}: {value}")
            else:
                dpg.add_text(f"Data: {data}")
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            timestamp = node.get('timestamp')
            if timestamp:
                time_str = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
                dpg.add_text(f"Discovered: {time_str}")
            
            # –î–µ–π—Å—Ç–≤–∏—è —Å —É–∑–ª–æ–º
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üîç Details",
                    callback=lambda s, d, nid=node_id: self._show_node_details(nid)
                )
                dpg.add_button(
                    label="üéØ Add to Scope",
                    callback=lambda s, d, nid=node_id: self._add_to_scope(nid)
                )
    
    def _show_node_details(self, node_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞"""
        if self.on_node_select_callback:
            self.on_node_select_callback(node_id)
    
    def _add_to_scope(self, node_id: str):
        """–î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª –≤ scope"""
        self.logger.info(f"Adding node {node_id} to scope")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ scope
    
    def _scan_host_ports(self, ip: str):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Ö–æ—Å—Ç–∞"""
        self.logger.info(f"Scanning ports for {ip}")
    
    def _detect_services(self, ip: str):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ö–æ—Å—Ç–∞"""
        self.logger.info(f"Detecting services for {ip}")
    
    def _on_search(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞"""
        search_text = app_data.lower()
        self._filter_tree(search_text)
    
    def _filter_tree(self, search_text: str):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        if not search_text:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for i in range(dpg.get_item_children("network_tree_root", 1)):
                child = dpg.get_item_children("network_tree_root", 1)[i]
                dpg.show_item(child)
            return
        
        # –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–∞
        for i in range(dpg.get_item_children("network_tree_root", 1)):
            child = dpg.get_item_children("network_tree_root", 1)[i]
            child_label = dpg.get_item_label(child).lower()
            
            if search_text in child_label:
                dpg.show_item(child)
                # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                parent = dpg.get_item_parent(child)
                if dpg.does_item_exist(parent):
                    dpg.configure_item(parent, default_open=True)
            else:
                dpg.hide_item(child)
    
    def _expand_all(self):
        """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞"""
        def expand_recursive(item):
            dpg.configure_item(item, default_open=True)
            children = dpg.get_item_children(item, 1)
            for child in children:
                expand_recursive(child)
        
        expand_recursive("network_tree_root")
    
    def _show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏"""
        stats = self._calculate_statistics()
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if dpg.does_item_exist("stats_window"):
            dpg.delete_item("stats_window")
            
        with dpg.window(
            tag="stats_window",
            label="Network Statistics", 
            width=400,
            height=300,
            modal=True
        ):
            dpg.add_text("üìä Network Overview")
            dpg.add_separator()
            
            for category, count in stats.items():
                with dpg.group(horizontal=True):
                    dpg.add_text(f"{category}:", width=150)
                    dpg.add_text(str(count), color=[123, 97, 255])
    
    def _calculate_statistics(self) -> Dict[str, int]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏"""
        stats = {
            "Total Nodes": len(self.nodes_data),
            "Initial Targets": len([n for n in self.nodes_data.values() if n.get('type') == 'initial_target']),
            "Subdomains": len([n for n in self.nodes_data.values() if n.get('type') == 'subdomain']),
            "Active Hosts": len([n for n in self.nodes_data.values() if n.get('type') == 'active_host']),
            "Open Ports": len([n for n in self.nodes_data.values() if n.get('type') == 'open_ports']),
            "Services": len([n for n in self.nodes_data.values() if n.get('type') == 'service']),
            "Vulnerabilities": len([n for n in self.nodes_data.values() if n.get('type') == 'vulnerability']),
            "Managed Hosts": len(self.hosts_data)
        }
        return stats
    
    def set_node_select_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∑–ª–∞"""
        self.on_node_select_callback = callback
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞"""
        self.nodes_data.clear()
        self.hosts_data.clear()
        if dpg.does_item_exist("network_tree_root"):
            dpg.delete_item("network_tree_root", children_only=True)
            dpg.add_text("No nodes discovered yet...", parent="network_tree_root")
