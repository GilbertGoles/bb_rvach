"""
Scope Manager –¥–ª—è Bug Bounty - —É–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç—å—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import dearpygui.dearpygui as dpg
from typing import Dict, Any, List, Optional, Set, Callable
import logging
import json
import re
from datetime import datetime
import ipaddress

class ScopeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä scope –¥–ª—è Bug Bounty —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    """
    
    def __init__(self):
        self.logger = logging.getLogger('RapidRecon.ScopeManager')
        self.scope_data = {
            'allowed_ips': set(),
            'allowed_domains': set(),
            'domain_suffixes': set(),
            'wildcard_domains': set(),
            'excluded_ips': set(),
            'excluded_domains': set(),
            'scope_name': 'Bug Bounty Scope',
            'program_url': '',
            'platform': 'Other'
        }
        self.in_scope_targets = set()
        self.out_of_scope_targets = set()
        self.scope_violations = []
        self.on_scope_change_callback = None
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã Bug Bounty
        self.bounty_platforms = [
            "HackerOne", "Bugcrowd", "Intigriti", "YesWeHack", 
            "Open Bug Bounty", "Other"
        ]
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        self.common_suffixes = [".com", ".org", ".net", ".io", ".dev", ".app", ".cloud"]
    
    def create_scope_panel(self, parent: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scope"""
        with dpg.child_window(parent=parent, border=False) as scope_panel:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            with dpg.group(horizontal=True):
                dpg.add_text("üéØ Bug Bounty Scope")
                dpg.add_button(
                    label="üíæ Save Scope",
                    callback=self.save_scope_settings
                )
                dpg.add_button(
                    label="üì• Load Scope",
                    callback=self.load_scope_settings
                )
            
            dpg.add_separator()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è scope
            with dpg.tab_bar():
                # –í–∫–ª–∞–¥–∫–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                with dpg.tab(label="‚ö° Quick Setup"):
                    self._create_quick_setup_tab()
                
                # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                with dpg.tab(label="üîß Advanced"):
                    self._create_advanced_tab()
                
                # –í–∫–ª–∞–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                with dpg.tab(label="üì• Import"):
                    self._create_import_tab()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ scope
            self._create_scope_statistics()
            
            # –°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π scope
            self._create_violations_list()
        
        return scope_panel
    
    def _create_quick_setup_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scope"""
        with dpg.group():
            dpg.add_text("Program Information", color=[150, 150, 160])
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
            dpg.add_input_text(
                tag="scope_name",
                label="Scope Name",
                default_value="Bug Bounty Scope",
                width=-1
            )
            
            dpg.add_input_text(
                tag="program_url", 
                label="Program URL",
                hint="https://hackerone.com/...",
                width=-1
            )
            
            dpg.add_combo(
                tag="bounty_platform",
                label="Platform",
                items=self.bounty_platforms,
                default_value="Other",
                width=-1
            )
            
            dpg.add_separator()
            dpg.add_text("Scope Definition", color=[150, 150, 160])
            
            # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ scope
            dpg.add_text("Allowed Domains:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="quick_domains",
                hint="example.com, *.test.com, app.*.com...",
                multiline=True,
                height=80,
                width=-1
            )
            
            dpg.add_text("Allowed IP Ranges:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="quick_ips",
                hint="192.168.1.0/24, 10.0.0.0/8, 203.0.113.1...",
                multiline=True,
                height=60,
                width=-1
            )
            
            dpg.add_text("Domain Suffixes (Auto-add):", color=[150, 150, 160])
            with dpg.group(horizontal=True):
                dpg.add_input_text(
                    tag="domain_suffix",
                    hint=".com",
                    width=100
                )
                dpg.add_button(
                    label="Add Suffix",
                    callback=self._add_domain_suffix
                )
            
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
            dpg.add_text("Quick Suffixes:", color=[150, 150, 160])
            with dpg.group(horizontal=True, wrap=True):
                for suffix in self.common_suffixes:
                    dpg.add_button(
                        label=suffix,
                        width=60,
                        callback=lambda s, d, suf=suffix: self._quick_add_suffix(suf)
                    )
            
            dpg.add_button(
                label="üîÑ Parse and Apply Scope",
                width=-1,
                callback=self.parse_and_apply_scope
            )
    
    def _create_advanced_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scope"""
        with dpg.group():
            dpg.add_text("Advanced Scope Configuration", color=[150, 150, 160])
            
            with dpg.group(horizontal=True):
                # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
                with dpg.child_window(width=300):
                    dpg.add_text("Allowed Targets")
                    dpg.add_input_text(
                        tag="allowed_domains",
                        hint="Domains and wildcards...",
                        multiline=True,
                        height=120,
                        width=-1
                    )
                    dpg.add_input_text(
                        tag="allowed_ips",
                        hint="IPs and ranges...",
                        multiline=True,
                        height=80,
                        width=-1
                    )
                
                # –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
                with dpg.child_window(width=300):
                    dpg.add_text("Excluded Targets")
                    dpg.add_input_text(
                        tag="excluded_domains",
                        hint="Out-of-scope domains...",
                        multiline=True,
                        height=120,
                        width=-1
                    )
                    dpg.add_input_text(
                        tag="excluded_ips",
                        hint="Out-of-scope IPs...",
                        multiline=True,
                        height=80,
                        width=-1
                    )
            
            # –û–ø—Ü–∏–∏ scope
            dpg.add_text("Scope Options:", color=[150, 150, 160])
            dpg.add_checkbox(
                tag="auto_detect_suffixes",
                label="Auto-detect domain suffixes",
                default_value=True
            )
            dpg.add_checkbox(
                tag="strict_mode", 
                label="Strict mode (block out-of-scope)",
                default_value=True
            )
            dpg.add_checkbox(
                tag="log_violations",
                label="Log scope violations",
                default_value=True
            )
    
    def _create_import_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ scope"""
        with dpg.group():
            dpg.add_text("Import Scope Configuration", color=[150, 150, 160])
            
            dpg.add_text("Import from Text:", color=[150, 150, 160])
            dpg.add_input_text(
                tag="import_text",
                hint="Paste scope from bug bounty platform...",
                multiline=True,
                height=150,
                width=-1
            )
            
            dpg.add_button(
                label="üì• Import from Text",
                width=-1,
                callback=self.import_from_text
            )
            
            dpg.add_separator()
            dpg.add_text("Import from File:", color=[150, 150, 160])
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üìÅ Load JSON",
                    callback=self.load_scope_json
                )
                dpg.add_button(
                    label="üíæ Save JSON",
                    callback=self.save_scope_json
                )
                dpg.add_button(
                    label="üîÑ Load Defaults",
                    callback=self.load_default_scope
                )
    
    def _create_scope_statistics(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ scope"""
        with dpg.group():
            dpg.add_separator()
            dpg.add_text("üìä Scope Statistics", color=[123, 97, 255])
            
            with dpg.group(horizontal=True):
                with dpg.child_window(width=200):
                    dpg.add_text("In Scope:", color=[150, 150, 160])
                    dpg.add_text("Domains: 0", tag="stat_scope_domains")
                    dpg.add_text("IP Ranges: 0", tag="stat_scope_ips")
                    dpg.add_text("Suffixes: 0", tag="stat_scope_suffixes")
                
                with dpg.child_window(width=200):
                    dpg.add_text("Discovered:", color=[150, 150, 160])
                    dpg.add_text("In Scope: 0", tag="stat_in_scope")
                    dpg.add_text("Out of Scope: 0", tag="stat_out_scope")
                    dpg.add_text("Violations: 0", tag="stat_violations")
            
            dpg.add_button(
                label="üîÑ Update Statistics",
                callback=self.update_statistics
            )
    
    def _create_violations_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π scope"""
        with dpg.group():
            dpg.add_separator()
            dpg.add_text("üö® Scope Violations", color=[255, 100, 100])
            
            dpg.add_listbox(
                tag="violations_list",
                items=[],
                num_items=6,
                width=-1
            )
            
            with dpg.group(horizontal=True):
                dpg.add_button(
                    label="üßπ Clear Violations",
                    callback=self.clear_violations
                )
                dpg.add_button(
                    label="üìã Export Violations",
                    callback=self.export_violations
                )
    
    def _add_domain_suffix(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
        suffix = dpg.get_value("domain_suffix")
        if suffix and suffix not in self.scope_data['domain_suffixes']:
            self.scope_data['domain_suffixes'].add(suffix)
            self.update_statistics()
            self.add_to_log(f"‚úÖ Added domain suffix: {suffix}")
    
    def _quick_add_suffix(self, suffix: str):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
        if suffix not in self.scope_data['domain_suffixes']:
            self.scope_data['domain_suffixes'].add(suffix)
            self.update_statistics()
            self.add_to_log(f"‚úÖ Added domain suffix: {suffix}")
    
    def parse_and_apply_scope(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ scope –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–æ–º–µ–Ω—ã
            domains_text = dpg.get_value("quick_domains")
            if domains_text:
                domains = self._parse_domains(domains_text)
                self.scope_data['allowed_domains'].update(domains['domains'])
                self.scope_data['wildcard_domains'].update(domains['wildcards'])
            
            # –ü–∞—Ä—Å–∏–º IP
            ips_text = dpg.get_value("quick_ips")
            if ips_text:
                ips = self._parse_ips(ips_text)
                self.scope_data['allowed_ips'].update(ips)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.scope_data['scope_name'] = dpg.get_value("scope_name")
            self.scope_data['program_url'] = dpg.get_value("program_url")
            
            # –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
            if dpg.get_value("auto_detect_suffixes"):
                self._auto_detect_suffixes()
            
            self.update_statistics()
            self._update_ui_from_scope()
            self.add_to_log("‚úÖ Scope parsed and applied successfully")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error parsing scope: {e}")
    
    def _parse_domains(self, text: str) -> Dict[str, Set]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        domains = set()
        wildcards = set()
        
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ wildcard –¥–æ–º–µ–Ω–æ–≤
            if '*' in line:
                wildcards.add(line.lower())
            else:
                domains.add(line.lower())
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                if '.' in line:
                    suffix = '.' + line.split('.')[-1]
                    if suffix not in self.common_suffixes:
                        self.common_suffixes.append(suffix)
        
        return {'domains': domains, 'wildcards': wildcards}
    
    def _parse_ips(self, text: str) -> Set:
        """–ü–∞—Ä—Å–∏–Ω–≥ IP –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        ips = set()
        
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                if '/' in line:
                    # CIDR –¥–∏–∞–ø–∞–∑–æ–Ω
                    ipaddress.IPv4Network(line, strict=False)
                    ips.add(line)
                else:
                    # –û–¥–∏–Ω–æ—á–Ω—ã–π IP
                    ipaddress.IPv4Address(line)
                    ips.add(line)
            except (ipaddress.AddressValueError, ipaddress.NetmaskValueError):
                self.add_to_log(f"‚ö†Ô∏è Invalid IP format: {line}")
        
        return ips
    
    def _auto_detect_suffixes(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤"""
        suffixes = set()
        
        for domain in self.scope_data['allowed_domains']:
            if '.' in domain:
                parts = domain.split('.')
                if len(parts) >= 2:
                    suffix = '.' + '.'.join(parts[-2:])  # –ë–µ—Ä–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Ä–æ–≤–Ω—è
                    suffixes.add(suffix)
        
        self.scope_data['domain_suffixes'].update(suffixes)
    
    def is_in_scope(self, target: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤ scope
        
        Args:
            target: –¶–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–æ–º–µ–Ω –∏–ª–∏ IP)
            
        Returns:
            True –µ—Å–ª–∏ —Ü–µ–ª—å –≤ scope, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
        if self._is_ip(target):
            return self._is_ip_in_scope(target)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
        return self._is_domain_in_scope(target.lower())
    
    def _is_ip(self, target: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å IP –∞–¥—Ä–µ—Å–æ–º"""
        try:
            ipaddress.IPv4Address(target)
            return True
        except ipaddress.AddressValueError:
            return False
    
    def _is_ip_in_scope(self, ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ scope"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if ip in self.scope_data['excluded_ips']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP
        for allowed_ip in self.scope_data['allowed_ips']:
            if '/' in allowed_ip:
                # CIDR –¥–∏–∞–ø–∞–∑–æ–Ω
                if ipaddress.IPv4Address(ip) in ipaddress.IPv4Network(allowed_ip, strict=False):
                    return True
            else:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π IP
                if ip == allowed_ip:
                    return True
        
        return False
    
    def _is_domain_in_scope(self, domain: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ scope"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if domain in self.scope_data['excluded_domains']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if domain in self.scope_data['allowed_domains']:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ wildcard –¥–æ–º–µ–Ω–æ–≤
        for wildcard in self.scope_data['wildcard_domains']:
            if self._matches_wildcard(domain, wildcard):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º
        for suffix in self.scope_data['domain_suffixes']:
            if domain.endswith(suffix):
                return True
        
        return False
    
    def _matches_wildcard(self, domain: str, wildcard: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–º–µ–Ω–∞ wildcard —à–∞–±–ª–æ–Ω—É"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è wildcard matching
        if wildcard.startswith('*.'):
            # *.example.com
            suffix = wildcard[2:]
            return domain.endswith(suffix) or domain == suffix[1:]
        elif wildcard.endswith('.*'):
            # example.*
            prefix = wildcard[:-2]
            return domain.startswith(prefix)
        elif '*' in wildcard:
            # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (app.*.example.com)
            pattern = wildcard.replace('.', '\\.').replace('*', '.*')
            return bool(re.match(pattern, domain))
        
        return False
    
    def add_to_scope(self, target: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ scope
        
        Args:
            target: –¶–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        try:
            if self._is_ip(target):
                self.scope_data['allowed_ips'].add(target)
            else:
                self.scope_data['allowed_domains'].add(target.lower())
            
            self.update_statistics()
            return True
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error adding to scope: {e}")
            return False
    
    def remove_from_scope(self, target: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ scope
        
        Args:
            target: –¶–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        if target in self.scope_data['allowed_ips']:
            self.scope_data['allowed_ips'].remove(target)
        elif target.lower() in self.scope_data['allowed_domains']:
            self.scope_data['allowed_domains'].remove(target.lower())
        else:
            return False
        
        self.update_statistics()
        return True
    
    def log_violation(self, target: str, source: str = "unknown"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è scope"""
        violation = {
            'target': target,
            'source': source,
            'timestamp': datetime.now().isoformat(),
            'type': 'ip' if self._is_ip(target) else 'domain'
        }
        
        self.scope_violations.append(violation)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        violations_list = [f"{v['target']} ({v['source']})" for v in self.scope_violations[-10:]]
        dpg.configure_item("violations_list", items=violations_list)
        
        self.update_statistics()
        
        if dpg.get_value("log_violations"):
            self.add_to_log(f"üö® Scope violation: {target} from {source}")
    
    def save_scope_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UI
            self._update_scope_from_ui()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"scope_{self.scope_data['scope_name'].replace(' ', '_')}.json"
            with open(filename, 'w') as f:
                json.dump({
                    'scope_data': {
                        'allowed_ips': list(self.scope_data['allowed_ips']),
                        'allowed_domains': list(self.scope_data['allowed_domains']),
                        'domain_suffixes': list(self.scope_data['domain_suffixes']),
                        'wildcard_domains': list(self.scope_data['wildcard_domains']),
                        'excluded_ips': list(self.scope_data['excluded_ips']),
                        'excluded_domains': list(self.scope_data['excluded_domains']),
                        'scope_name': self.scope_data['scope_name'],
                        'program_url': self.scope_data['program_url'],
                        'platform': self.scope_data['platform']
                    },
                    'metadata': {
                        'export_time': datetime.now().isoformat(),
                        'version': '1.0'
                    }
                }, f, indent=2)
            
            self.add_to_log(f"üíæ Scope saved to {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error saving scope: {e}")
    
    def load_scope_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ scope"""
        try:
            filename = f"scope_{self.scope_data['scope_name'].replace(' ', '_')}.json"
            with open(filename, 'r') as f:
                data = json.load(f)
            
            scope_data = data['scope_data']
            self.scope_data['allowed_ips'] = set(scope_data.get('allowed_ips', []))
            self.scope_data['allowed_domains'] = set(scope_data.get('allowed_domains', []))
            self.scope_data['domain_suffixes'] = set(scope_data.get('domain_suffixes', []))
            self.scope_data['wildcard_domains'] = set(scope_data.get('wildcard_domains', []))
            self.scope_data['excluded_ips'] = set(scope_data.get('excluded_ips', []))
            self.scope_data['excluded_domains'] = set(scope_data.get('excluded_domains', []))
            self.scope_data['scope_name'] = scope_data.get('scope_name', 'Bug Bounty Scope')
            self.scope_data['program_url'] = scope_data.get('program_url', '')
            self.scope_data['platform'] = scope_data.get('platform', 'Other')
            
            self._update_ui_from_scope()
            self.update_statistics()
            self.add_to_log(f"üì• Scope loaded from {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error loading scope: {e}")
    
    def import_from_text(self):
        """–ò–º–ø–æ—Ä—Ç scope –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            text = dpg.get_value("import_text")
            if not text:
                return
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ common scope formats
            domains = set()
            ips = set()
            
            lines = text.split('\n')
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if line.startswith('#') or line.startswith('//') or ':' in line and len(line) < 50:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–æ–º–µ–Ω—ã –∏ IP
                if self._is_ip(line):
                    ips.add(line)
                else:
                    domains.add(line.lower())
            
            self.scope_data['allowed_domains'].update(domains)
            self.scope_data['allowed_ips'].update(ips)
            
            self._update_ui_from_scope()
            self.update_statistics()
            self.add_to_log(f"‚úÖ Imported {len(domains)} domains and {len(ips)} IPs")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error importing scope: {e}")
    
    def load_scope_json(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ scope –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        self.add_to_log("üìÅ Load JSON functionality - to be implemented")
    
    def save_scope_json(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ scope –≤ JSON —Ñ–∞–π–ª"""
        self.save_scope_settings()
    
    def load_default_scope(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ scope –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.scope_data = {
            'allowed_ips': set(),
            'allowed_domains': set(['example.com', 'test.com']),
            'domain_suffixes': set(['.com', '.org']),
            'wildcard_domains': set(['*.example.com']),
            'excluded_ips': set(),
            'excluded_domains': set(),
            'scope_name': 'Default Bug Bounty Scope',
            'program_url': '',
            'platform': 'Other'
        }
        
        self._update_ui_from_scope()
        self.update_statistics()
        self.add_to_log("üîÑ Loaded default scope")
    
    def _update_scope_from_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ scope –¥–∞–Ω–Ω—ã—Ö –∏–∑ UI"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ advanced –≤–∫–ª–∞–¥–∫–∏
        domains_text = dpg.get_value("allowed_domains")
        if domains_text:
            parsed = self._parse_domains(domains_text)
            self.scope_data['allowed_domains'] = parsed['domains']
            self.scope_data['wildcard_domains'] = parsed['wildcards']
        
        ips_text = dpg.get_value("allowed_ips")
        if ips_text:
            self.scope_data['allowed_ips'] = self._parse_ips(ips_text)
    
    def _update_ui_from_scope(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–∑ scope –¥–∞–Ω–Ω—ã—Ö"""
        # –û–±–Ω–æ–≤–ª—è–µ–º quick setup
        dpg.set_value("scope_name", self.scope_data['scope_name'])
        dpg.set_value("program_url", self.scope_data['program_url'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º advanced –≤–∫–ª–∞–¥–∫—É
        domains_text = '\n'.join(sorted(self.scope_data['allowed_domains'] | self.scope_data['wildcard_domains']))
        dpg.set_value("allowed_domains", domains_text)
        
        ips_text = '\n'.join(sorted(self.scope_data['allowed_ips']))
        dpg.set_value("allowed_ips", ips_text)
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ scope"""
        dpg.set_value("stat_scope_domains", f"Domains: {len(self.scope_data['allowed_domains'])}")
        dpg.set_value("stat_scope_ips", f"IP Ranges: {len(self.scope_data['allowed_ips'])}")
        dpg.set_value("stat_scope_suffixes", f"Suffixes: {len(self.scope_data['domain_suffixes'])}")
        dpg.set_value("stat_in_scope", f"In Scope: {len(self.in_scope_targets)}")
        dpg.set_value("stat_out_scope", f"Out of Scope: {len(self.out_of_scope_targets)}")
        dpg.set_value("stat_violations", f"Violations: {len(self.scope_violations)}")
    
    def clear_violations(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π scope"""
        self.scope_violations.clear()
        dpg.configure_item("violations_list", items=[])
        self.update_statistics()
        self.add_to_log("üßπ Scope violations cleared")
    
    def export_violations(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π scope"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"scope_violations_{timestamp}.json"
            
            with open(filename, 'w') as f:
                json.dump(self.scope_violations, f, indent=2)
            
            self.add_to_log(f"üìã Scope violations exported to {filename}")
            
        except Exception as e:
            self.add_to_log(f"‚ùå Error exporting violations: {e}")
    
    def add_to_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)
    
    def set_scope_change_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ scope"""
        self.on_scope_change_callback = callback
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ scope"""
        self.scope_data = {
            'allowed_ips': set(),
            'allowed_domains': set(),
            'domain_suffixes': set(),
            'wildcard_domains': set(),
            'excluded_ips': set(),
            'excluded_domains': set(),
            'scope_name': 'Bug Bounty Scope',
            'program_url': '',
            'platform': 'Other'
        }
        self.in_scope_targets.clear()
        self.out_of_scope_targets.clear()
        self.scope_violations.clear()
        
        self._update_ui_from_scope()
        self.update_statistics()
        self.add_to_log("üßπ Scope cleared")
