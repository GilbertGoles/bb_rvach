"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª RapidRecon
"""
import asyncio
import threading
import sys
import os
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import signal
import time

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from core.engine import PropagationEngine
from core.module_manager import ModuleManager
from gui.main_window import MainWindow

class RapidRecon:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RapidRecon
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥–≤–∏–∂–∫–∞, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    def __init__(self, config_file: str = "config.json"):
        self.config_file = config_file
        self.config = self.load_config()
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.engine: Optional[PropagationEngine] = None
        self.module_manager: Optional[ModuleManager] = None
        self.gui: Optional[MainWindow] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_running = False
        self.engine_thread: Optional[threading.Thread] = None
        self.event_loop: Optional[asyncio.AbstractEventLoop] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.initialize_components()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_signal_handlers()
    
    def load_config(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            Dict —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        default_config = {
            "app": {
                "name": "RapidRecon",
                "version": "1.0.0",
                "debug": False,
                "max_threads": 10
            },
            "engine": {
                "max_depth": 5,
                "max_concurrent_tasks": 5,
                "rate_limit": 50
            },
            "modules": {
                "directory": "src/modules",
                "auto_load": True,
                "auto_discover": True
            },
            "gui": {
                "width": 1400,
                "height": 900,
                "theme": "dark"
            },
            "logging": {
                "level": "INFO",
                "file": "rapidrecon.log",
                "max_size_mb": 10
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                import json
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    self._update_dict_recursive(default_config, loaded_config)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            self.save_config(default_config)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        return default_config
    
    def _update_dict_recursive(self, target: Dict, source: Dict):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è"""
        for key, value in source.items():
            if key in target and isinstance(target[key], dict) and isinstance(value, dict):
                self._update_dict_recursive(target[key], value)
            else:
                target[key] = value
    
    def save_config(self, config: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
            import json
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_config = self.config['logging']
        log_level = getattr(logging, log_config['level'].upper(), logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
        file_handler = logging.FileHandler(
            log_config['file'],
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logger = logging.getLogger('RapidRecon')
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
            modules_dir = self.config['modules']['directory']
            self.module_manager = ModuleManager(modules_dir)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
            if self.config['modules']['auto_discover']:
                discovered = self.module_manager.discover_modules()
                self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(discovered)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
            engine_config = self.config['engine']
            self.engine = PropagationEngine(
                max_depth=engine_config['max_depth'],
                max_concurrent_tasks=engine_config['max_concurrent_tasks']
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
            if self.config['modules']['auto_load']:
                load_results = self.module_manager.load_all_modules()
                loaded_count = sum(1 for result in load_results.values() if result)
                self.logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {loaded_count}/{len(load_results)}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ –¥–≤–∏–∂–∫–µ
                for module_name, success in load_results.items():
                    if success:
                        module_instance = self.module_manager.get_module(module_name)
                        if module_instance:
                            self.engine.register_module(module_name, module_instance)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
            self.gui = MainWindow(self.engine, self.module_manager)
            
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            self.logger.info(f"üì∂ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.shutdown()
        
        signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
        signal.signal(signal.SIGTERM, signal_handler) # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    def start_engine_async(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.logger.info("üîß –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            self.event_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.event_loop)
            
            # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–≤–∏–∂–∫–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if self.engine:
                self.event_loop.run_until_complete(self.engine.process_queue())
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –¥–≤–∏–∂–∫–µ: {e}")
        finally:
            if self.event_loop:
                self.event_loop.close()
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            self.is_running = True
            
            print("üöÄ RapidRecon –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RapidRecon")
            
            app_config = self.config['app']
            self.logger.info(f"üìã –í–µ—Ä—Å–∏—è: {app_config['version']}")
            self.logger.info(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {app_config['debug']}")
            
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.engine_thread = threading.Thread(
                target=self.start_engine_async,
                daemon=True,
                name="EngineThread"
            )
            self.engine_thread.start()
            
            # –ó–∞–ø—É—Å–∫ GUI (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            self.logger.info("üé® –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            self.gui.show()
            
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.show_error_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.shutdown()
    
    def shutdown(self):
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if not self.is_running:
            return
            
        self.is_running = False
        self.logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã RapidRecon...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞
            if self.engine:
                self.engine.stop_engine()
                self.logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ event loop
            if self.event_loop and self.event_loop.is_running():
                self.event_loop.stop()
                self.logger.info("‚úÖ Event loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–≤–∏–∂–∫–∞
            if self.engine_thread and self.engine_thread.is_alive():
                self.engine_thread.join(timeout=5.0)
                if self.engine_thread.is_alive():
                    self.logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –¥–≤–∏–∂–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.logger.info("‚úÖ –ü–æ—Ç–æ–∫ –¥–≤–∏–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI
            if self.gui:
                self.gui.destroy()
                self.logger.info("‚úÖ GUI —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.save_config(self.config)
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            self.logger.info("üéâ RapidRecon –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if threading.active_count() > 1:
                self.logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                os._exit(1)
    
    def show_error_message(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ GUI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        print(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        engine_stats = self.engine.get_statistics() if self.engine else {}
        module_stats = {
            'available_modules': self.module_manager.get_available_modules_count() if self.module_manager else 0,
            'loaded_modules': self.module_manager.get_loaded_modules_count() if self.module_manager else 0
        }
        
        return {
            'is_running': self.is_running,
            'engine_status': engine_stats,
            'modules_status': module_stats,
            'threads_active': threading.active_count(),
            'uptime': getattr(self, 'start_time', 0)
        }


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = RapidRecon()
    app.start_time = start_time
    
    try:
        app.run()
    except Exception as e:
        logging.getLogger('RapidRecon').error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
