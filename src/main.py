"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª RapidRecon
"""
import asyncio
import threading
import sys
import os
import logging
from pathlib import Path
from typing import Optional, Dict, Any, List, Type, Callable
import signal
import time
import importlib

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from core.engine import PropagationEngine
from core.module_manager import ModuleManager
from core.config import ConfigManager
from gui.main_window import MainWindow

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules.ping_scanner.module import PingScanner
from modules.port_scanner.module import PortScanner
from modules.service_detector.module import ServiceDetector
from modules.subdomain_scanner.module import SubdomainScanner
from modules.vulnerability_scanner.module import VulnerabilityScanner
from modules.exploitation.module import Exploitation  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏

class RapidRecon:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RapidRecon
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥–≤–∏–∂–∫–∞, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    def __init__(self, config_file: str = "config.json"):
        self.config_file = config_file
        self.config_manager = ConfigManager(config_file)
        self.config = self.config_manager.load_config()
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.engine: Optional[PropagationEngine] = None
        self.module_manager: Optional[ModuleManager] = None
        self.gui: Optional[MainWindow] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_running = False
        self.engine_thread: Optional[threading.Thread] = None
        self.event_loop: Optional[asyncio.AbstractEventLoop] = None
        self.last_update_time = 0
        self.update_interval = 0.5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.initialize_components()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_signal_handlers()
    
    def load_config(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            Dict —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        return self.config_manager.load_config()
    
    def save_config(self, config: Dict[str, Any] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        if config is None:
            config = self.config
        return self.config_manager.save_config(config)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_config = self.config['logging']
        log_level = getattr(logging, log_config['level'].upper(), logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
        file_handler = logging.FileHandler(
            log_config['file'],
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logger = logging.getLogger('RapidRecon')
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π
            modules_dir = self.config['modules']['directory']
            self.module_manager = ModuleManager(modules_dir)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
            if self.config['modules']['auto_discover']:
                discovered = self.module_manager.discover_modules()
                self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(discovered)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI –∏ config_manager
            engine_config = self.config['engine']
            self.engine = PropagationEngine(update_callback=self.on_engine_update)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            self.register_modules()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if self.config['modules']['auto_load']:
                load_results = self.module_manager.load_all_modules()
                loaded_count = sum(1 for result in load_results.values() if result)
                self.logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {loaded_count}/{len(load_results)}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ –¥–≤–∏–∂–∫–µ
                for module_name, success in load_results.items():
                    if success:
                        module_instance = self.module_manager.get_module(module_name)
                        if module_instance:
                            self.engine.register_module(module_name, module_instance)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
            self.gui = MainWindow(self.engine, self.module_manager, self.config_manager)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.update_interval = self.config['app'].get('update_interval', 0.5)
            
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def register_modules(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –≤ –¥–≤–∏–∂–∫–µ"""
        self.logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
        
        # –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        modules_to_register = {
            "ping_scanner": PingScanner,
            "port_scanner": PortScanner,
            "service_detector": ServiceDetector,
            "subdomain_scanner": SubdomainScanner,
            "vulnerability_scanner": VulnerabilityScanner,
            "exploitation": Exploitation  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
        }
        
        registered_count = 0
        
        for module_name, module_class in modules_to_register.items():
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                module_instance = self.create_module_instance(module_class, module_name)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≤ –¥–≤–∏–∂–∫–µ
                self.engine.register_module(module_name, module_instance)
                registered_count += 1
                self.logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å: {module_name}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        builtin_modules = self.config['modules'].get('builtin_modules', [])
        additional_registered = 0
        
        for module_name in builtin_modules:
            if module_name not in modules_to_register:  # –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
                try:
                    module_class = self.load_builtin_module(module_name)
                    if module_class:
                        module_instance = self.create_module_instance(module_class, module_name)
                        self.engine.register_module(module_name, module_instance)
                        additional_registered += 1
                        self.logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è {module_name}: {e}")
        
        self.logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {registered_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö + {additional_registered} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö")
    
    def create_module_instance(self, module_class: Type, module_name: str) -> Any:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            module_class: –ö–ª–∞—Å—Å –º–æ–¥—É–ª—è
            module_name: –ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
        module_config = self.config_manager.get_module_config(module_name)
        rate_limit = module_config.get('rate_limit', self.engine.rate_limit)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        init_params = module_class.__init__.__code__.co_varnames
        
        if 'config_manager' in init_params and 'module_config' in init_params:
            # –ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            return module_class(rate_limit, config_manager=self.config_manager, module_config=module_config)
        elif 'config_manager' in init_params:
            # –ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ config_manager
            return module_class(rate_limit, config_manager=self.config_manager)
        elif 'module_config' in init_params:
            # –ú–æ–¥—É–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ module_config
            return module_class(rate_limit, module_config=module_config)
        else:
            # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            return module_class(rate_limit)
    
    def load_builtin_module(self, module_name: str) -> Optional[Type]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            module_name: –ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            –ö–ª–∞—Å—Å –º–æ–¥—É–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
        """
        module_paths = {
            "ping_scanner": "modules.ping_scanner.module.PingScanner",
            "port_scanner": "modules.port_scanner.module.PortScanner",
            "service_detector": "modules.service_detector.module.ServiceDetector",
            "subdomain_scanner": "modules.subdomain_scanner.module.SubdomainScanner",
            "vulnerability_scanner": "modules.vulnerability_scanner.module.VulnerabilityScanner",
            "exploitation": "modules.exploitation.module.Exploitation"  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å
        }
        
        if module_name not in module_paths:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å: {module_name}")
            return None
        
        try:
            module_path = module_paths[module_name]
            module_parts = module_path.split('.')
            class_name = module_parts[-1]
            module_path = '.'.join(module_parts[:-1])
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
            module = importlib.import_module(module_path)
            module_class = getattr(module, class_name)
            
            return module_class
            
        except ImportError as e:
            self.logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return None
        except AttributeError as e:
            self.logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å –º–æ–¥—É–ª—è {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
            return None
    
    def on_engine_update(self, event_type: str, data: Any = None):
        """
        Callback –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GUI
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥–≤–∏–∂–∫–∞
            data: –î–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–±—ã—Ç–∏–µ–º
        """
        try:
            current_time = time.time()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å GUI
            if current_time - self.last_update_time < self.update_interval:
                return
                
            self.last_update_time = current_time
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–≤–∏–∂–∫–∞
            if event_type in ['node_discovered', 'node_added', 'task_completed']:
                if self.gui:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.gui.update_graph_from_engine()
                    self.gui.update_statistics()
                    
            elif event_type == 'scan_started':
                if self.gui:
                    self.gui.on_scan_started(data)
                    
            elif event_type == 'scan_completed':
                if self.gui:
                    self.gui.on_scan_completed(data)
                    
            elif event_type == 'task_failed':
                if self.gui:
                    self.gui.on_task_failed(data)
                    
            elif event_type == 'progress_update':
                if self.gui:
                    self.gui.on_progress_update(data)
                    
            elif event_type == 'module_results':
                if self.gui:
                    self.gui.on_module_results(data)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            elif event_type == 'vulnerability_found':
                if self.gui:
                    self.gui.on_vulnerability_found(data)
                # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                if data and data.get('severity') in ['critical', 'high']:
                    self.logger.warning(
                        f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å: {data.get('cve', 'Unknown')} "
                        f"–Ω–∞ {data.get('target', 'Unknown')}"
                    )
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            elif event_type == 'exploitation_success':
                if self.gui:
                    self.gui.on_exploitation_success(data)
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∞—Ç–∞–∫–∏
                if data and data.get('success'):
                    self.logger.critical(
                        f"üí• –£–°–ü–ï–®–ù–ê–Ø –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–Ø: {data.get('access_type', 'Unknown')} "
                        f"–¥–æ—Å—Ç—É–ø –∫ {data.get('target', 'Unknown')}"
                    )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if event_type in ['node_discovered', 'task_failed', 'scan_completed', 
                            'vulnerability_found', 'exploitation_success']:
                self.logger.debug(f"Engine event: {event_type} - {data}")
                
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –≤ engine callback: {e}")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            self.logger.info(f"üì∂ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.shutdown()
        
        signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
        signal.signal(signal.SIGTERM, signal_handler) # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    def start_engine_async(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.logger.info("üîß –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            self.event_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.event_loop)
            
            # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
            if self.engine:
                while self.is_running:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                    if not self.engine.pending_scans.empty():
                        self.event_loop.run_until_complete(self.engine.process_queue())
                    else:
                        # –ñ–¥–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                        time.sleep(0.1)
                        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –¥–≤–∏–∂–∫–µ: {e}")
        finally:
            if self.event_loop:
                self.event_loop.close()
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            self.is_running = True
            
            print("üöÄ RapidRecon –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RapidRecon")
            
            app_config = self.config['app']
            self.logger.info(f"üìã –í–µ—Ä—Å–∏—è: {app_config['version']}")
            self.logger.info(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {app_config['debug']}")
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö
            engine_stats = self.engine.get_statistics()
            self.logger.info(f"üîß –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {engine_stats.get('active_modules', 0)}")
            self.logger.info(f"üìä –ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞: {self.engine.max_depth}")
            self.logger.info(f"‚ö° –õ–∏–º–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏: {self.engine.rate_limit}/—Å–µ–∫")
            self.logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI: {self.update_interval}—Å")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
            builtin_modules = self.config['modules'].get('builtin_modules', [])
            self.logger.info(f"üì¶ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(builtin_modules)}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
            for module_name in builtin_modules:
                module_config = self.config_manager.get_module_config(module_name)
                if module_config:
                    self.logger.debug(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {module_name}: {module_config}")
            
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.engine_thread = threading.Thread(
                target=self.start_engine_async,
                daemon=True,
                name="EngineThread"
            )
            self.engine_thread.start()
            
            # –ó–∞–ø—É—Å–∫ GUI (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            self.logger.info("üé® –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            self.gui.show()
            
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.show_error_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.shutdown()
    
    def shutdown(self):
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if not self.is_running:
            return
            
        self.is_running = False
        self.logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã RapidRecon...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞
            if self.engine:
                self.engine.stop_engine()
                self.logger.info("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ event loop
            if self.event_loop and self.event_loop.is_running():
                self.event_loop.stop()
                self.logger.info("‚úÖ Event loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–≤–∏–∂–∫–∞
            if self.engine_thread and self.engine_thread.is_alive():
                self.engine_thread.join(timeout=5.0)
                if self.engine_thread.is_alive():
                    self.logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –¥–≤–∏–∂–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.logger.info("‚úÖ –ü–æ—Ç–æ–∫ –¥–≤–∏–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ GUI
            if self.gui:
                self.gui.destroy()
                self.logger.info("‚úÖ GUI —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.save_config()
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(self.gui, 'config_manager'):
                self.gui.config_manager.save_profiles()
                self.logger.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
            self.config_manager.save_module_configs()
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.engine and self.engine.discovered_nodes:
                results_file = f"rapidrecon_results_{int(time.time())}.json"
                self.engine.export_results(results_file)
                self.logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {results_file}")
            
            # –û—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö –∏ —É—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫–∞—Ö
            if hasattr(self.engine, 'stats'):
                vuln_count = self.engine.stats.get('vulnerabilities_found', 0)
                exploit_count = self.engine.stats.get('exploits_successful', 0)
                
                if vuln_count > 0:
                    self.logger.warning(f"üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vuln_count}")
                if exploit_count > 0:
                    self.logger.critical(f"üí• –£—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫: {exploit_count}")
            
            self.logger.info("üéâ RapidRecon –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if threading.active_count() > 1:
                self.logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                os._exit(1)
    
    def show_error_message(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ GUI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        print(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        engine_stats = self.engine.get_statistics() if self.engine else {}
        module_stats = {
            'available_modules': self.module_manager.get_available_modules_count() if self.module_manager else 0,
            'loaded_modules': self.module_manager.get_loaded_modules_count() if self.module_manager else 0,
            'builtin_modules': len(self.config['modules'].get('builtin_modules', []))
        }
        
        return {
            'is_running': self.is_running,
            'engine_status': engine_stats,
            'modules_status': module_stats,
            'threads_active': threading.active_count(),
            'uptime': getattr(self, 'start_time', 0),
            'last_update': self.last_update_time,
            'active_profile': getattr(self.config_manager, 'active_profile', 'normal'),
            'vulnerabilities_found': engine_stats.get('vulnerabilities_found', 0),
            'exploits_successful': engine_stats.get('exploits_successful', 0)
        }
    
    def add_scan_target(self, target: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            target: –¶–µ–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–º–µ–Ω, IP, –¥–∏–∞–ø–∞–∑–æ–Ω)
        """
        if self.engine:
            self.engine.add_initial_target(target)
            self.logger.info(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {target}")
        else:
            self.logger.error("‚ùå –î–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_update_interval(self, interval: float):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.update_interval = max(0.1, interval)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 0.1 —Å–µ–∫—É–Ω–¥—ã
        self.logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI: {interval}—Å")
    
    def reload_config(self):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = self.config_manager.load_config()
        self.logger.info("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        if self.engine:
            engine_config = self.config['engine']
            self.engine.max_depth = engine_config.get('max_depth', 5)
            self.engine.rate_limit = engine_config.get('rate_limit', 50)
            self.engine.max_concurrent_tasks = engine_config.get('max_concurrent_tasks', 5)
        
        self.update_interval = self.config['app'].get('update_interval', 0.5)
    
    def get_vulnerability_report(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        """
        if not self.engine:
            return {}
        
        vulnerabilities = []
        exploits = []
        
        for node in self.engine.discovered_nodes:
            if hasattr(node, 'type'):
                if node.type.value == 'vulnerability':
                    vulnerabilities.append({
                        'target': node.data,
                        'severity': node.metadata.get('severity', 'unknown'),
                        'cve': node.vulnerability_data.get('cve', 'Unknown'),
                        'description': node.vulnerability_data.get('description', ''),
                        'cvss_score': node.vulnerability_data.get('cvss_score', 0.0),
                        'source': node.source
                    })
                elif node.type.value == 'exploitation_success':
                    exploits.append({
                        'target': node.data,
                        'access_type': node.exploit_data.get('access_type', 'Unknown'),
                        'credentials': node.exploit_data.get('credentials', {}),
                        'shell_obtained': node.exploit_data.get('shell_obtained', False),
                        'source': node.source
                    })
        
        return {
            'total_vulnerabilities': len(vulnerabilities),
            'total_exploits': len(exploits),
            'vulnerabilities': vulnerabilities,
            'successful_exploits': exploits,
            'summary': {
                'critical': len([v for v in vulnerabilities if v['severity'] == 'critical']),
                'high': len([v for v in vulnerabilities if v['severity'] == 'high']),
                'medium': len([v for v in vulnerabilities if v['severity'] == 'medium']),
                'low': len([v for v in vulnerabilities if v['severity'] == 'low']),
                'successful_attacks': len(exploits)
            }
        }


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = RapidRecon()
    app.start_time = start_time
    
    try:
        app.run()
    except Exception as e:
        logging.getLogger('RapidRecon').error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
